package com.fisglobal.taxreporting.util.journaling;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;

import com.fisglobal.taxreporting.entity.model.taxreporting.aam.TrTableAam;
import com.fisglobal.taxreporting.entity.model.taxreporting.aam.TrTableAamPK;
import com.fisglobal.taxreporting.entity.model.taxreporting.aam.TrTableBm1Aam;
import com.fisglobal.taxreporting.entity.model.taxreporting.aam.TrTableBm3Aam;
import com.fisglobal.taxreporting.entity.model.taxreporting.akb.TrTableAkb;
import com.fisglobal.taxreporting.entity.model.taxreporting.akb.TrTableAkbPK;
import com.fisglobal.taxreporting.entity.model.taxreporting.akb.TrTableBm1Akb;
import com.fisglobal.taxreporting.entity.model.taxreporting.akb.TrTableBm3Akb;
import com.fisglobal.taxreporting.entity.model.taxreporting.ake.TrTableAke;
import com.fisglobal.taxreporting.entity.model.taxreporting.ake.TrTableAkePK;
import com.fisglobal.taxreporting.entity.model.taxreporting.ake.TrTableBm1Ake;
import com.fisglobal.taxreporting.entity.model.taxreporting.ake.TrTableBm3Ake;
import com.fisglobal.taxreporting.entity.model.taxreporting.bm1.TrTableBm1;
import com.fisglobal.taxreporting.entity.model.taxreporting.bm1.TrTableBm1PK;
import com.fisglobal.taxreporting.entity.model.taxreporting.bm3.TrTableBm3;
import com.fisglobal.taxreporting.entity.model.taxreporting.bm3.TrTableBm3PK;
import com.fisglobal.taxreporting.entity.model.taxreporting.bsb.TrTableBsb;
import com.fisglobal.taxreporting.entity.model.taxreporting.eik.TrTableBm1Eik;
import com.fisglobal.taxreporting.entity.model.taxreporting.eik.TrTableBm3Eik;
import com.fisglobal.taxreporting.entity.model.taxreporting.eik.TrTableEik;
import com.fisglobal.taxreporting.entity.model.taxreporting.eik.TrTableEikPK;
import com.fisglobal.taxreporting.entity.model.taxreporting.piv.TrTableBm1Piv;
import com.fisglobal.taxreporting.entity.model.taxreporting.piv.TrTableBm3Piv;
import com.fisglobal.taxreporting.entity.model.taxreporting.piv.TrTablePiv;
import com.fisglobal.taxreporting.entity.model.taxreporting.piv.TrTablePivPK;


public class Journaling {
    public BsbPair getDiff(TrTableBsb before, TrTableBsb after) throws Exception {
        BsbPairWithChangedFlag diffBSBMisc, diffWeiterePerson, diffWeiterePersonAdresse, diffAuftragnehmer,
                diffWeitereFelder, diffSchlusselfelder, diffNaturlichePerson2, diffAnweisung, diffNichtNaturlichePerson,
                diffBetroffenerFallAdresse, diffBetroffenerFall, diffNaturlichePerson1, diffVerfasser,
                diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB, diffBm1Set, diffBm3Set;

        BsbPair pair = new BsbPair();
        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        if (before == null && after == null) {
            return null;
        } else if (before == null) {
            summaries.add("Added a new BSB record");
        } else if (after == null) {
            summaries.add("Removed BSB record");
        } else {
            if (!before.getTrTableBsbPK().equals(after.getTrTableBsbPK())) {
                throw new Exception("The primary keys of the two bsb tables are different. Should be equal.");
            }
        }
        diffBSBMisc = getDiffBSBMisc(before, after);
        diffWeiterePerson = getDiffWeiterePerson(before, after);
        diffWeiterePersonAdresse = getDiffWeiterePersonAdresse(before, after);
        diffAuftragnehmer = getDiffAuftragnehmer(before, after);
        diffWeitereFelder = getDiffWeitereFelder(before, after);
        diffSchlusselfelder = getDiffSchlusselfelder(before, after);
        diffNaturlichePerson2 = getDiffNaturlichePerson2(before, after);
        diffAnweisung = getDiffAnweisung(before, after);
        diffNichtNaturlichePerson = getDiffNichtNaturlichePerson(before, after);
        diffBetroffenerFallAdresse = getDiffBetroffenerFallAdresse(before, after);
        diffBetroffenerFall = getDiffBetroffenerFall(before, after);
        diffNaturlichePerson1 = getDiffNaturlichePerson1(before, after);
        diffVerfasser = getDiffVerfasser(before, after);
        diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB = getDiffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB(
                before, after);
        diffBm1Set = getDiffBm1Set(before, after);
        diffBm3Set = getDiffBm3Set(before, after);

        changed = changed || diffBSBMisc.isChanged() || diffWeiterePerson.isChanged()
                || diffWeiterePersonAdresse.isChanged() || diffAuftragnehmer.isChanged()
                || diffWeitereFelder.isChanged() || diffSchlusselfelder.isChanged() || diffNaturlichePerson2.isChanged()
                || diffAnweisung.isChanged() || diffNichtNaturlichePerson.isChanged()
                || diffBetroffenerFallAdresse.isChanged() || diffBetroffenerFall.isChanged()
                || diffNaturlichePerson1.isChanged() || diffVerfasser.isChanged()
                || diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.isChanged();

        if (changed) {
            summaries.add("Changed Bsb");
        }

        if (diffBSBMisc != null) {

            if (diffBSBMisc.getPair() != null && diffBSBMisc.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffBSBMisc.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffBSBMisc.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffBSBMisc.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffBSBMisc.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffBSBMisc.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBSBMisc.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffBSBMisc.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffBSBMisc.getPair().getSummaries());
                }
            }
        }

        if (diffWeiterePerson != null) {

            if (diffWeiterePerson.getPair() != null && diffWeiterePerson.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffWeiterePerson.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffWeiterePerson.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffWeiterePerson.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffWeiterePerson.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffWeiterePerson.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffWeiterePerson.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffWeiterePerson.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffWeiterePerson.getPair().getSummaries());
                }
            }
        }

        if (diffWeiterePersonAdresse != null) {

            if (diffWeiterePersonAdresse.getPair() != null
                    && diffWeiterePersonAdresse.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffWeiterePersonAdresse.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffWeiterePersonAdresse.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffWeiterePersonAdresse.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffWeiterePersonAdresse.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffWeiterePersonAdresse.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffWeiterePersonAdresse.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffWeiterePersonAdresse.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffWeiterePersonAdresse.getPair().getSummaries());
                }
            }
        }

        if (diffAuftragnehmer != null) {

            if (diffAuftragnehmer.getPair() != null && diffAuftragnehmer.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffAuftragnehmer.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffAuftragnehmer.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffAuftragnehmer.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffAuftragnehmer.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffAuftragnehmer.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffAuftragnehmer.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffAuftragnehmer.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffAuftragnehmer.getPair().getSummaries());
                }
            }
        }

        if (diffWeitereFelder != null) {

            if (diffWeitereFelder.getPair() != null && diffWeitereFelder.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffWeitereFelder.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffWeitereFelder.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffWeitereFelder.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffWeitereFelder.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffWeitereFelder.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffWeitereFelder.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffWeitereFelder.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffWeitereFelder.getPair().getSummaries());
                }
            }
        }

        if (diffSchlusselfelder != null) {

            if (diffSchlusselfelder.getPair() != null && diffSchlusselfelder.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffSchlusselfelder.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffSchlusselfelder.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffSchlusselfelder.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffSchlusselfelder.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffSchlusselfelder.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffSchlusselfelder.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffSchlusselfelder.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffSchlusselfelder.getPair().getSummaries());
                }
            }
        }

        if (diffNaturlichePerson2 != null) {

            if (diffNaturlichePerson2.getPair() != null && diffNaturlichePerson2.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffNaturlichePerson2.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffNaturlichePerson2.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffNaturlichePerson2.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffNaturlichePerson2.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffNaturlichePerson2.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffNaturlichePerson2.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffNaturlichePerson2.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffNaturlichePerson2.getPair().getSummaries());
                }
            }
        }

        if (diffAnweisung != null) {

            if (diffAnweisung.getPair() != null && diffAnweisung.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffAnweisung.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffAnweisung.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffAnweisung.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffAnweisung.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffAnweisung.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffAnweisung.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffAnweisung.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffAnweisung.getPair().getSummaries());
                }
            }
        }

        if (diffNichtNaturlichePerson != null) {

            if (diffNichtNaturlichePerson.getPair() != null
                    && diffNichtNaturlichePerson.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffNichtNaturlichePerson.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffNichtNaturlichePerson.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffNichtNaturlichePerson.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffNichtNaturlichePerson.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffNichtNaturlichePerson.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffNichtNaturlichePerson.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffNichtNaturlichePerson.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffNichtNaturlichePerson.getPair().getSummaries());
                }
            }
        }

        if (diffBetroffenerFallAdresse != null) {

            if (diffBetroffenerFallAdresse.getPair() != null
                    && diffBetroffenerFallAdresse.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffBetroffenerFallAdresse.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffBetroffenerFallAdresse.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffBetroffenerFallAdresse.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffBetroffenerFallAdresse.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffBetroffenerFallAdresse.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBetroffenerFallAdresse.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffBetroffenerFallAdresse.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffBetroffenerFallAdresse.getPair().getSummaries());
                }
            }
        }

        if (diffBetroffenerFall != null) {

            if (diffBetroffenerFall.getPair() != null && diffBetroffenerFall.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffBetroffenerFall.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffBetroffenerFall.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffBetroffenerFall.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffBetroffenerFall.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffBetroffenerFall.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBetroffenerFall.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffBetroffenerFall.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffBetroffenerFall.getPair().getSummaries());
                }
            }
        }

        if (diffNaturlichePerson1 != null) {

            if (diffNaturlichePerson1.getPair() != null && diffNaturlichePerson1.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffNaturlichePerson1.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffNaturlichePerson1.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffNaturlichePerson1.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffNaturlichePerson1.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffNaturlichePerson1.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffNaturlichePerson1.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffNaturlichePerson1.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffNaturlichePerson1.getPair().getSummaries());
                }
            }
        }

        if (diffVerfasser != null) {

            if (diffVerfasser.getPair() != null && diffVerfasser.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffVerfasser.getPair().getChanges().get("TR_TABLE_BSB") != null)
                        && diffVerfasser.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB")
                            .addAll(diffVerfasser.getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffVerfasser.getPair().getChanges().get("TR_TABLE_BSB") != null)
                            && diffVerfasser.getPair().getChanges().get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffVerfasser.getPair().getChanges().get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffVerfasser.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffVerfasser.getPair().getSummaries());
                }
            }
        }

        if (diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB != null) {

            if (diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair() != null
                    && diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BSB")
                        && (diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair().getChanges()
                                .get("TR_TABLE_BSB") != null)
                        && diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair().getChanges()
                                .get("TR_TABLE_BSB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BSB").addAll(diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB
                            .getPair().getChanges().get("TR_TABLE_BSB"));
                } else {
                    if ((diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair().getChanges()
                            .get("TR_TABLE_BSB") != null)
                            && diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair().getChanges()
                                    .get("TR_TABLE_BSB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair().getChanges()
                                .get("TR_TABLE_BSB"));
                        pair.getChanges().put("TR_TABLE_BSB", changesList);
                    }
                }

                if (diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB.getPair().getSummaries());
                }
            }
        }

        if (diffBm1Set != null) {

            if (diffBm1Set.getPair() != null && diffBm1Set.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BM1")
                        && (diffBm1Set.getPair().getChanges().get("TR_TABLE_BM1") != null)
                        && diffBm1Set.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BM1").addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_BM1"));
                } else {
                    if ((diffBm1Set.getPair().getChanges().get("TR_TABLE_BM1") != null)
                            && diffBm1Set.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_BM1"));
                        pair.getChanges().put("TR_TABLE_BM1", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_AAM")
                        && (diffBm1Set.getPair().getChanges().get("TR_TABLE_AAM") != null)
                        && diffBm1Set.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                    pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_AAM"));
                } else {
                    if ((diffBm1Set.getPair().getChanges().get("TR_TABLE_AAM") != null)
                            && diffBm1Set.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_AAM"));
                        pair.getChanges().put("TR_TABLE_AAM", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_AKB")
                        && (diffBm1Set.getPair().getChanges().get("TR_TABLE_AKB") != null)
                        && diffBm1Set.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_AKB"));
                } else {
                    if ((diffBm1Set.getPair().getChanges().get("TR_TABLE_AKB") != null)
                            && diffBm1Set.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_AKB"));
                        pair.getChanges().put("TR_TABLE_AKB", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_AKE")
                        && (diffBm1Set.getPair().getChanges().get("TR_TABLE_AKE") != null)
                        && diffBm1Set.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                    pair.getChanges().get("TR_TABLE_AKE").addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_AKE"));
                } else {
                    if ((diffBm1Set.getPair().getChanges().get("TR_TABLE_AKE") != null)
                            && diffBm1Set.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_AKE"));
                        pair.getChanges().put("TR_TABLE_AKE", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_EIK")
                        && (diffBm1Set.getPair().getChanges().get("TR_TABLE_EIK") != null)
                        && diffBm1Set.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                    pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_EIK"));
                } else {
                    if ((diffBm1Set.getPair().getChanges().get("TR_TABLE_EIK") != null)
                            && diffBm1Set.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_EIK"));
                        pair.getChanges().put("TR_TABLE_EIK", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_PIV")
                        && (diffBm1Set.getPair().getChanges().get("TR_TABLE_PIV") != null)
                        && diffBm1Set.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                    pair.getChanges().get("TR_TABLE_PIV").addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_PIV"));
                } else {
                    if ((diffBm1Set.getPair().getChanges().get("TR_TABLE_PIV") != null)
                            && diffBm1Set.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm1Set.getPair().getChanges().get("TR_TABLE_PIV"));
                        pair.getChanges().put("TR_TABLE_PIV", changesList);
                    }
                }

                if (diffBm1Set.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffBm1Set.getPair().getSummaries());
                }
            }
        }

        if (diffBm3Set != null) {

            if (diffBm3Set.getPair() != null && diffBm3Set.getPair().getChanges().size() > 0) {

                if (pair.getChanges().containsKey("TR_TABLE_BM3")
                        && (diffBm3Set.getPair().getChanges().get("TR_TABLE_BM3") != null)
                        && diffBm3Set.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                    pair.getChanges().get("TR_TABLE_BM3").addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_BM3"));
                } else {
                    if ((diffBm3Set.getPair().getChanges().get("TR_TABLE_BM3") != null)
                            && diffBm3Set.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_BM3"));
                        pair.getChanges().put("TR_TABLE_BM3", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_AAM")
                        && (diffBm3Set.getPair().getChanges().get("TR_TABLE_AAM") != null)
                        && diffBm3Set.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                    pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_AAM"));
                } else {
                    if ((diffBm3Set.getPair().getChanges().get("TR_TABLE_AAM") != null)
                            && diffBm3Set.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_AAM"));
                        pair.getChanges().put("TR_TABLE_AAM", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_AKB")
                        && (diffBm3Set.getPair().getChanges().get("TR_TABLE_AKB") != null)
                        && diffBm3Set.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                    pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_AKB"));
                } else {
                    if ((diffBm3Set.getPair().getChanges().get("TR_TABLE_AKB") != null)
                            && diffBm3Set.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_AKB"));
                        pair.getChanges().put("TR_TABLE_AKB", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_AKE")
                        && (diffBm3Set.getPair().getChanges().get("TR_TABLE_AKE") != null)
                        && diffBm3Set.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                    pair.getChanges().get("TR_TABLE_AKE").addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_AKE"));
                } else {
                    if ((diffBm3Set.getPair().getChanges().get("TR_TABLE_AKE") != null)
                            && diffBm3Set.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_AKE"));
                        pair.getChanges().put("TR_TABLE_AKE", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_EIK")
                        && (diffBm3Set.getPair().getChanges().get("TR_TABLE_EIK") != null)
                        && diffBm3Set.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                    pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_EIK"));
                } else {
                    if ((diffBm3Set.getPair().getChanges().get("TR_TABLE_EIK") != null)
                            && diffBm3Set.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_EIK"));
                        pair.getChanges().put("TR_TABLE_EIK", changesList);
                    }
                }

                if (pair.getChanges().containsKey("TR_TABLE_PIV")
                        && (diffBm3Set.getPair().getChanges().get("TR_TABLE_PIV") != null)
                        && diffBm3Set.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                    pair.getChanges().get("TR_TABLE_PIV").addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_PIV"));
                } else {
                    if ((diffBm3Set.getPair().getChanges().get("TR_TABLE_PIV") != null)
                            && diffBm3Set.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                        changesList = new ArrayList<>();
                        changesList.addAll(diffBm3Set.getPair().getChanges().get("TR_TABLE_PIV"));
                        pair.getChanges().put("TR_TABLE_PIV", changesList);
                    }
                }

                if (diffBm3Set.getPair().getSummaries().size() > 0) {
                    summaries.addAll(diffBm3Set.getPair().getSummaries());
                }
            }
        }

        if (summaries.isEmpty()) {
            return null;
        }

        pair.setSummaries(summaries);

        return pair;

    }

    private BsbPairWithChangedFlag getDiffBSBMisc(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            if (bsb_after.getAenderDatum().compareTo(new BigDecimal(0)) != 0) {
                diffMap.clear();
                diffMap.put("after", bsb_after.getAenderDatum());
                fieldMap.put("aenderDatum", new HashMap<>(diffMap));
            } else {
                diffMap.clear();
                diffMap.put("after", bsb_after.getAenderDatum());
                fieldMap.put("aenderDatum", new HashMap<>(diffMap));
            }

            if (bsb_after.getAenderDatum().compareTo(new BigDecimal(0)) != 0) {
                diffMap.clear();
                diffMap.put("after", bsb_after.getAenderZeit());
                fieldMap.put("aenderZeit", new HashMap<>(diffMap));
            } else {
                diffMap.clear();
                diffMap.put("after", bsb_after.getAenderZeit());
                fieldMap.put("aenderZeit", new HashMap<>(diffMap));
            }

            diffMap.clear();
            if (bsb_after.getAenderErfasser() != null) {

                diffMap.put("after", rtrim(bsb_after.getAenderErfasser()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aenderErfasser", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            if (bsb_before.getAenderDatum().compareTo(new BigDecimal(0)) != 0) {
                diffMap.clear();
                diffMap.put("before", bsb_before.getAenderDatum());
                fieldMap.put("aenderDatum", new HashMap<>(diffMap));
            }

            if (bsb_before.getAenderDatum().compareTo(new BigDecimal(0)) != 0) {
                diffMap.clear();

                diffMap.put("before", bsb_before.getAenderZeit());
                fieldMap.put("aenderZeit", new HashMap<>(diffMap));
            }

            if (!StringUtils.isEmpty(bsb_before.getAenderErfasser().trim())) {
                diffMap.clear();
                diffMap.put("before", rtrim(bsb_before.getAenderErfasser()));
                fieldMap.put("aenderErfasser", new HashMap<>(diffMap));
            }
        } else {

            diffMap.clear();

            if (bsb_before.getAenderDatum().compareTo(bsb_after.getAenderDatum()) != 0) {
                diffMap.put("before", bsb_before.getAenderDatum());
                diffMap.put("after", bsb_after.getAenderDatum());
                fieldMap.put("aenderDatum", new HashMap<>(diffMap));
            }

            if (bsb_before.getAenderZeit().compareTo(bsb_after.getAenderZeit()) != 0) {
                diffMap.clear();

                diffMap.put("before", bsb_before.getAenderZeit());
                diffMap.put("after", bsb_after.getAenderZeit());
                fieldMap.put("aenderZeit", new HashMap<>(diffMap));
            }

            if (!bsb_before.getAenderErfasser().trim().equals(bsb_after.getAenderErfasser().trim())) {
                diffMap.clear();

                if (bsb_before.getAenderErfasser() != null) {
                    diffMap.put("before", rtrim(bsb_before.getAenderErfasser()));
                } else {
                    diffMap.put("before", null);
                }

                if (bsb_after.getAenderErfasser() != null) {
                    diffMap.put("after", rtrim(bsb_after.getAenderErfasser()));
                } else {
                    diffMap.put("after", null);
                }

                fieldMap.put("aenderErfasser", new HashMap<>(diffMap));
            }
        }

        if (sectionMap.containsKey("BSBMisc")) {
            sectionMap.get("BSBMisc").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("BSBMisc", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed BSBMisc");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffWeiterePerson(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getRolleWeiterePers() != null) {

                diffMap.put("after", rtrim(bsb_after.getRolleWeiterePers()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("rolleWeiterePers", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpGeschlecht() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpGeschlecht()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpGeschlecht", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpTin() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpTin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpTin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpNationalitaet() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpNationalitaet()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpNationalitaet", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpName() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpName()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpName", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpVorname() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpVorname()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpVorname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpNamensvorsatz() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpNamensvorsatz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpNamensvorsatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpNamenszusatz() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpNamenszusatz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpNamenszusatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpTitel() != null) {

                diffMap.put("after", bsb_after.getNwpTitel());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpTitel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpGeburtsdatum() != null) {

                diffMap.put("after", bsb_after.getNwpGeburtsdatum());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpGeburtsdatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpGeburtsname() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpGeburtsname()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpGeburtsname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpGebNameVors() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpGebNameVors()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpGebNameVors", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpGebNameZus() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpGebNameZus()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpGebnameZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpGeburtsort() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpGeburtsort()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpGeburtsort", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpGebLandSchl() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpGebLandSchl()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpGebLandSchl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpGeburtsland() != null) {

                diffMap.put("after", bsb_after.getNwpGeburtsland());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpGeburtsland", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpAuswandDatum() != null) {

                diffMap.put("after", bsb_after.getNwpAuswandDatum());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpAuswandDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpSterbeDatum() != null) {

                diffMap.put("after", bsb_after.getNwpSterbeDatum());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpSterbeDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpTyp() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpTyp()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpTyp", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNwpPersoninfo() != null) {

                diffMap.put("after", rtrim(bsb_after.getNwpPersoninfo()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nwpPersonInfo", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getRolleWeiterePers() != null) {

                diffMap.put("before", rtrim(bsb_after.getRolleWeiterePers()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("rolleWeiterePers", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpGeschlecht() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpGeschlecht()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpGeschlecht", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpTin() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpTin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpTin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpNationalitaet() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpNationalitaet()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpNationalitaet", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpName() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpName()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpName", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpVorname() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpVorname()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpVorname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpNamensvorsatz() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpNamensvorsatz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpNamensvorsatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpNamenszusatz() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpNamenszusatz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpNamenszusatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpTitel() != null) {

                diffMap.put("before", bsb_after.getNwpTitel());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpTitel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpGeburtsdatum() != null) {

                diffMap.put("before", bsb_after.getNwpGeburtsdatum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpGeburtsdatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpGeburtsname() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpGeburtsname()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpGeburtsname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpGebNameVors() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpGebNameVors()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpGebNameVors", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpGebNameZus() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpGebNameZus()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpGebnameZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpGeburtsort() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpGeburtsort()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpGeburtsort", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpGebLandSchl() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpGebLandSchl()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpGebLandSchl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpGeburtsland() != null) {

                diffMap.put("before", bsb_after.getNwpGeburtsland());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpGeburtsland", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpAuswandDatum() != null) {

                diffMap.put("before", bsb_after.getNwpAuswandDatum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpAuswandDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpSterbeDatum() != null) {

                diffMap.put("before", bsb_after.getNwpSterbeDatum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpSterbeDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpTyp() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpTyp()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpTyp", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNwpPersoninfo() != null) {

                diffMap.put("before", rtrim(bsb_after.getNwpPersoninfo()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nwpPersonInfo", new HashMap<>(diffMap));
        } else {

            if ((bsb_before.getRolleWeiterePers() != null && bsb_after.getRolleWeiterePers() != null
                    && !(rtrim(bsb_before.getRolleWeiterePers()).equals(rtrim(bsb_after.getRolleWeiterePers()))))
                    || (bsb_before.getRolleWeiterePers() != null
                            && StringUtils.isNotBlank(bsb_before.getRolleWeiterePers().trim()))
                    || (bsb_after.getRolleWeiterePers() != null
                            && StringUtils.isNotBlank(bsb_after.getRolleWeiterePers().trim()))) {

                diffMap.clear();

                if (bsb_before.getRolleWeiterePers() != null) {

                    if (bsb_after.getRolleWeiterePers() != null
                            && !rtrim(bsb_before.getRolleWeiterePers()).equals(rtrim((bsb_after.getRolleWeiterePers())))
                            || bsb_after.getRolleWeiterePers() == null) {
                        diffMap.put("before", rtrim(bsb_before.getRolleWeiterePers()));
                    }
                } else {
                    if (bsb_after.getRolleWeiterePers() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getRolleWeiterePers() != null) {

                    if (bsb_before.getRolleWeiterePers() != null
                            && !rtrim(bsb_before.getRolleWeiterePers()).equals(rtrim((bsb_after.getRolleWeiterePers())))
                            || bsb_before.getRolleWeiterePers() == null) {
                        diffMap.put("after", rtrim(bsb_after.getRolleWeiterePers()));
                    }
                } else {
                    if (bsb_before.getRolleWeiterePers() != null) {
                        diffMap.put("after", null);
                    }
                }
                if (bsb_before.getRolleWeiterePers() != null && bsb_after.getRolleWeiterePers() != null
                        && !rtrim(bsb_before.getRolleWeiterePers()).equals(rtrim((bsb_after.getRolleWeiterePers())))
                        || (bsb_before.getRolleWeiterePers() != null && bsb_after.getRolleWeiterePers() == null)
                        || (bsb_after.getRolleWeiterePers() != null && bsb_before.getRolleWeiterePers() == null)) {
                    fieldMap.put("rolleWeiterePers", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpGeschlecht() != null && bsb_after.getNwpGeschlecht() != null
                    && !(rtrim(bsb_before.getNwpGeschlecht()).equals(rtrim(bsb_after.getNwpGeschlecht()))))
                    || (bsb_before.getNwpGeschlecht() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpGeschlecht().trim()))
                    || (bsb_after.getNwpGeschlecht() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpGeschlecht().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpGeschlecht() != null) {

                    if (bsb_after.getNwpGeschlecht() != null
                            && !rtrim(bsb_before.getNwpGeschlecht()).equals(rtrim((bsb_after.getNwpGeschlecht())))
                            || bsb_after.getNwpGeschlecht() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpGeschlecht()));
                    }
                } else {
                    if (bsb_after.getNwpGeschlecht() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpGeschlecht() != null) {

                    if (bsb_before.getNwpGeschlecht() != null
                            && !rtrim(bsb_before.getNwpGeschlecht()).equals(rtrim((bsb_after.getNwpGeschlecht())))
                            || bsb_before.getNwpGeschlecht() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpGeschlecht()));
                    }
                } else {
                    if (bsb_before.getNwpGeschlecht() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpGeschlecht() != null && bsb_after.getNwpGeschlecht() != null
                        && !rtrim(bsb_before.getNwpGeschlecht()).equals(rtrim((bsb_after.getNwpGeschlecht())))
                        || (bsb_before.getNwpGeschlecht() != null && bsb_after.getNwpGeschlecht() == null)
                        || (bsb_after.getNwpGeschlecht() != null && bsb_before.getNwpGeschlecht() == null)) {
                    fieldMap.put("nwpGeschlecht", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpTin() != null && bsb_after.getNwpTin() != null
                    && !(rtrim(bsb_before.getNwpTin()).equals(rtrim(bsb_after.getNwpTin()))))
                    || (bsb_before.getNwpTin() != null && StringUtils.isNotBlank(bsb_before.getNwpTin().trim()))
                    || (bsb_after.getNwpTin() != null && StringUtils.isNotBlank(bsb_after.getNwpTin().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpTin() != null) {

                    if (bsb_after.getNwpTin() != null
                            && !rtrim(bsb_before.getNwpTin()).equals(rtrim((bsb_after.getNwpTin())))
                            || bsb_after.getNwpTin() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpTin()));
                    }
                } else {

                    if (bsb_after.getNwpTin() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpTin() != null) {

                    if (bsb_before.getNwpTin() != null
                            && !rtrim(bsb_before.getNwpTin()).equals(rtrim((bsb_after.getNwpTin())))
                            || bsb_before.getNwpTin() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpTin()));
                    }
                } else {
                    if (bsb_before.getNwpTin() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpTin() != null && bsb_after.getNwpTin() != null
                        && !rtrim(bsb_before.getNwpTin()).equals(rtrim((bsb_after.getNwpTin())))
                        || (bsb_before.getNwpTin() != null && bsb_after.getNwpTin() == null)
                        || (bsb_after.getNwpTin() != null && bsb_before.getNwpTin() == null)) {
                    fieldMap.put("nwpTin", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpNationalitaet() != null && bsb_after.getNwpNationalitaet() != null
                    && !(rtrim(bsb_before.getNwpNationalitaet()).equals(rtrim(bsb_after.getNwpNationalitaet()))))
                    || (bsb_before.getNwpNationalitaet() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpNationalitaet().trim()))
                    || (bsb_after.getNwpNationalitaet() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpNationalitaet().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpNationalitaet() != null) {

                    if (bsb_after.getNwpNationalitaet() != null
                            && !rtrim(bsb_before.getNwpNationalitaet()).equals(rtrim((bsb_after.getNwpNationalitaet())))
                            || bsb_after.getNwpNationalitaet() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpNationalitaet()));
                    }
                } else {

                    if (bsb_after.getNwpNationalitaet() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpNationalitaet() != null) {

                    if (bsb_before.getNwpNationalitaet() != null
                            && !rtrim(bsb_before.getNwpNationalitaet()).equals(rtrim((bsb_after.getNwpNationalitaet())))
                            || bsb_before.getNwpNationalitaet() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpNationalitaet()));
                    }
                } else {

                    if (bsb_before.getNwpNationalitaet() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpNationalitaet() != null && bsb_after.getNwpNationalitaet() != null
                        && !rtrim(bsb_before.getNwpNationalitaet()).equals(rtrim((bsb_after.getNwpNationalitaet())))
                        || (bsb_before.getNwpNationalitaet() != null && bsb_after.getNwpNationalitaet() == null)
                        || (bsb_after.getNwpNationalitaet() != null && bsb_before.getNwpNationalitaet() == null)) {
                    fieldMap.put("nwpNationalitaet", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpName() != null && bsb_after.getNwpName() != null
                    && !(rtrim(bsb_before.getNwpName()).equals(rtrim(bsb_after.getNwpName()))))
                    || (bsb_before.getNwpName() != null && StringUtils.isNotBlank(bsb_before.getNwpName().trim()))
                    || (bsb_after.getNwpName() != null && StringUtils.isNotBlank(bsb_after.getNwpName().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpName() != null) {

                    if (bsb_after.getNwpName() != null
                            && !rtrim(bsb_before.getNwpName()).equals(rtrim((bsb_after.getNwpName())))
                            || bsb_after.getNwpName() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpName()));
                    }
                } else {

                    if (bsb_after.getNwpName() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpName() != null) {

                    if (bsb_before.getNwpName() != null
                            && !rtrim(bsb_before.getNwpName()).equals(rtrim((bsb_after.getNwpName())))
                            || bsb_before.getNwpName() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpName()));
                    }
                } else {
                    diffMap.put("after", null);
                }

                if (bsb_before.getNwpName() != null && bsb_after.getNwpName() != null
                        && !rtrim(bsb_before.getNwpName()).equals(rtrim((bsb_after.getNwpName())))
                        || (bsb_before.getNwpName() != null && bsb_after.getNwpName() == null)
                        || (bsb_after.getNwpName() != null && bsb_before.getNwpName() == null)) {
                    fieldMap.put("nwpName", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpVorname() != null && bsb_after.getNwpVorname() != null
                    && !(rtrim(bsb_before.getNwpVorname()).equals(rtrim(bsb_after.getNwpVorname()))))
                    || (bsb_before.getNwpVorname() != null && StringUtils.isNotBlank(bsb_before.getNwpVorname().trim()))
                    || (bsb_after.getNwpVorname() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpVorname().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpVorname() != null) {

                    if (bsb_after.getNwpVorname() != null
                            && !rtrim(bsb_before.getNwpVorname()).equals(rtrim((bsb_after.getNwpVorname())))
                            || bsb_after.getNwpVorname() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpVorname()));
                    }
                } else {
                    if (bsb_after.getNwpVorname() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpVorname() != null) {

                    if (bsb_before.getNwpVorname() != null
                            && !rtrim(bsb_before.getNwpVorname()).equals(rtrim((bsb_after.getNwpVorname())))
                            || bsb_before.getNwpVorname() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpVorname()));
                    }
                } else {
                    if (bsb_before.getNwpVorname() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpVorname() != null && bsb_after.getNwpVorname() != null
                        && !rtrim(bsb_before.getNwpVorname()).equals(rtrim((bsb_after.getNwpVorname())))
                        || (bsb_before.getNwpVorname() != null && bsb_after.getNwpVorname() == null)
                        || (bsb_after.getNwpVorname() != null && bsb_before.getNwpVorname() == null)) {
                    fieldMap.put("nwpVorname", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpNamensvorsatz() != null && bsb_after.getNwpNamensvorsatz() != null
                    && !(rtrim(bsb_before.getNwpNamensvorsatz()).equals(rtrim(bsb_after.getNwpNamensvorsatz()))))
                    || (bsb_before.getNwpNamensvorsatz() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpNamensvorsatz().trim()))
                    || (bsb_after.getNwpNamensvorsatz() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpNamensvorsatz().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpNamensvorsatz() != null) {

                    if (bsb_after.getNwpNamensvorsatz() != null
                            && !rtrim(bsb_before.getNwpNamensvorsatz()).equals(rtrim((bsb_after.getNwpNamensvorsatz())))
                            || bsb_after.getNwpNamensvorsatz() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpNamensvorsatz()));
                    }
                } else {

                    if (bsb_after.getNwpNamensvorsatz() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpNamensvorsatz() != null) {

                    if (bsb_before.getNwpNamensvorsatz() != null
                            && !rtrim(bsb_before.getNwpNamensvorsatz()).equals(rtrim((bsb_after.getNwpNamensvorsatz())))
                            || bsb_before.getNwpNamensvorsatz() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpNamensvorsatz()));
                    }
                } else {
                    if (bsb_before.getNwpNamensvorsatz() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpNamensvorsatz() != null && bsb_after.getNwpNamensvorsatz() != null
                        && !rtrim(bsb_before.getNwpNamensvorsatz()).equals(rtrim((bsb_after.getNwpNamensvorsatz())))
                        || (bsb_before.getNwpNamensvorsatz() != null && bsb_after.getNwpNamensvorsatz() == null)
                        || (bsb_after.getNwpNamensvorsatz() != null && bsb_before.getNwpNamensvorsatz() == null)) {
                    fieldMap.put("nwpNamensVorsatz", new HashMap<>(diffMap));
                }

                hydrated++;
            }

            if ((bsb_before.getNwpNamenszusatz() != null && bsb_after.getNwpNamenszusatz() != null
                    && !(rtrim(bsb_before.getNwpNamenszusatz()).equals(rtrim(bsb_after.getNwpNamenszusatz()))))
                    || (bsb_before.getNwpNamenszusatz() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpNamenszusatz().trim()))
                    || (bsb_after.getNwpNamenszusatz() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpNamenszusatz().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpNamenszusatz() != null) {

                    if (bsb_after.getNwpNamenszusatz() != null
                            && !rtrim(bsb_before.getNwpNamenszusatz()).equals(rtrim((bsb_after.getNwpNamenszusatz())))
                            || bsb_after.getNwpNamenszusatz() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpNamenszusatz()));
                    }
                } else {

                    if (bsb_after.getNwpNamenszusatz() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpNamenszusatz() != null) {

                    if (bsb_before.getNwpNamenszusatz() != null
                            && !rtrim(bsb_before.getNwpNamenszusatz()).equals(rtrim((bsb_after.getNwpNamenszusatz())))
                            || bsb_before.getNwpNamenszusatz() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpNamenszusatz()));
                    }
                } else {
                    if (bsb_before.getNwpNamenszusatz() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpNamenszusatz() != null && bsb_after.getNwpNamenszusatz() != null
                        && !rtrim(bsb_before.getNwpNamenszusatz()).equals(rtrim((bsb_after.getNwpNamenszusatz())))
                        || (bsb_before.getNwpNamenszusatz() != null && bsb_after.getNwpNamenszusatz() == null)
                        || (bsb_after.getNwpNamenszusatz() != null && bsb_before.getNwpNamenszusatz() == null)) {
                    fieldMap.put("nwpNamensZusatz", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpTitel() != null && bsb_after.getNwpTitel() != null
                    && !(rtrim(bsb_before.getNwpTitel()).equals(rtrim(bsb_after.getNwpTitel()))))
                    || (bsb_before.getNwpTitel() != null && StringUtils.isNotBlank(bsb_before.getNwpTitel().trim()))
                    || (bsb_after.getNwpTitel() != null && StringUtils.isNotBlank(bsb_after.getNwpTitel().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpTitel() != null) {

                    if (bsb_after.getNwpTitel() != null
                            && !rtrim(bsb_before.getNwpTitel()).equals(rtrim((bsb_after.getNwpTitel())))
                            || bsb_after.getNwpTitel() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpTitel()));
                    }
                } else {

                    if (bsb_after.getNwpTitel() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpTitel() != null) {

                    if (bsb_before.getNwpTitel() != null
                            && !rtrim(bsb_before.getNwpTitel()).equals(rtrim((bsb_after.getNwpTitel())))
                            || bsb_before.getNwpTitel() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpTitel()));
                    }
                } else {
                    if (bsb_before.getNwpTitel() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpTitel() != null && bsb_after.getNwpTitel() != null
                        && !rtrim(bsb_before.getNwpTitel()).equals(rtrim((bsb_after.getNwpTitel())))
                        || (bsb_before.getNwpTitel() != null && bsb_after.getNwpTitel() == null)
                        || (bsb_after.getNwpTitel() != null && bsb_before.getNwpTitel() == null)) {
                    fieldMap.put("nwpTitel", new HashMap<>(diffMap));
                }

                hydrated++;
            }

            if ((bsb_before.getNwpGeburtsdatum() != null && bsb_after.getNwpGeburtsdatum() != null
                    && bsb_before.getNwpGeburtsdatum().compareTo(bsb_after.getNwpGeburtsdatum()) != 0)
                    || (bsb_before.getNwpGeburtsdatum() != null) || (bsb_after.getNwpGeburtsdatum() != null)) {

                diffMap.clear();

                if (bsb_before.getNwpGeburtsdatum() != null) {

                    if (bsb_after.getNwpGeburtsdatum() == null
                            || ((bsb_before.getNwpGeburtsdatum()).compareTo(bsb_after.getNwpGeburtsdatum()) != 0)) {
                        diffMap.put("before", bsb_before.getNwpGeburtsdatum());
                    }
                } else {

                    if (bsb_after.getNwpGeburtsdatum() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpGeburtsdatum() != null) {

                    if (bsb_before.getNwpGeburtsdatum() == null
                            || ((bsb_before.getNwpGeburtsdatum()).compareTo(bsb_after.getNwpGeburtsdatum()) != 0)) {
                        diffMap.put("after", bsb_after.getNwpGeburtsdatum());
                    }
                } else {

                    if (bsb_before.getNwpGeburtsdatum() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpGeburtsdatum() != null && bsb_after.getNwpGeburtsdatum() != null
                        && ((bsb_before.getNwpGeburtsdatum()).compareTo(bsb_after.getNwpGeburtsdatum()) != 0)
                        || (bsb_before.getNwpGeburtsdatum() != null && bsb_after.getNwpGeburtsdatum() == null)
                        || (bsb_after.getNwpGeburtsdatum() != null && bsb_before.getNwpGeburtsdatum() == null)) {
                    fieldMap.put("nwpGeburtsdatum", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpGeburtsname() != null && bsb_after.getNwpGeburtsname() != null
                    && !(rtrim(bsb_before.getNwpGeburtsname()).equals(rtrim(bsb_after.getNwpGeburtsname()))))
                    || (bsb_before.getNwpGeburtsname() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpGeburtsname().trim()))
                    || (bsb_after.getNwpGeburtsname() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpGeburtsname().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpGeburtsname() != null) {

                    if (bsb_after.getNwpGeburtsname() != null
                            && !rtrim(bsb_before.getNwpGeburtsname()).equals(rtrim((bsb_after.getNwpGeburtsname())))
                            || bsb_after.getNwpGeburtsname() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpGeburtsname()));
                    }
                } else {

                    if (bsb_after.getNwpGeburtsname() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpGeburtsname() != null) {

                    if (bsb_before.getNwpGeburtsname() != null
                            && !rtrim(bsb_before.getNwpGeburtsname()).equals(rtrim((bsb_after.getNwpGeburtsname())))
                            || bsb_before.getNwpGeburtsname() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpGeburtsname()));
                    }
                } else {
                    if (bsb_before.getNwpGeburtsname() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpGeburtsname() != null && bsb_after.getNwpGeburtsname() != null
                        && !rtrim(bsb_before.getNwpGeburtsname()).equals(rtrim((bsb_after.getNwpGeburtsname())))
                        || (bsb_before.getNwpGeburtsname() != null && bsb_after.getNwpGeburtsname() == null)
                        || (bsb_after.getNwpGeburtsname() != null && bsb_before.getNwpGeburtsname() == null)) {
                    fieldMap.put("nwpGeburtsname", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpGebNameVors() != null && bsb_after.getNwpGebNameVors() != null
                    && !(rtrim(bsb_before.getNwpGebNameVors()).equals(rtrim(bsb_after.getNwpGebNameVors()))))
                    || (bsb_before.getNwpGebNameVors() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpGebNameVors().trim()))
                    || (bsb_after.getNwpGebNameVors() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpGebNameVors().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpGebNameVors() != null) {

                    if (bsb_after.getNwpGebNameVors() != null
                            && !rtrim(bsb_before.getNwpGebNameVors()).equals(rtrim((bsb_after.getNwpGebNameVors())))
                            || bsb_after.getNwpGebNameVors() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpGebNameVors()));
                    }
                } else {

                    if (bsb_after.getNwpGebNameVors() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpGebNameVors() != null) {

                    if (bsb_before.getNwpGebNameVors() != null
                            && !rtrim(bsb_before.getNwpGebNameVors()).equals(rtrim((bsb_after.getNwpGebNameVors())))
                            || bsb_before.getNwpGebNameVors() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpGebNameVors()));
                    }
                } else {

                    if (bsb_before.getNwpGebNameVors() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpGebNameVors() != null && bsb_after.getNwpGebNameVors() != null
                        && !rtrim(bsb_before.getNwpGebNameVors()).equals(rtrim((bsb_after.getNwpGebNameVors())))
                        || (bsb_before.getNwpGebNameVors() != null && bsb_after.getNwpGebNameVors() == null)
                        || (bsb_after.getNwpGebNameVors() != null && bsb_before.getNwpGebNameVors() == null)) {
                    fieldMap.put("nwpGebNameVors", new HashMap<>(diffMap));
                }

                hydrated++;
            }

            if ((bsb_before.getNwpGebNameZus() != null && bsb_after.getNwpGebNameZus() != null
                    && !(rtrim(bsb_before.getNwpGebNameZus()).equals(rtrim(bsb_after.getNwpGebNameZus()))))
                    || (bsb_before.getNwpGebNameZus() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpGebNameZus().trim()))
                    || (bsb_after.getNwpGebNameZus() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpGebNameZus().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpGebNameZus() != null) {

                    if (bsb_after.getNwpGebNameZus() != null
                            && !rtrim(bsb_before.getNwpGebNameZus()).equals(rtrim((bsb_after.getNwpGebNameZus())))
                            || bsb_after.getNwpGebNameZus() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpGebNameZus()));
                    }
                } else {

                    if (bsb_after.getNwpGebNameZus() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpGebNameZus() != null) {

                    if (bsb_before.getNwpGebNameZus() != null
                            && !rtrim(bsb_before.getNwpGebNameZus()).equals(rtrim((bsb_after.getNwpGebNameZus())))
                            || bsb_before.getNwpGebNameZus() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpGebNameZus()));
                    }
                } else {
                    if (bsb_before.getNwpGebNameZus() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpGebNameZus() != null && bsb_after.getNwpGebNameZus() != null
                        && !rtrim(bsb_before.getNwpGebNameZus()).equals(rtrim((bsb_after.getNwpGebNameZus())))
                        || (bsb_before.getNwpGebNameZus() != null && bsb_after.getNwpGebNameZus() == null)
                        || (bsb_after.getNwpGebNameZus() != null && bsb_before.getNwpGebNameZus() == null)) {
                    fieldMap.put("nwpGebNameZus", new HashMap<>(diffMap));
                }

                hydrated++;
            }

            if ((bsb_before.getNwpGeburtsort() != null && bsb_after.getNwpGeburtsort() != null
                    && !(rtrim(bsb_before.getNwpGeburtsort()).equals(rtrim(bsb_after.getNwpGeburtsort()))))
                    || (bsb_before.getNwpGeburtsort() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpGeburtsort().trim()))
                    || (bsb_after.getNwpGeburtsort() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpGeburtsort().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpGeburtsort() != null) {

                    if (bsb_after.getNwpGeburtsort() != null
                            && !rtrim(bsb_before.getNwpGeburtsort()).equals(rtrim((bsb_after.getNwpGeburtsort())))
                            || bsb_after.getNwpGeburtsort() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpGeburtsort()));
                    }
                } else {

                    if (bsb_after.getNwpGeburtsort() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpGeburtsort() != null) {

                    if (bsb_before.getNwpGeburtsort() != null
                            && !rtrim(bsb_before.getNwpGeburtsort()).equals(rtrim((bsb_after.getNwpGeburtsort())))
                            || bsb_before.getNwpGeburtsort() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpGeburtsort()));
                    }
                } else {
                    if (bsb_before.getNwpGeburtsort() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpGeburtsort() != null && bsb_after.getNwpGeburtsort() != null
                        && !rtrim(bsb_before.getNwpGeburtsort()).equals(rtrim((bsb_after.getNwpGeburtsort())))
                        || (bsb_before.getNwpGeburtsort() != null && bsb_after.getNwpGeburtsort() == null)
                        || (bsb_after.getNwpGeburtsort() != null && bsb_before.getNwpGeburtsort() == null)) {
                    fieldMap.put("nwpGeburtsort", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpGebLandSchl() != null && bsb_after.getNwpGebLandSchl() != null
                    && !(rtrim(bsb_before.getNwpGebLandSchl()).equals(rtrim(bsb_after.getNwpGebLandSchl()))))
                    || (bsb_before.getNwpGebLandSchl() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpGebLandSchl().trim()))
                    || (bsb_after.getNwpGebLandSchl() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpGebLandSchl().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpGebLandSchl() != null) {

                    if (bsb_after.getNwpGebLandSchl() != null
                            && !rtrim(bsb_before.getNwpGebLandSchl()).equals(rtrim((bsb_after.getNwpGebLandSchl())))
                            || bsb_after.getNwpGebLandSchl() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpGebLandSchl()));
                    }
                } else {

                    if (bsb_after.getNwpGebLandSchl() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpGebLandSchl() != null) {

                    if (bsb_before.getNwpGebLandSchl() != null
                            && !rtrim(bsb_before.getNwpGebLandSchl()).equals(rtrim((bsb_after.getNwpGebLandSchl())))
                            || bsb_before.getNwpGebLandSchl() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpGebLandSchl()));
                    }
                } else {
                    if (bsb_before.getNwpGebLandSchl() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpGebLandSchl() != null && bsb_after.getNwpGebLandSchl() != null
                        && !rtrim(bsb_before.getNwpGebLandSchl()).equals(rtrim((bsb_after.getNwpGebLandSchl())))
                        || (bsb_before.getNwpGebLandSchl() != null && bsb_after.getNwpGebLandSchl() == null)
                        || (bsb_after.getNwpGebLandSchl() != null && bsb_before.getNwpGebLandSchl() == null)) {
                    fieldMap.put("nwpGebLandSchl", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpGeburtsland() != null && bsb_after.getNwpGeburtsland() != null
                    && !(rtrim(bsb_before.getNwpGeburtsland()).equals(rtrim(bsb_after.getNwpGeburtsland()))))
                    || (bsb_before.getNwpGeburtsland() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpGeburtsland().trim()))
                    || (bsb_after.getNwpGeburtsland() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpGeburtsland().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpGeburtsland() != null) {

                    if (bsb_after.getNwpGeburtsland() != null
                            && !rtrim(bsb_before.getNwpGeburtsland()).equals(rtrim((bsb_after.getNwpGeburtsland())))
                            || bsb_after.getNwpGeburtsland() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpGeburtsland()));
                    }
                } else {

                    if (bsb_after.getNwpGeburtsland() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpGeburtsland() != null) {

                    if (bsb_before.getNwpGeburtsland() != null
                            && !rtrim(bsb_before.getNwpGeburtsland()).equals(rtrim((bsb_after.getNwpGeburtsland())))
                            || bsb_before.getNwpGeburtsland() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpGeburtsland()));
                    }
                } else {
                    if (bsb_before.getNwpGeburtsland() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpGeburtsland() != null && bsb_after.getNwpGeburtsland() != null
                        && !rtrim(bsb_before.getNwpGeburtsland()).equals(rtrim((bsb_after.getNwpGeburtsland())))
                        || (bsb_before.getNwpGeburtsland() != null && bsb_after.getNwpGeburtsland() == null)
                        || (bsb_after.getNwpGeburtsland() != null && bsb_before.getNwpGeburtsland() == null)) {
                    fieldMap.put("nwpGeburtsland", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpAuswandDatum() != null && bsb_after.getNwpAuswandDatum() != null
                    && (bsb_before.getNwpAuswandDatum().compareTo(bsb_after.getNwpAuswandDatum()) != 0))
                    || (bsb_before.getNwpAuswandDatum() != null) || (bsb_after.getNwpAuswandDatum() != null)) {

                diffMap.clear();

                if (bsb_before.getNwpAuswandDatum() != null) {

                    if (bsb_after.getNwpAuswandDatum() != null
                            && ((bsb_before.getNwpAuswandDatum()).compareTo(bsb_after.getNwpAuswandDatum()) != 0)
                            || bsb_after.getNwpAuswandDatum() == null) {
                        diffMap.put("before", bsb_before.getNwpAuswandDatum());
                    }
                } else {

                    if (bsb_after.getNwpAuswandDatum() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpAuswandDatum() != null) {

                    if (bsb_before.getNwpAuswandDatum() != null
                            && ((bsb_before.getNwpAuswandDatum()).compareTo(bsb_after.getNwpAuswandDatum()) != 0)
                            || bsb_before.getNwpAuswandDatum() == null) {
                        diffMap.put("after", bsb_after.getNwpAuswandDatum());
                    }
                } else {

                    if (bsb_before.getNwpAuswandDatum() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpAuswandDatum() != null && bsb_after.getNwpAuswandDatum() != null
                        && ((bsb_before.getNwpAuswandDatum()).compareTo(bsb_after.getNwpAuswandDatum()) != 0)
                        || (bsb_before.getNwpAuswandDatum() != null && bsb_after.getNwpAuswandDatum() == null)
                        || (bsb_after.getNwpAuswandDatum() != null && bsb_before.getNwpAuswandDatum() == null)) {
                    fieldMap.put("nwpAuswandDatum", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpSterbeDatum() != null && bsb_after.getNwpSterbeDatum() != null
                    && (bsb_before.getNwpSterbeDatum().compareTo(bsb_after.getNwpSterbeDatum()) != 0))
                    || (bsb_before.getNwpSterbeDatum() != null) || (bsb_after.getNwpSterbeDatum() != null)) {

                diffMap.clear();

                if (bsb_before.getNwpSterbeDatum() != null) {

                    if (bsb_after.getNwpSterbeDatum() != null
                            && ((bsb_before.getNwpSterbeDatum()).compareTo(bsb_after.getNwpSterbeDatum()) != 0)
                            || bsb_after.getNwpSterbeDatum() == null) {
                        diffMap.put("before", bsb_before.getNwpSterbeDatum());
                    }
                } else {

                    if (bsb_after.getNwpSterbeDatum() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpSterbeDatum() != null) {

                    if (bsb_before.getNwpSterbeDatum() != null
                            && ((bsb_before.getNwpSterbeDatum()).compareTo(bsb_after.getNwpSterbeDatum()) != 0)
                            || bsb_before.getNwpSterbeDatum() == null) {
                        diffMap.put("after", bsb_after.getNwpSterbeDatum());
                    }
                } else {
                    if (bsb_before.getNwpSterbeDatum() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpSterbeDatum() != null && bsb_after.getNwpSterbeDatum() != null
                        && ((bsb_before.getNwpSterbeDatum()).compareTo(bsb_after.getNwpSterbeDatum()) != 0)
                        || (bsb_before.getNwpSterbeDatum() != null && bsb_after.getNwpSterbeDatum() == null)
                        || (bsb_after.getNwpSterbeDatum() != null && bsb_before.getNwpSterbeDatum() == null)) {
                    fieldMap.put("nwpSterbeDatum", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpTyp() != null && bsb_after.getNwpTyp() != null
                    && !(rtrim(bsb_before.getNwpTyp()).equals(rtrim(bsb_after.getNwpTyp()))))
                    || (bsb_before.getNwpGeburtsland() != null && StringUtils.isNotBlank(bsb_before.getNwpTyp().trim()))
                    || (bsb_after.getNwpTyp() != null && StringUtils.isNotBlank(bsb_after.getNwpTyp().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpTyp() != null) {

                    if (bsb_after.getNwpTyp() != null
                            && !rtrim(bsb_before.getNwpTyp()).equals(rtrim((bsb_after.getNwpTyp())))
                            || bsb_after.getNwpTyp() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpTyp()));
                    }
                } else {

                    if (bsb_after.getNwpTyp() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpTyp() != null) {

                    if (bsb_before.getNwpTyp() != null
                            && !rtrim(bsb_before.getNwpTyp()).equals(rtrim((bsb_after.getNwpTyp())))
                            || bsb_before.getNwpTyp() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpTyp()));
                    }
                } else {

                    if (bsb_before.getNwpTyp() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpTyp() != null && bsb_after.getNwpTyp() != null
                        && !rtrim(bsb_before.getNwpTyp()).equals(rtrim((bsb_after.getNwpTyp())))
                        || (bsb_before.getNwpTyp() != null && bsb_after.getNwpTyp() == null)
                        || (bsb_after.getNwpTyp() != null && bsb_before.getNwpTyp() == null)) {
                    fieldMap.put("nwpTyp", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getNwpPersoninfo() != null && bsb_after.getNwpPersoninfo() != null
                    && !(rtrim(bsb_before.getNwpPersoninfo()).equals(rtrim(bsb_after.getNwpPersoninfo()))))
                    || (bsb_before.getNwpPersoninfo() != null
                            && StringUtils.isNotBlank(bsb_before.getNwpPersoninfo().trim()))
                    || (bsb_after.getNwpPersoninfo() != null
                            && StringUtils.isNotBlank(bsb_after.getNwpPersoninfo().trim()))) {

                diffMap.clear();

                if (bsb_before.getNwpPersoninfo() != null) {

                    if (bsb_after.getNwpPersoninfo() != null
                            && !rtrim(bsb_before.getNwpPersoninfo()).equals(rtrim((bsb_after.getNwpPersoninfo())))
                            || bsb_after.getNwpPersoninfo() == null) {
                        diffMap.put("before", rtrim(bsb_before.getNwpPersoninfo()));
                    }
                } else {

                    if (bsb_after.getNwpPersoninfo() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getNwpPersoninfo() != null) {

                    if (bsb_before.getNwpPersoninfo() != null
                            && !rtrim(bsb_before.getNwpPersoninfo()).equals(rtrim((bsb_after.getNwpPersoninfo())))
                            || bsb_before.getNwpPersoninfo() == null) {
                        diffMap.put("after", rtrim(bsb_after.getNwpPersoninfo()));
                    }
                } else {
                    if (bsb_before.getNwpPersoninfo() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getNwpPersoninfo() != null && bsb_after.getNwpPersoninfo() != null
                        && !rtrim(bsb_before.getNwpPersoninfo()).equals(rtrim((bsb_after.getNwpPersoninfo())))
                        || (bsb_before.getNwpPersoninfo() != null && bsb_after.getNwpPersoninfo() == null)
                        || (bsb_after.getNwpPersoninfo() != null && bsb_before.getNwpPersoninfo() == null)) {
                    fieldMap.put("nwpPersonInfo", new HashMap<>(diffMap));
                }
                hydrated++;
            }
        }

        if (sectionMap.containsKey("WeiterePerson")) {
            sectionMap.get("WeiterePerson").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("WeiterePerson", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed WeiterePerson");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffWeiterePersonAdresse(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getWpStrasse() != null) {

                diffMap.put("after", rtrim(bsb_after.getWpStrasse()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpStrasse", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWpHausnummer() != null) {

                diffMap.put("after", bsb_after.getWpHausnummer());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpHausnummer", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWpHausnummerZus() != null) {

                diffMap.put("after", rtrim(bsb_after.getWpHausnummerZus()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpHausnummerZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWpAdressergaenz() != null) {

                diffMap.put("after", rtrim(bsb_after.getWpAdressergaenz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpAdressergaenz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWpOrt() != null) {

                diffMap.put("after", rtrim(bsb_after.getWpOrt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWpPlz() != null) {

                diffMap.put("after", bsb_after.getWpPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWpAuslandsPlz() != null) {

                diffMap.put("after", rtrim(bsb_after.getWpAuslandsPlz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpAuslandsPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWpStaatSchl() != null) {

                diffMap.put("after", rtrim(bsb_after.getWpStaatSchl()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpStaatSchl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWpLandWP() != null) {

                diffMap.put("after", rtrim(bsb_after.getWpLandWP()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("wpLandWP", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getWpStrasse() != null) {

                diffMap.put("before", rtrim(bsb_before.getWpStrasse()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpStrasse", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWpHausnummer() != null) {

                diffMap.put("before", bsb_before.getWpHausnummer());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpHausnummer", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWpHausnummerZus() != null) {

                diffMap.put("before", rtrim(bsb_before.getWpHausnummerZus()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpHausnummerZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWpAdressergaenz() != null) {

                diffMap.put("before", rtrim(bsb_before.getWpAdressergaenz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpAdressergaenz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWpOrt() != null) {

                diffMap.put("before", rtrim(bsb_before.getWpOrt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWpPlz() != null) {

                diffMap.put("before", bsb_before.getWpPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWpAuslandsPlz() != null) {

                diffMap.put("before", rtrim(bsb_before.getWpAuslandsPlz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpAuslandsPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWpStaatSchl() != null) {

                diffMap.put("before", rtrim(bsb_before.getWpStaatSchl()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpStaatSchl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWpLandWP() != null) {

                diffMap.put("before", rtrim(bsb_before.getWpLandWP()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("wpLandWP", new HashMap<>(diffMap));
        } else {

            if ((bsb_before.getWpStrasse() != null && bsb_after.getWpStrasse() != null
                    && !(rtrim(bsb_before.getWpStrasse()).equals(rtrim(bsb_after.getWpStrasse()))))
                    || (bsb_before.getWpStrasse() != null && StringUtils.isNotBlank(bsb_before.getWpStrasse().trim()))
                    || (bsb_after.getWpStrasse() != null && StringUtils.isNotBlank(bsb_after.getWpStrasse().trim()))) {

                diffMap.clear();

                if (bsb_before.getWpStrasse() != null) {

                    if (bsb_after.getWpStrasse() != null
                            && !rtrim(bsb_before.getWpStrasse()).equals(rtrim((bsb_after.getWpStrasse())))
                            || bsb_after.getWpStrasse() == null) {
                        diffMap.put("before", rtrim(bsb_before.getWpStrasse()));
                    }
                } else {

                    if (bsb_after.getWpStrasse() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getWpStrasse() != null) {

                    if (bsb_before.getWpStrasse() != null
                            && !rtrim(bsb_before.getWpStrasse()).equals(rtrim((bsb_after.getWpStrasse())))
                            || bsb_before.getWpStrasse() == null) {
                        diffMap.put("after", rtrim(bsb_after.getWpStrasse()));
                    }
                } else {
                    if (bsb_before.getWpStrasse() != null) {
                        diffMap.put("after", null);
                    }
                }
                if (bsb_before.getWpStrasse() != null && bsb_after.getWpStrasse() != null
                        && !rtrim(bsb_before.getWpStrasse()).equals(rtrim((bsb_after.getWpStrasse())))
                        || (bsb_before.getWpStrasse() != null && bsb_after.getWpStrasse() == null)
                        || (bsb_after.getWpStrasse() != null && bsb_before.getWpStrasse() == null)) {
                    fieldMap.put("wpStrasse", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getWpHausnummer() != null && bsb_after.getWpHausnummer() != null
                    && (bsb_before.getWpHausnummer().compareTo(bsb_after.getWpHausnummer()) != 0))
                    || (bsb_before.getWpHausnummer() != null) || (bsb_after.getWpHausnummer() != null)) {

                diffMap.clear();

                if (bsb_before.getWpHausnummer() != null) {

                    if (bsb_after.getWpHausnummer() != null
                            && ((bsb_before.getWpHausnummer()).compareTo(bsb_after.getWpHausnummer()) != 0)
                            || bsb_after.getWpHausnummer() == null) {
                        diffMap.put("before", bsb_before.getWpHausnummer());
                    }
                } else {

                    if (bsb_after.getWpHausnummer() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getWpHausnummer() != null) {

                    if (bsb_before.getWpHausnummer() != null
                            && ((bsb_before.getWpHausnummer()).compareTo(bsb_after.getWpHausnummer()) != 0)
                            || bsb_before.getWpHausnummer() == null) {
                        diffMap.put("after", bsb_after.getWpHausnummer());
                    }
                } else {
                    if (bsb_before.getWpHausnummer() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getWpHausnummer() != null && bsb_after.getWpHausnummer() != null
                        && ((bsb_before.getWpHausnummer()).compareTo(bsb_after.getWpHausnummer()) != 0)
                        || (bsb_before.getWpHausnummer() != null && bsb_after.getWpHausnummer() == null)
                        || (bsb_after.getWpHausnummer() != null && bsb_before.getWpHausnummer() == null)) {
                    fieldMap.put("wpHausnummer", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getWpHausnummerZus() != null && bsb_after.getWpHausnummerZus() != null
                    && !(rtrim(bsb_before.getWpHausnummerZus()).equals(rtrim(bsb_after.getWpHausnummerZus()))))
                    || (bsb_before.getWpHausnummerZus() != null
                            && StringUtils.isNotBlank(bsb_before.getWpHausnummerZus().trim()))
                    || (bsb_after.getWpHausnummerZus() != null
                            && StringUtils.isNotBlank(bsb_after.getWpHausnummerZus().trim()))) {

                diffMap.clear();

                if (bsb_before.getWpHausnummerZus() != null) {

                    if (bsb_after.getWpHausnummerZus() != null
                            && !rtrim(bsb_before.getWpHausnummerZus()).equals(rtrim((bsb_after.getWpHausnummerZus())))
                            || bsb_after.getWpHausnummerZus() == null) {
                        diffMap.put("before", rtrim(bsb_before.getWpHausnummerZus()));
                    }
                } else {

                    if (bsb_after.getWpHausnummerZus() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getWpHausnummerZus() != null) {

                    if (bsb_before.getWpHausnummerZus() != null
                            && !rtrim(bsb_before.getWpHausnummerZus()).equals(rtrim((bsb_after.getWpHausnummerZus())))
                            || bsb_before.getWpHausnummerZus() == null) {
                        diffMap.put("after", rtrim(bsb_after.getWpHausnummerZus()));
                    }
                } else {
                    if (bsb_before.getWpHausnummerZus() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getWpHausnummerZus() != null && bsb_after.getWpHausnummerZus() != null
                        && !rtrim(bsb_before.getWpHausnummerZus()).equals(rtrim((bsb_after.getWpHausnummerZus())))
                        || (bsb_before.getWpHausnummerZus() != null && bsb_after.getWpHausnummerZus() == null)
                        || (bsb_after.getWpHausnummerZus() != null && bsb_before.getWpHausnummerZus() == null)) {
                    fieldMap.put("wpHausnummerZus", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getWpAdressergaenz() != null && bsb_after.getWpAdressergaenz() != null
                    && !(rtrim(bsb_before.getWpAdressergaenz()).equals(rtrim(bsb_after.getWpAdressergaenz()))))
                    || (bsb_before.getWpAdressergaenz() != null
                            && StringUtils.isNotBlank(bsb_before.getWpAdressergaenz().trim()))
                    || (bsb_after.getWpAdressergaenz() != null
                            && StringUtils.isNotBlank(bsb_after.getWpAdressergaenz().trim()))) {

                diffMap.clear();

                if (bsb_before.getWpAdressergaenz() != null) {

                    if (bsb_after.getWpAdressergaenz() != null
                            && !rtrim(bsb_before.getWpAdressergaenz()).equals(rtrim((bsb_after.getWpAdressergaenz())))
                            || bsb_after.getWpAdressergaenz() == null) {
                        diffMap.put("before", rtrim(bsb_before.getWpAdressergaenz()));
                    }
                } else {

                    if (bsb_after.getWpAdressergaenz() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getWpAdressergaenz() != null) {

                    if (bsb_before.getWpAdressergaenz() != null
                            && !rtrim(bsb_before.getWpAdressergaenz()).equals(rtrim((bsb_after.getWpAdressergaenz())))
                            || bsb_before.getWpAdressergaenz() == null) {
                        diffMap.put("after", rtrim(bsb_after.getWpAdressergaenz()));
                    }
                } else {
                    if (bsb_before.getWpAdressergaenz() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getWpAdressergaenz() != null && bsb_after.getWpAdressergaenz() != null
                        && !rtrim(bsb_before.getWpAdressergaenz()).equals(rtrim((bsb_after.getWpAdressergaenz())))
                        || (bsb_before.getWpAdressergaenz() != null && bsb_after.getWpAdressergaenz() == null)
                        || (bsb_after.getWpAdressergaenz() != null && bsb_before.getWpAdressergaenz() == null)) {
                    fieldMap.put("wpAdressergaenz", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getWpOrt() != null && bsb_after.getWpOrt() != null
                    && !(rtrim(bsb_before.getWpOrt()).equals(rtrim(bsb_after.getWpOrt()))))
                    || (bsb_before.getWpOrt() != null && StringUtils.isNotBlank(bsb_before.getWpOrt().trim()))
                    || (bsb_after.getWpOrt() != null && StringUtils.isNotBlank(bsb_after.getWpOrt().trim()))) {

                diffMap.clear();

                if (bsb_before.getWpOrt() != null) {

                    if (bsb_after.getWpOrt() != null
                            && !rtrim(bsb_before.getWpOrt()).equals(rtrim((bsb_after.getWpOrt())))
                            || bsb_after.getWpOrt() == null) {
                        diffMap.put("before", rtrim(bsb_before.getWpOrt()));
                    }
                } else {

                    if (bsb_after.getWpOrt() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getWpOrt() != null) {

                    if (bsb_before.getWpOrt() != null
                            && !rtrim(bsb_before.getWpOrt()).equals(rtrim((bsb_after.getWpOrt())))
                            || bsb_before.getWpOrt() == null) {
                        diffMap.put("after", rtrim(bsb_after.getWpOrt()));
                    }
                } else {
                    if (bsb_before.getWpOrt() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getWpOrt() != null && bsb_after.getWpOrt() != null
                        && !rtrim(bsb_before.getWpOrt()).equals(rtrim((bsb_after.getWpOrt())))
                        || (bsb_before.getWpOrt() != null && bsb_after.getWpOrt() == null)
                        || (bsb_after.getWpOrt() != null && bsb_before.getWpOrt() == null)) {
                    fieldMap.put("wpOrt", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getWpPlz() != null && bsb_after.getWpPlz() != null
                    && (bsb_before.getWpPlz().compareTo(bsb_after.getWpPlz()) != 0)) || (bsb_before.getWpPlz() != null)
                    || (bsb_after.getWpPlz() != null)) {

                diffMap.clear();

                if (bsb_before.getWpPlz() != null) {

                    if (bsb_after.getWpPlz() != null && ((bsb_before.getWpPlz()).compareTo(bsb_after.getWpPlz()) != 0)
                            || bsb_after.getWpPlz() == null) {
                        diffMap.put("before", bsb_before.getWpPlz());
                    }
                } else {

                    if (bsb_after.getWpPlz() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getWpPlz() != null) {

                    if (bsb_before.getWpPlz() != null && ((bsb_before.getWpPlz()).compareTo(bsb_after.getWpPlz()) != 0)
                            || bsb_before.getWpPlz() == null) {
                        diffMap.put("after", bsb_after.getWpPlz());
                    }
                } else {
                    if (bsb_before.getWpPlz() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getWpPlz() != null && bsb_after.getWpPlz() != null
                        && ((bsb_before.getWpPlz()).compareTo(bsb_after.getWpPlz()) != 0)
                        || (bsb_before.getWpPlz() != null && bsb_after.getWpPlz() == null)
                        || (bsb_after.getWpPlz() != null && bsb_before.getWpPlz() == null)) {
                    fieldMap.put("wpPlz", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getWpAuslandsPlz() != null && bsb_after.getWpAuslandsPlz() != null
                    && !(rtrim(bsb_before.getWpAuslandsPlz()).equals(rtrim(bsb_after.getWpAuslandsPlz()))))
                    || (bsb_before.getWpAuslandsPlz() != null
                            && StringUtils.isNotBlank(bsb_before.getWpAuslandsPlz().trim()))
                    || (bsb_after.getWpAuslandsPlz() != null
                            && StringUtils.isNotBlank(bsb_after.getWpAuslandsPlz().trim()))) {

                diffMap.clear();

                if (bsb_before.getWpAuslandsPlz() != null) {

                    if (bsb_after.getWpAuslandsPlz() != null
                            && !rtrim(bsb_before.getWpAuslandsPlz()).equals(rtrim((bsb_after.getWpAuslandsPlz())))
                            || bsb_after.getWpAuslandsPlz() == null) {
                        diffMap.put("before", rtrim(bsb_before.getWpAuslandsPlz()));
                    }
                } else {

                    if (bsb_after.getWpAuslandsPlz() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getWpAuslandsPlz() != null) {

                    if (bsb_before.getWpAuslandsPlz() != null
                            && !rtrim(bsb_before.getWpAuslandsPlz()).equals(rtrim((bsb_after.getWpAuslandsPlz())))
                            || bsb_before.getWpAuslandsPlz() == null) {
                        diffMap.put("after", rtrim(bsb_after.getWpAuslandsPlz()));
                    }
                } else {

                    if (bsb_before.getWpAuslandsPlz() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getWpAuslandsPlz() != null && bsb_after.getWpAuslandsPlz() != null
                        && !rtrim(bsb_before.getWpAuslandsPlz()).equals(rtrim((bsb_after.getWpAuslandsPlz())))
                        || (bsb_before.getWpAuslandsPlz() != null && bsb_after.getWpAuslandsPlz() == null)
                        || (bsb_after.getWpAuslandsPlz() != null && bsb_before.getWpAuslandsPlz() == null)) {
                    fieldMap.put("wpAuslandsPlz", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getWpStaatSchl() != null && bsb_after.getWpStaatSchl() != null
                    && !(rtrim(bsb_before.getWpStaatSchl()).equals(rtrim(bsb_after.getWpStaatSchl()))))
                    || (bsb_before.getWpStaatSchl() != null
                            && StringUtils.isNotBlank(bsb_before.getWpStaatSchl().trim()))
                    || (bsb_after.getWpStaatSchl() != null
                            && StringUtils.isNotBlank(bsb_after.getWpStaatSchl().trim()))) {

                diffMap.clear();

                if (bsb_before.getWpStaatSchl() != null) {

                    if (bsb_after.getWpStaatSchl() != null
                            && !rtrim(bsb_before.getWpStaatSchl()).equals(rtrim((bsb_after.getWpStaatSchl())))
                            || bsb_after.getWpStaatSchl() == null) {
                        diffMap.put("before", rtrim(bsb_before.getWpStaatSchl()));
                    }
                } else {

                    if (bsb_after.getWpStaatSchl() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getWpStaatSchl() != null) {

                    if (bsb_before.getWpStaatSchl() != null
                            && !rtrim(bsb_before.getWpStaatSchl()).equals(rtrim((bsb_after.getWpStaatSchl())))
                            || bsb_before.getWpStaatSchl() == null) {
                        diffMap.put("after", rtrim(bsb_after.getWpStaatSchl()));
                    }
                } else {

                    if (bsb_before.getWpStaatSchl() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getWpStaatSchl() != null && bsb_after.getWpStaatSchl() != null
                        && !rtrim(bsb_before.getWpStaatSchl()).equals(rtrim((bsb_after.getWpStaatSchl())))
                        || (bsb_before.getWpStaatSchl() != null && bsb_after.getWpStaatSchl() == null)
                        || (bsb_after.getWpStaatSchl() != null && bsb_before.getWpStaatSchl() == null)) {
                    fieldMap.put("wpStaatSchl", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getWpLandWP() != null && bsb_after.getWpLandWP() != null
                    && !(rtrim(bsb_before.getWpLandWP()).equals(rtrim(bsb_after.getWpLandWP()))))
                    || (bsb_before.getWpLandWP() != null && StringUtils.isNotBlank(bsb_before.getWpLandWP().trim()))
                    || (bsb_after.getWpLandWP() != null && StringUtils.isNotBlank(bsb_after.getWpLandWP().trim()))) {

                diffMap.clear();

                if (bsb_before.getWpLandWP() != null) {

                    if (bsb_after.getWpLandWP() != null
                            && !rtrim(bsb_before.getWpLandWP()).equals(rtrim((bsb_after.getWpLandWP())))
                            || bsb_after.getWpLandWP() == null) {
                        diffMap.put("before", rtrim(bsb_before.getWpLandWP()));
                    }
                } else {

                    if (bsb_after.getWpLandWP() != null) {
                        diffMap.put("before", null);
                    }
                }

                if (bsb_after.getWpLandWP() != null) {

                    if (bsb_before.getWpLandWP() != null
                            && !rtrim(bsb_before.getWpLandWP()).equals(rtrim((bsb_after.getWpLandWP())))
                            || bsb_before.getWpLandWP() == null) {
                        diffMap.put("after", rtrim(bsb_after.getWpLandWP()));
                    }
                } else {
                    if (bsb_before.getWpLandWP() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getWpLandWP() != null && bsb_after.getWpLandWP() != null
                        && !rtrim(bsb_before.getWpLandWP()).equals(rtrim((bsb_after.getWpLandWP())))
                        || (bsb_before.getWpLandWP() != null && bsb_after.getWpLandWP() == null)
                        || (bsb_after.getWpLandWP() != null && bsb_before.getWpLandWP() == null)) {
                    fieldMap.put("wpLandWP", new HashMap<>(diffMap));
                }
                hydrated++;
            }
        }

        if (sectionMap.containsKey("WeiterePersonAdresse")) {
            sectionMap.get("WeiterePersonAdresse").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("WeiterePersonAdresse", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed WeiterePersonAdresse");
            changed = true;
        }

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Bsb Sections
    private BsbPairWithChangedFlag getDiffAuftragnehmer(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getAufnehmName() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmName()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmName", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmStr() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmStr()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmStr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmHsnr() != null) {

                diffMap.put("after", bsb_after.getAufnehmHsnr());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmHsnr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmHszu() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmHszu()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmHszu", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmAdrErg() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmAdrErg()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmAdrErg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmOrt() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmOrt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmPlz() != null) {

                diffMap.put("after", bsb_after.getAufnehmPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmAuslPlz() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmAuslPlz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmAuslPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmStaatSl() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmStaatSl()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmStaatSl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmLand() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmLand()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmLand", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmPfNr() != null) {

                diffMap.put("after", bsb_after.getAufnehmPfNr());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmPfNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmPfPlz() != null) {

                diffMap.put("after", bsb_after.getAufnehmPfPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmPfPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmPfOrt() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmPfOrt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmPfOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmGkPlz() != null) {

                diffMap.put("after", bsb_after.getAufnehmGkPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmGkPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmGkOrt() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmGkOrt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmGkOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmTel() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmTel()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmTel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmEmail() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmEmail()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmEmail", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmOrdnBegr() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmOrdnBegr()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmOrdnBegr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAufnehmBic() != null) {

                diffMap.put("after", rtrim(bsb_after.getAufnehmBic()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aufnehmBic", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getAufnehmName() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmName()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmName", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmStr() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmStr()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmStr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmHsnr() != null) {

                diffMap.put("before", bsb_before.getAufnehmHsnr());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmHsnr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmHszu() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmHszu()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmHszu", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmAdrErg() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmAdrErg()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmAdrErg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmOrt() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmOrt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmPlz() != null) {

                diffMap.put("before", bsb_before.getAufnehmPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmAuslPlz() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmAuslPlz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmAuslPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmStaatSl() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmStaatSl()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmStaatSl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmLand() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmLand()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmLand", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmPfNr() != null) {

                diffMap.put("before", bsb_before.getAufnehmPfNr());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmPfNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmPfPlz() != null) {

                diffMap.put("before", bsb_before.getAufnehmPfPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmPfPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmPfOrt() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmPfOrt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmPfOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmGkPlz() != null) {

                diffMap.put("before", bsb_before.getAufnehmGkPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmGkPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmGkOrt() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmGkOrt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmGkOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmTel() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmTel()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmTel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmEmail() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmEmail()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmEmail", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmOrdnBegr() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmOrdnBegr()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmOrdnBegr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAufnehmBic() != null) {

                diffMap.put("before", rtrim(bsb_before.getAufnehmBic()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aufnehmBic", new HashMap<>(diffMap));
        } else {

            if ((bsb_before.getAufnehmName() != null && bsb_after.getAufnehmName() != null
                    && !(rtrim(bsb_before.getAufnehmName()).equals(rtrim(bsb_after.getAufnehmName()))))
                    || (bsb_before.getAufnehmName() != null
                            && StringUtils.isNotBlank(bsb_before.getAufnehmName().trim()))
                    || (bsb_after.getAufnehmName() != null
                            && StringUtils.isNotBlank(bsb_after.getAufnehmName().trim()))) {

                diffMap.clear();

                if (bsb_before.getAufnehmName() != null) {

                    if (bsb_after.getAufnehmName() != null
                            && !rtrim(bsb_before.getAufnehmName()).equals(rtrim((bsb_after.getAufnehmName())))
                            || bsb_after.getAufnehmName() == null) {
                        diffMap.put("before", rtrim(bsb_before.getAufnehmName()));
                    }
                } else {

                    if (bsb_after.getAufnehmName() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getAufnehmName() != null) {

                    if (bsb_before.getAufnehmName() != null
                            && !rtrim(bsb_before.getAufnehmName()).equals(rtrim((bsb_after.getAufnehmName())))
                            || bsb_before.getAufnehmName() == null) {
                        diffMap.put("after", rtrim(bsb_after.getAufnehmName()));
                    }
                } else {
                    if (bsb_before.getAufnehmName() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getAufnehmName() != null && bsb_after.getAufnehmName() != null
                        && !rtrim(bsb_before.getAufnehmName()).equals(rtrim((bsb_after.getAufnehmName())))
                        || (bsb_before.getAufnehmName() != null && bsb_after.getAufnehmName() == null)
                        || (bsb_after.getAufnehmName() != null && bsb_before.getAufnehmName() == null)) {
                    fieldMap.put("AufnehmName", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getAufnehmStr() != null && bsb_after.getAufnehmStr() != null
                    && !(rtrim(bsb_before.getAufnehmStr()).equals(rtrim(bsb_after.getAufnehmStr()))))
                    || (bsb_before.getAufnehmStr() != null && StringUtils.isNotBlank(bsb_before.getAufnehmStr().trim()))
                    || (bsb_after.getAufnehmStr() != null
                            && StringUtils.isNotBlank(bsb_after.getAufnehmStr().trim()))) {

                diffMap.clear();

                if (bsb_before.getAufnehmStr() != null) {

                    if (bsb_after.getAufnehmStr() != null
                            && !rtrim(bsb_before.getAufnehmStr()).equals(rtrim((bsb_after.getAufnehmStr())))
                            || bsb_after.getAufnehmStr() == null) {
                        diffMap.put("before", rtrim(bsb_before.getAufnehmStr()));
                    }
                } else {

                    if (bsb_after.getAufnehmStr() != null) {
                        diffMap.put("before", null);
                    }
                }
                if (bsb_after.getAufnehmStr() != null) {

                    if (bsb_before.getAufnehmStr() != null
                            && !rtrim(bsb_before.getAufnehmStr()).equals(rtrim((bsb_after.getAufnehmStr())))
                            || bsb_before.getAufnehmStr() == null) {
                        diffMap.put("after", rtrim(bsb_after.getAufnehmStr()));
                    }
                } else {
                    if (bsb_before.getAufnehmStr() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getAufnehmStr() != null && bsb_after.getAufnehmStr() != null
                        && !rtrim(bsb_before.getAufnehmStr()).equals(rtrim((bsb_after.getAufnehmStr())))
                        || (bsb_before.getAufnehmStr() != null && bsb_after.getAufnehmStr() == null)
                        || (bsb_after.getAufnehmStr() != null && bsb_before.getAufnehmStr() == null)) {
                    fieldMap.put("aufnehmStr", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((bsb_before.getAufnehmHsnr() != null && bsb_after.getAufnehmHsnr() != null
                    && ((bsb_before.getAufnehmHsnr()).compareTo(bsb_after.getAufnehmHsnr()) != 0))
                    || (bsb_before.getAufnehmHsnr() != null) || (bsb_after.getAufnehmHsnr() != null)) {

                diffMap.clear();

                if (bsb_before.getAufnehmHsnr() != null) {

                    if (bsb_after.getAufnehmHsnr() != null
                            && ((bsb_before.getAufnehmHsnr()).compareTo(bsb_after.getAufnehmHsnr()) != 0)
                            || bsb_after.getAufnehmHsnr() == null) {
                        diffMap.put("before", bsb_before.getAufnehmHsnr());
                    }
                } else {
                    if (bsb_after.getAufnehmHsnr() != null) {
                        diffMap.put("before", null);
                    }
                }

                if (bsb_after.getAufnehmHsnr() != null) {

                    if (bsb_before.getAufnehmHsnr() != null
                            && ((bsb_before.getAufnehmHsnr()).compareTo(bsb_after.getAufnehmHsnr()) != 0)
                            || bsb_before.getAufnehmHsnr() == null) {
                        diffMap.put("after", bsb_after.getAufnehmHsnr());
                    }
                } else {

                    if (bsb_before.getAufnehmHsnr() != null) {
                        diffMap.put("after", null);
                    }
                }

                if (bsb_before.getAufnehmHsnr() != null && bsb_after.getAufnehmHsnr() != null
                        && ((bsb_before.getAufnehmHsnr()).compareTo(bsb_after.getAufnehmHsnr()) != 0)
                        || (bsb_before.getAufnehmHsnr() != null && bsb_after.getAufnehmHsnr() == null)
                        || (bsb_after.getAufnehmHsnr() != null && bsb_before.getAufnehmHsnr() == null)) {
                    fieldMap.put("aufnehmHsnr", new HashMap<>(diffMap));
                }
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmHszu() == null && bsb_after.getAufnehmHszu() == null)) && ((bsb_before
                    .getAufnehmHszu() == null && !rtrim(bsb_after.getAufnehmHszu()).equals(null))
                    || (bsb_after.getAufnehmHszu() == null && !(bsb_before.getAufnehmHszu()).equals(null))
                    || (bsb_before.getAufnehmHszu() != null && bsb_after.getAufnehmHszu() != null
                            && !(rtrim(bsb_before.getAufnehmHszu()).equals(rtrim(bsb_after.getAufnehmHszu())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmHszu() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmHszu()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmHszu() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmHszu()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmHszu", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmAdrErg() == null && bsb_after.getAufnehmAdrErg() == null)) && ((bsb_before
                    .getAufnehmAdrErg() == null && !rtrim(bsb_after.getAufnehmAdrErg()).equals(null))
                    || (bsb_after.getAufnehmAdrErg() == null && !(bsb_before.getAufnehmAdrErg()).equals(null))
                    || (bsb_before.getAufnehmAdrErg() != null && bsb_after.getAufnehmAdrErg() != null
                            && !(rtrim(bsb_before.getAufnehmAdrErg()).equals(rtrim(bsb_after.getAufnehmAdrErg())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmAdrErg() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmAdrErg()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmAdrErg() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmAdrErg()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmAdrErg", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmOrt() == null && bsb_after.getAufnehmOrt() == null)) && ((bsb_before
                    .getAufnehmOrt() == null && !rtrim(bsb_after.getAufnehmOrt()).equals(null))
                    || (bsb_after.getAufnehmOrt() == null && !(bsb_before.getAufnehmOrt()).equals(null))
                    || (bsb_before.getAufnehmOrt() != null && bsb_after.getAufnehmOrt() != null
                            && !(rtrim(bsb_before.getAufnehmOrt()).equals(rtrim(bsb_after.getAufnehmOrt())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmOrt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmOrt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmOrt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmOrt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmOrt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getAufnehmPlz() != null || bsb_after.getAufnehmPlz() != null)
                    && ((bsb_before.getAufnehmPlz() == null && bsb_after.getAufnehmPlz() != null)
                            || (bsb_after.getAufnehmPlz() == null && bsb_before.getAufnehmPlz() != null)
                            || (bsb_before.getAufnehmPlz() != null && bsb_after.getAufnehmPlz() != null
                                    && bsb_before.getAufnehmPlz().compareTo(bsb_after.getAufnehmPlz()) != 0))) {

                diffMap.clear();

                if (bsb_before.getAufnehmPlz() != null) {

                    diffMap.put("before", bsb_before.getAufnehmPlz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getAufnehmPlz());
                fieldMap.put("aufnehmPlz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmAuslPlz() == null && bsb_after.getAufnehmAuslPlz() == null))
                    && ((bsb_before.getAufnehmAuslPlz() == null && !rtrim(bsb_after.getAufnehmAuslPlz()).equals(null))
                            || (bsb_after.getAufnehmAuslPlz() == null && !(bsb_before.getAufnehmAuslPlz()).equals(null))
                            || (bsb_before.getAufnehmAuslPlz() != null && bsb_after.getAufnehmAuslPlz() != null
                                    && !(rtrim(bsb_before.getAufnehmAuslPlz())
                                            .equals(rtrim(bsb_after.getAufnehmAuslPlz())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmAuslPlz() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmAuslPlz()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmAuslPlz() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmAuslPlz()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmAuslPlz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmStaatSl() == null && bsb_after.getAufnehmStaatSl() == null))
                    && ((bsb_before.getAufnehmStaatSl() == null && !rtrim(bsb_after.getAufnehmStaatSl()).equals(null))
                            || (bsb_after.getAufnehmStaatSl() == null && !(bsb_before.getAufnehmStaatSl()).equals(null))
                            || (bsb_before.getAufnehmStaatSl() != null && bsb_after.getAufnehmStaatSl() != null
                                    && !(rtrim(bsb_before.getAufnehmStaatSl())
                                            .equals(rtrim(bsb_after.getAufnehmStaatSl())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmStaatSl() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmStaatSl()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmStaatSl() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmStaatSl()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmStaatSl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmLand() == null && bsb_after.getAufnehmLand() == null)) && ((bsb_before
                    .getAufnehmLand() == null && !rtrim(bsb_after.getAufnehmLand()).equals(null))
                    || (bsb_after.getAufnehmLand() == null && !(bsb_before.getAufnehmLand()).equals(null))
                    || (bsb_before.getAufnehmLand() != null && bsb_after.getAufnehmLand() != null
                            && !(rtrim(bsb_before.getAufnehmLand()).equals(rtrim(bsb_after.getAufnehmLand())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmLand() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmLand()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmLand() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmLand()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmLand", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getAufnehmPfNr() != null || bsb_after.getAufnehmPfNr() != null)
                    && ((bsb_before.getAufnehmPfNr() == null && bsb_after.getAufnehmPfNr() != null)
                            || (bsb_after.getAufnehmPfNr() == null && bsb_before.getAufnehmPfNr() != null)
                            || (bsb_before.getAufnehmPfNr() != null && bsb_after.getAufnehmPfNr() != null
                                    && bsb_before.getAufnehmPfNr().compareTo(bsb_after.getAufnehmPfNr()) != 0))) {

                diffMap.clear();

                if (bsb_before.getAufnehmPfNr() != null) {

                    diffMap.put("before", bsb_before.getAufnehmPfNr());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getAufnehmPfNr());
                fieldMap.put("aufnehmPfNr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getAufnehmPfPlz() != null || bsb_after.getAufnehmPfPlz() != null)
                    && ((bsb_before.getAufnehmPfPlz() == null && bsb_after.getAufnehmPfPlz() != null)
                            || (bsb_after.getAufnehmPfPlz() == null && bsb_before.getAufnehmPfPlz() != null)
                            || (bsb_before.getAufnehmPfPlz() != null && bsb_after.getAufnehmPfPlz() != null
                                    && bsb_before.getAufnehmPfPlz().compareTo(bsb_after.getAufnehmPfPlz()) != 0))) {

                diffMap.clear();

                if (bsb_before.getAufnehmPfPlz() != null) {

                    diffMap.put("before", bsb_before.getAufnehmPfPlz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getAufnehmPfPlz());
                fieldMap.put("aufnehmPfPlz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmPfOrt() == null && bsb_after.getAufnehmPfOrt() == null)) && ((bsb_before
                    .getAufnehmPfOrt() == null && !rtrim(bsb_after.getAufnehmPfOrt()).equals(null))
                    || (bsb_after.getAufnehmPfOrt() == null && !(bsb_before.getAufnehmPfOrt()).equals(null))
                    || (bsb_before.getAufnehmPfOrt() != null && bsb_after.getAufnehmPfOrt() != null
                            && !(rtrim(bsb_before.getAufnehmPfOrt()).equals(rtrim(bsb_after.getAufnehmPfOrt())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmPfOrt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmPfOrt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmPfOrt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmPfOrt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmPfOrt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getAufnehmGkPlz() != null || bsb_after.getAufnehmGkPlz() != null)
                    && ((bsb_before.getAufnehmGkPlz() == null && bsb_after.getAufnehmGkPlz() != null)
                            || (bsb_after.getAufnehmGkPlz() == null && bsb_before.getAufnehmGkPlz() != null)
                            || (bsb_before.getAufnehmGkPlz() != null && bsb_after.getAufnehmGkPlz() != null
                                    && bsb_before.getAufnehmGkPlz().compareTo(bsb_after.getAufnehmGkPlz()) != 0))) {

                diffMap.clear();

                if (bsb_before.getAufnehmGkPlz() != null) {

                    diffMap.put("before", bsb_before.getAufnehmGkPlz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getAufnehmGkPlz());
                fieldMap.put("aufnehmGkPlz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmGkOrt() == null && bsb_after.getAufnehmGkOrt() == null)) && ((bsb_before
                    .getAufnehmGkOrt() == null && !rtrim(bsb_after.getAufnehmGkOrt()).equals(null))
                    || (bsb_after.getAufnehmGkOrt() == null && !(bsb_before.getAufnehmGkOrt()).equals(null))
                    || (bsb_before.getAufnehmGkOrt() != null && bsb_after.getAufnehmGkOrt() != null
                            && !(rtrim(bsb_before.getAufnehmGkOrt()).equals(rtrim(bsb_after.getAufnehmGkOrt())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmGkOrt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmGkOrt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmGkOrt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmGkOrt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmGkOrt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmTel() == null && bsb_after.getAufnehmTel() == null)) && ((bsb_before
                    .getAufnehmTel() == null && !rtrim(bsb_after.getAufnehmTel()).equals(null))
                    || (bsb_after.getAufnehmTel() == null && !(bsb_before.getAufnehmTel()).equals(null))
                    || (bsb_before.getAufnehmTel() != null && bsb_after.getAufnehmTel() != null
                            && !(rtrim(bsb_before.getAufnehmTel()).equals(rtrim(bsb_after.getAufnehmTel())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmTel() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmTel()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmTel() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmTel()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmTel", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmEmail() == null && bsb_after.getAufnehmEmail() == null)) && ((bsb_before
                    .getAufnehmEmail() == null && !rtrim(bsb_after.getAufnehmEmail()).equals(null))
                    || (bsb_after.getAufnehmEmail() == null && !(bsb_before.getAufnehmEmail()).equals(null))
                    || (bsb_before.getAufnehmEmail() != null && bsb_after.getAufnehmEmail() != null
                            && !(rtrim(bsb_before.getAufnehmEmail()).equals(rtrim(bsb_after.getAufnehmEmail())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmEmail() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmEmail()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmEmail() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmEmail()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmEmail", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmOrdnBegr() == null && bsb_after.getAufnehmOrdnBegr() == null))
                    && ((bsb_before.getAufnehmOrdnBegr() == null && !rtrim(bsb_after.getAufnehmOrdnBegr()).equals(null))
                            || (bsb_after.getAufnehmOrdnBegr() == null
                                    && !(bsb_before.getAufnehmOrdnBegr()).equals(null))
                            || (bsb_before.getAufnehmOrdnBegr() != null && bsb_after.getAufnehmOrdnBegr() != null
                                    && !(rtrim(bsb_before.getAufnehmOrdnBegr())
                                            .equals(rtrim(bsb_after.getAufnehmOrdnBegr())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmOrdnBegr() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmOrdnBegr()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmOrdnBegr() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmOrdnBegr()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmOrdnBegr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAufnehmBic() == null && bsb_after.getAufnehmBic() == null)) && ((bsb_before
                    .getAufnehmBic() == null && !rtrim(bsb_after.getAufnehmBic()).equals(null))
                    || (bsb_after.getAufnehmBic() == null && !(bsb_before.getAufnehmBic()).equals(null))
                    || (bsb_before.getAufnehmBic() != null && bsb_after.getAufnehmBic() != null
                            && !(rtrim(bsb_before.getAufnehmBic()).equals(rtrim(bsb_after.getAufnehmBic())))))) {

                diffMap.clear();

                if (bsb_before.getAufnehmBic() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAufnehmBic()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAufnehmBic() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAufnehmBic()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aufnehmBic", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Auftragnehmer")) {
            sectionMap.get("Auftragnehmer").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Auftragnehmer", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Auftragnehmer");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffWeitereFelder(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getPersonRolle() != null) {

                diffMap.put("after", rtrim(bsb_after.getPersonRolle()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("personRolle", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getPersonId() != null) {

                diffMap.put("after", rtrim(bsb_after.getPersonId()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("personId", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getSteuerZuord() != null) {

                diffMap.put("after", rtrim(bsb_after.getSteuerZuord()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("steuerZuord", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getDokuArt() != null) {

                diffMap.put("after", rtrim(bsb_after.getDokuArt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("dokuArt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNdTicket() != null) {

                diffMap.put("after", rtrim(bsb_after.getNdTicket()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("ndTicket", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNdNrLfd() != null) {

                diffMap.put("after", bsb_after.getNdNrLfd());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("ndNrLfd", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAnlageDatum() != null) {

                diffMap.put("after", bsb_after.getAnlageDatum());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("anlageDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAnlageZeit() != null) {

                diffMap.put("after", bsb_after.getAnlageZeit());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("anlageZeit", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAnlageErfasser() != null) {

                diffMap.put("after", rtrim(bsb_after.getAnlageErfasser()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("anlageErfasser", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getPersonRolle() != null) {

                diffMap.put("before", rtrim(bsb_before.getPersonRolle()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("personRolle", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getPersonId() != null) {

                diffMap.put("before", rtrim(bsb_before.getPersonId()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("personId", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getSteuerZuord() != null) {

                diffMap.put("before", rtrim(bsb_before.getSteuerZuord()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("steuerZuord", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getDokuArt() != null) {

                diffMap.put("before", rtrim(bsb_before.getDokuArt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("dokuArt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNdTicket() != null) {

                diffMap.put("before", rtrim(bsb_before.getNdTicket()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ndTicket", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNdNrLfd() != null) {

                diffMap.put("before", bsb_before.getNdNrLfd());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ndNrLfd", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAnlageDatum() != null) {

                diffMap.put("before", bsb_before.getAnlageDatum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("anlageDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAnlageZeit() != null) {

                diffMap.put("before", bsb_before.getAnlageZeit());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("anlageZeit", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAnlageErfasser() != null) {

                diffMap.put("before", rtrim(bsb_before.getAnlageErfasser()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("anlageErfasser", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getPersonRolle() == null && bsb_after.getPersonRolle() == null)) && ((bsb_before
                    .getPersonRolle() == null && !rtrim(bsb_after.getPersonRolle()).equals(null))
                    || (bsb_after.getPersonRolle() == null && !(bsb_before.getPersonRolle()).equals(null))
                    || (bsb_before.getPersonRolle() != null && bsb_after.getPersonRolle() != null
                            && !(rtrim(bsb_before.getPersonRolle()).equals(rtrim(bsb_after.getPersonRolle())))))) {

                diffMap.clear();

                if (bsb_before.getPersonRolle() != null) {

                    diffMap.put("before", rtrim(bsb_before.getPersonRolle()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getPersonRolle() != null) {

                    diffMap.put("after", rtrim(bsb_after.getPersonRolle()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("personRolle", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getPersonId() == null && bsb_after.getPersonId() == null))
                    && ((bsb_before.getPersonId() == null && !rtrim(bsb_after.getPersonId()).equals(null))
                            || (bsb_after.getPersonId() == null && !(bsb_before.getPersonId()).equals(null))
                            || (bsb_before.getPersonId() != null && bsb_after.getPersonId() != null
                                    && !(rtrim(bsb_before.getPersonId()).equals(rtrim(bsb_after.getPersonId())))))) {

                diffMap.clear();

                if (bsb_before.getPersonId() != null) {

                    diffMap.put("before", rtrim(bsb_before.getPersonId()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getPersonId() != null) {

                    diffMap.put("after", rtrim(bsb_after.getPersonId()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("personId", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getSteuerZuord() == null && bsb_after.getSteuerZuord() == null)) && ((bsb_before
                    .getSteuerZuord() == null && !rtrim(bsb_after.getSteuerZuord()).equals(null))
                    || (bsb_after.getSteuerZuord() == null && !(bsb_before.getSteuerZuord()).equals(null))
                    || (bsb_before.getSteuerZuord() != null && bsb_after.getSteuerZuord() != null
                            && !(rtrim(bsb_before.getSteuerZuord()).equals(rtrim(bsb_after.getSteuerZuord())))))) {

                diffMap.clear();

                if (bsb_before.getSteuerZuord() != null) {

                    diffMap.put("before", rtrim(bsb_before.getSteuerZuord()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getSteuerZuord() != null) {

                    diffMap.put("after", rtrim(bsb_after.getSteuerZuord()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("steuerZuord", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getDokuArt() == null && bsb_after.getDokuArt() == null))
                    && ((bsb_before.getDokuArt() == null && !rtrim(bsb_after.getDokuArt()).equals(null))
                            || (bsb_after.getDokuArt() == null && !(bsb_before.getDokuArt()).equals(null))
                            || (bsb_before.getDokuArt() != null && bsb_after.getDokuArt() != null
                                    && !(rtrim(bsb_before.getDokuArt()).equals(rtrim(bsb_after.getDokuArt())))))) {

                diffMap.clear();

                if (bsb_before.getDokuArt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getDokuArt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getDokuArt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getDokuArt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("dokuArt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNdTicket() == null && bsb_after.getNdTicket() == null))
                    && ((bsb_before.getNdTicket() == null && !rtrim(bsb_after.getNdTicket()).equals(null))
                            || (bsb_after.getNdTicket() == null && !(bsb_before.getNdTicket()).equals(null))
                            || (bsb_before.getNdTicket() != null && bsb_after.getNdTicket() != null
                                    && !(rtrim(bsb_before.getNdTicket()).equals(rtrim(bsb_after.getNdTicket())))))) {

                diffMap.clear();

                if (bsb_before.getNdTicket() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNdTicket()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNdTicket() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNdTicket()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("ndTicket", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getNdNrLfd() != null || bsb_after.getNdNrLfd() != null)
                    && ((bsb_before.getNdNrLfd() == null && bsb_after.getNdNrLfd() != null)
                            || (bsb_after.getNdNrLfd() == null && bsb_before.getNdNrLfd() != null)
                            || (bsb_before.getNdNrLfd() != null && bsb_after.getNdNrLfd() != null
                                    && bsb_before.getNdNrLfd().compareTo(bsb_after.getNdNrLfd()) != 0))) {

                diffMap.clear();

                if (bsb_before.getNdNrLfd() != null) {

                    diffMap.put("before", bsb_before.getNdNrLfd());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getNdNrLfd());
                fieldMap.put("ndNrLfd", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getAnlageDatum() != null || bsb_after.getAnlageDatum() != null)
                    && ((bsb_before.getAnlageDatum() == null && bsb_after.getAnlageDatum() != null)
                            || (bsb_after.getAnlageDatum() == null && bsb_before.getAnlageDatum() != null)
                            || (bsb_before.getAnlageDatum() != null && bsb_after.getAnlageDatum() != null
                                    && bsb_before.getAnlageDatum().compareTo(bsb_after.getAnlageDatum()) != 0))) {

                diffMap.clear();

                if (bsb_before.getAnlageDatum() != null) {

                    diffMap.put("before", bsb_before.getAnlageDatum());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getAnlageDatum());
                fieldMap.put("anlageDatum", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getAnlageZeit() != null || bsb_after.getAnlageZeit() != null)
                    && ((bsb_before.getAnlageZeit() == null && bsb_after.getAnlageZeit() != null)
                            || (bsb_after.getAnlageZeit() == null && bsb_before.getAnlageZeit() != null)
                            || (bsb_before.getAnlageZeit() != null && bsb_after.getAnlageZeit() != null
                                    && bsb_before.getAnlageZeit().compareTo(bsb_after.getAnlageZeit()) != 0))) {

                diffMap.clear();

                if (bsb_before.getAnlageZeit() != null) {

                    diffMap.put("before", bsb_before.getAnlageZeit());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getAnlageZeit());
                fieldMap.put("anlageZeit", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAnlageErfasser() == null && bsb_after.getAnlageErfasser() == null))
                    && ((bsb_before.getAnlageErfasser() == null && !rtrim(bsb_after.getAnlageErfasser()).equals(null))
                            || (bsb_after.getAnlageErfasser() == null && !(bsb_before.getAnlageErfasser()).equals(null))
                            || (bsb_before.getAnlageErfasser() != null && bsb_after.getAnlageErfasser() != null
                                    && !(rtrim(bsb_before.getAnlageErfasser())
                                            .equals(rtrim(bsb_after.getAnlageErfasser())))))) {

                diffMap.clear();

                if (bsb_before.getAnlageErfasser() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAnlageErfasser()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAnlageErfasser() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAnlageErfasser()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("anlageErfasser", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("WeitereFelder")) {
            sectionMap.get("WeitereFelder").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("WeitereFelder", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed WeitereFelder");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffSchlusselfelder(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getStatus() != null) {

                diffMap.put("after", rtrim(bsb_after.getStatus()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("status", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getMeldeStatus() != null) {

                diffMap.put("after", rtrim(bsb_after.getMeldeStatus()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("meldeStatus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getStatusKommentar() != null) {

                diffMap.put("after", rtrim(bsb_after.getStatusKommentar()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("statusKommentar", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getPartnerId() != null) {

                diffMap.put("after", rtrim(bsb_after.getPartnerId()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("partnerId", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getKontoId() != null) {

                diffMap.put("after", rtrim(bsb_after.getKontoId()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("kontoId", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAntwortStatus() != null) {

                diffMap.put("after", rtrim(bsb_after.getAntwortStatus()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("antwortStatus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAntwortFehlerNr() != null) {

                diffMap.put("after", rtrim(bsb_after.getAntwortFehlerNr()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("antwortFehlerNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getStornoKz() != null) {

                diffMap.put("after", rtrim(bsb_after.getStornoKz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("stornoKz", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getStatus() != null) {

                diffMap.put("before", rtrim(bsb_before.getStatus()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("status", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getMeldeStatus() != null) {

                diffMap.put("before", rtrim(bsb_before.getMeldeStatus()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("meldeStatus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getStatusKommentar() != null) {

                diffMap.put("before", rtrim(bsb_before.getStatusKommentar()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("statusKommentar", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getPartnerId() != null) {

                diffMap.put("before", rtrim(bsb_before.getPartnerId()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("partnerId", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getKontoId() != null) {

                diffMap.put("before", rtrim(bsb_before.getKontoId()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kontoId", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAntwortStatus() != null) {

                diffMap.put("before", rtrim(bsb_before.getAntwortStatus()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("antwortStatus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAntwortFehlerNr() != null) {

                diffMap.put("before", rtrim(bsb_before.getAntwortFehlerNr()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("antwortFehlerNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getStornoKz() != null) {

                diffMap.put("before", rtrim(bsb_before.getStornoKz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("stornoKz", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getStatus() == null && bsb_after.getStatus() == null))
                    && ((bsb_before.getStatus() == null && !rtrim(bsb_after.getStatus()).equals(null))
                            || (bsb_after.getStatus() == null && !(bsb_before.getStatus()).equals(null))
                            || (bsb_before.getStatus() != null && bsb_after.getStatus() != null
                                    && !(rtrim(bsb_before.getStatus()).equals(rtrim(bsb_after.getStatus())))))) {

                diffMap.clear();

                if (bsb_before.getStatus() != null) {

                    diffMap.put("before", rtrim(bsb_before.getStatus()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getStatus() != null) {

                    diffMap.put("after", rtrim(bsb_after.getStatus()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("status", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getMeldeStatus() == null && bsb_after.getMeldeStatus() == null)) && ((bsb_before
                    .getMeldeStatus() == null && !rtrim(bsb_after.getMeldeStatus()).equals(null))
                    || (bsb_after.getMeldeStatus() == null && !(bsb_before.getMeldeStatus()).equals(null))
                    || (bsb_before.getMeldeStatus() != null && bsb_after.getMeldeStatus() != null
                            && !(rtrim(bsb_before.getMeldeStatus()).equals(rtrim(bsb_after.getMeldeStatus())))))) {

                diffMap.clear();

                if (bsb_before.getMeldeStatus() != null) {

                    diffMap.put("before", rtrim(bsb_before.getMeldeStatus()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getMeldeStatus() != null) {

                    diffMap.put("after", rtrim(bsb_after.getMeldeStatus()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("meldeStatus", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getStatusKommentar() == null && bsb_after.getStatusKommentar() == null))
                    && ((bsb_before.getStatusKommentar() == null && !rtrim(bsb_after.getStatusKommentar()).equals(null))
                            || (bsb_after.getStatusKommentar() == null
                                    && !(bsb_before.getStatusKommentar()).equals(null))
                            || (bsb_before.getStatusKommentar() != null && bsb_after.getStatusKommentar() != null
                                    && !(rtrim(bsb_before.getStatusKommentar())
                                            .equals(rtrim(bsb_after.getStatusKommentar())))))) {

                diffMap.clear();

                if (bsb_before.getStatusKommentar() != null) {

                    diffMap.put("before", rtrim(bsb_before.getStatusKommentar()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getStatusKommentar() != null) {

                    diffMap.put("after", rtrim(bsb_after.getStatusKommentar()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("statusKommentar", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getPartnerId() == null && bsb_after.getPartnerId() == null))
                    && ((bsb_before.getPartnerId() == null && !rtrim(bsb_after.getPartnerId()).equals(null))
                            || (bsb_after.getPartnerId() == null && !(bsb_before.getPartnerId()).equals(null))
                            || (bsb_before.getPartnerId() != null && bsb_after.getPartnerId() != null
                                    && !(rtrim(bsb_before.getPartnerId()).equals(rtrim(bsb_after.getPartnerId())))))) {

                diffMap.clear();

                if (bsb_before.getPartnerId() != null) {

                    diffMap.put("before", rtrim(bsb_before.getPartnerId()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getPartnerId() != null) {

                    diffMap.put("after", rtrim(bsb_after.getPartnerId()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("partnerId", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getKontoId() == null && bsb_after.getKontoId() == null))
                    && ((bsb_before.getKontoId() == null && !rtrim(bsb_after.getKontoId()).equals(null))
                            || (bsb_after.getKontoId() == null && !(bsb_before.getKontoId()).equals(null))
                            || (bsb_before.getKontoId() != null && bsb_after.getKontoId() != null
                                    && !(rtrim(bsb_before.getKontoId()).equals(rtrim(bsb_after.getKontoId())))))) {

                diffMap.clear();

                if (bsb_before.getKontoId() != null) {

                    diffMap.put("before", rtrim(bsb_before.getKontoId()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getKontoId() != null) {

                    diffMap.put("after", rtrim(bsb_after.getKontoId()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("kontoId", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAntwortStatus() == null && bsb_after.getAntwortStatus() == null)) && ((bsb_before
                    .getAntwortStatus() == null && !rtrim(bsb_after.getAntwortStatus()).equals(null))
                    || (bsb_after.getAntwortStatus() == null && !(bsb_before.getAntwortStatus()).equals(null))
                    || (bsb_before.getAntwortStatus() != null && bsb_after.getAntwortStatus() != null
                            && !(rtrim(bsb_before.getAntwortStatus()).equals(rtrim(bsb_after.getAntwortStatus())))))) {

                diffMap.clear();

                if (bsb_before.getAntwortStatus() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAntwortStatus()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAntwortStatus() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAntwortStatus()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("antwortStatus", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAntwortFehlerNr() == null && bsb_after.getAntwortFehlerNr() == null))
                    && ((bsb_before.getAntwortFehlerNr() == null && !rtrim(bsb_after.getAntwortFehlerNr()).equals(null))
                            || (bsb_after.getAntwortFehlerNr() == null
                                    && !(bsb_before.getAntwortFehlerNr()).equals(null))
                            || (bsb_before.getAntwortFehlerNr() != null && bsb_after.getAntwortFehlerNr() != null
                                    && !(rtrim(bsb_before.getAntwortFehlerNr())
                                            .equals(rtrim(bsb_after.getAntwortFehlerNr())))))) {

                diffMap.clear();

                if (bsb_before.getAntwortFehlerNr() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAntwortFehlerNr()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAntwortFehlerNr() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAntwortFehlerNr()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("antwortFehlerNr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getStornoKz() == null && bsb_after.getStornoKz() == null))
                    && ((bsb_before.getStornoKz() == null && !rtrim(bsb_after.getStornoKz()).equals(null))
                            || (bsb_after.getStornoKz() == null && !(bsb_before.getStornoKz()).equals(null))
                            || (bsb_before.getStornoKz() != null && bsb_after.getStornoKz() != null
                                    && !(rtrim(bsb_before.getStornoKz()).equals(rtrim(bsb_after.getStornoKz())))))) {

                diffMap.clear();

                if (bsb_before.getStornoKz() != null) {

                    diffMap.put("before", rtrim(bsb_before.getStornoKz()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getStornoKz() != null) {

                    diffMap.put("after", rtrim(bsb_after.getStornoKz()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("stornoKz", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Schlusselfelder")) {
            sectionMap.get("Schlusselfelder").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Schlusselfelder", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Schlusselfelder");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffNaturlichePerson2(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getNp2Geschlecht() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Geschlecht()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Geschlecht", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Idnr() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Idnr()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Idnr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Nationalitaet() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Nationalitaet()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Nationalitaet", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Name() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Name()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Name", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Vorname() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Vorname()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Vorname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Namensvorsatz() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Namensvorsatz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Namensvorsatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Namenszusatz() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Namenszusatz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Namenszusatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Titel() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Titel()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Titel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Gebdat() != null) {

                diffMap.put("after", bsb_after.getNp2Gebdat());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Gebdat", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Geburtsname() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Geburtsname()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Geburtsname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2GebnameVors() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2GebnameVors()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2GebnameVors", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2GebnameZus() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2GebnameZus()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2GebnameZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Geburtsort() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Geburtsort()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Geburtsort", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2GeburtslandSl() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2GeburtslandSl()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2GeburtslandSl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Geburtsland() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Geburtsland()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Geburtsland", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2AuswandDatum() != null) {

                diffMap.put("after", bsb_after.getNp2AuswandDatum());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2AuswandDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2SterbeDatum() != null) {

                diffMap.put("after", bsb_after.getNp2SterbeDatum());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2SterbeDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2Typ() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2Typ()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2Typ", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp2AuslPersstId() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp2AuslPersstId()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np2AuslPersstId", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getNp2Geschlecht() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Geschlecht()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Geschlecht", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Idnr() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Idnr()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Idnr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Nationalitaet() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Nationalitaet()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Nationalitaet", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Name() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Name()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Name", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Vorname() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Vorname()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Vorname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Namensvorsatz() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Namensvorsatz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Namensvorsatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Namenszusatz() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Namenszusatz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Namenszusatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Titel() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Titel()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Titel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Gebdat() != null) {

                diffMap.put("before", bsb_before.getNp2Gebdat());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Gebdat", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Geburtsname() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Geburtsname()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Geburtsname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2GebnameVors() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2GebnameVors()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2GebnameVors", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2GebnameZus() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2GebnameZus()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2GebnameZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Geburtsort() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Geburtsort()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Geburtsort", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2GeburtslandSl() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2GeburtslandSl()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2GeburtslandSl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Geburtsland() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Geburtsland()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Geburtsland", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2AuswandDatum() != null) {

                diffMap.put("before", bsb_before.getNp2AuswandDatum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2AuswandDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2SterbeDatum() != null) {

                diffMap.put("before", bsb_before.getNp2SterbeDatum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2SterbeDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2Typ() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2Typ()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2Typ", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp2AuslPersstId() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp2AuslPersstId()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np2AuslPersstId", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getNp2Geschlecht() == null && bsb_after.getNp2Geschlecht() == null)) && ((bsb_before
                    .getNp2Geschlecht() == null && !rtrim(bsb_after.getNp2Geschlecht()).equals(null))
                    || (bsb_after.getNp2Geschlecht() == null && !(bsb_before.getNp2Geschlecht()).equals(null))
                    || (bsb_before.getNp2Geschlecht() != null && bsb_after.getNp2Geschlecht() != null
                            && !(rtrim(bsb_before.getNp2Geschlecht()).equals(rtrim(bsb_after.getNp2Geschlecht())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Geschlecht() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Geschlecht()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Geschlecht() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Geschlecht()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Geschlecht", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Idnr() == null && bsb_after.getNp2Idnr() == null))
                    && ((bsb_before.getNp2Idnr() == null && !rtrim(bsb_after.getNp2Idnr()).equals(null))
                            || (bsb_after.getNp2Idnr() == null && !(bsb_before.getNp2Idnr()).equals(null))
                            || (bsb_before.getNp2Idnr() != null && bsb_after.getNp2Idnr() != null
                                    && !(rtrim(bsb_before.getNp2Idnr()).equals(rtrim(bsb_after.getNp2Idnr())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Idnr() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Idnr()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Idnr() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Idnr()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Idnr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Nationalitaet() == null && bsb_after.getNp2Nationalitaet() == null))
                    && ((bsb_before.getNp2Nationalitaet() == null
                            && !rtrim(bsb_after.getNp2Nationalitaet()).equals(null))
                            || (bsb_after.getNp2Nationalitaet() == null
                                    && !(bsb_before.getNp2Nationalitaet()).equals(null))
                            || (bsb_before.getNp2Nationalitaet() != null && bsb_after.getNp2Nationalitaet() != null
                                    && !(rtrim(bsb_before.getNp2Nationalitaet())
                                            .equals(rtrim(bsb_after.getNp2Nationalitaet())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Nationalitaet() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Nationalitaet()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Nationalitaet() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Nationalitaet()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Nationalitaet", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Name() == null && bsb_after.getNp2Name() == null))
                    && ((bsb_before.getNp2Name() == null && !rtrim(bsb_after.getNp2Name()).equals(null))
                            || (bsb_after.getNp2Name() == null && !(bsb_before.getNp2Name()).equals(null))
                            || (bsb_before.getNp2Name() != null && bsb_after.getNp2Name() != null
                                    && !(rtrim(bsb_before.getNp2Name()).equals(rtrim(bsb_after.getNp2Name())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Name() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Name()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Name() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Name()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Name", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Vorname() == null && bsb_after.getNp2Vorname() == null)) && ((bsb_before
                    .getNp2Vorname() == null && !rtrim(bsb_after.getNp2Vorname()).equals(null))
                    || (bsb_after.getNp2Vorname() == null && !(bsb_before.getNp2Vorname()).equals(null))
                    || (bsb_before.getNp2Vorname() != null && bsb_after.getNp2Vorname() != null
                            && !(rtrim(bsb_before.getNp2Vorname()).equals(rtrim(bsb_after.getNp2Vorname())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Vorname() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Vorname()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Vorname() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Vorname()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Vorname", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Namensvorsatz() == null && bsb_after.getNp2Namensvorsatz() == null))
                    && ((bsb_before.getNp2Namensvorsatz() == null
                            && !rtrim(bsb_after.getNp2Namensvorsatz()).equals(null))
                            || (bsb_after.getNp2Namensvorsatz() == null
                                    && !(bsb_before.getNp2Namensvorsatz()).equals(null))
                            || (bsb_before.getNp2Namensvorsatz() != null && bsb_after.getNp2Namensvorsatz() != null
                                    && !(rtrim(bsb_before.getNp2Namensvorsatz())
                                            .equals(rtrim(bsb_after.getNp2Namensvorsatz())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Namensvorsatz() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Namensvorsatz()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Namensvorsatz() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Namensvorsatz()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Namensvorsatz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Namenszusatz() == null && bsb_after.getNp2Namenszusatz() == null))
                    && ((bsb_before.getNp2Namenszusatz() == null && !rtrim(bsb_after.getNp2Namenszusatz()).equals(null))
                            || (bsb_after.getNp2Namenszusatz() == null
                                    && !(bsb_before.getNp2Namenszusatz()).equals(null))
                            || (bsb_before.getNp2Namenszusatz() != null && bsb_after.getNp2Namenszusatz() != null
                                    && !(rtrim(bsb_before.getNp2Namenszusatz())
                                            .equals(rtrim(bsb_after.getNp2Namenszusatz())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Namenszusatz() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Namenszusatz()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Namenszusatz() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Namenszusatz()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Namenszusatz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Titel() == null && bsb_after.getNp2Titel() == null))
                    && ((bsb_before.getNp2Titel() == null && !rtrim(bsb_after.getNp2Titel()).equals(null))
                            || (bsb_after.getNp2Titel() == null && !(bsb_before.getNp2Titel()).equals(null))
                            || (bsb_before.getNp2Titel() != null && bsb_after.getNp2Titel() != null
                                    && !(rtrim(bsb_before.getNp2Titel()).equals(rtrim(bsb_after.getNp2Titel())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Titel() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Titel()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Titel() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Titel()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Titel", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getNp2Gebdat() != null || bsb_after.getNp2Gebdat() != null)
                    && ((bsb_before.getNp2Gebdat() == null && bsb_after.getNp2Gebdat() != null)
                            || (bsb_after.getNp2Gebdat() == null && bsb_before.getNp2Gebdat() != null)
                            || (bsb_before.getNp2Gebdat() != null && bsb_after.getNp2Gebdat() != null
                                    && bsb_before.getNp2Gebdat().compareTo(bsb_after.getNp2Gebdat()) != 0))) {

                diffMap.clear();

                if (bsb_before.getNp2Gebdat() != null) {

                    diffMap.put("before", bsb_before.getNp2Gebdat());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getNp2Gebdat());
                fieldMap.put("np2Gebdat", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Geburtsname() == null && bsb_after.getNp2Geburtsname() == null))
                    && ((bsb_before.getNp2Geburtsname() == null && !rtrim(bsb_after.getNp2Geburtsname()).equals(null))
                            || (bsb_after.getNp2Geburtsname() == null && !(bsb_before.getNp2Geburtsname()).equals(null))
                            || (bsb_before.getNp2Geburtsname() != null && bsb_after.getNp2Geburtsname() != null
                                    && !(rtrim(bsb_before.getNp2Geburtsname())
                                            .equals(rtrim(bsb_after.getNp2Geburtsname())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Geburtsname() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Geburtsname()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Geburtsname() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Geburtsname()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Geburtsname", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2GebnameVors() == null && bsb_after.getNp2GebnameVors() == null))
                    && ((bsb_before.getNp2GebnameVors() == null && !rtrim(bsb_after.getNp2GebnameVors()).equals(null))
                            || (bsb_after.getNp2GebnameVors() == null && !(bsb_before.getNp2GebnameVors()).equals(null))
                            || (bsb_before.getNp2GebnameVors() != null && bsb_after.getNp2GebnameVors() != null
                                    && !(rtrim(bsb_before.getNp2GebnameVors())
                                            .equals(rtrim(bsb_after.getNp2GebnameVors())))))) {

                diffMap.clear();

                if (bsb_before.getNp2GebnameVors() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2GebnameVors()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2GebnameVors() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2GebnameVors()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2GebnameVors", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2GebnameZus() == null && bsb_after.getNp2GebnameZus() == null)) && ((bsb_before
                    .getNp2GebnameZus() == null && !rtrim(bsb_after.getNp2GebnameZus()).equals(null))
                    || (bsb_after.getNp2GebnameZus() == null && !(bsb_before.getNp2GebnameZus()).equals(null))
                    || (bsb_before.getNp2GebnameZus() != null && bsb_after.getNp2GebnameZus() != null
                            && !(rtrim(bsb_before.getNp2GebnameZus()).equals(rtrim(bsb_after.getNp2GebnameZus())))))) {

                diffMap.clear();

                if (bsb_before.getNp2GebnameZus() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2GebnameZus()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2GebnameZus() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2GebnameZus()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2GebnameZus", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Geburtsort() == null && bsb_after.getNp2Geburtsort() == null)) && ((bsb_before
                    .getNp2Geburtsort() == null && !rtrim(bsb_after.getNp2Geburtsort()).equals(null))
                    || (bsb_after.getNp2Geburtsort() == null && !(bsb_before.getNp2Geburtsort()).equals(null))
                    || (bsb_before.getNp2Geburtsort() != null && bsb_after.getNp2Geburtsort() != null
                            && !(rtrim(bsb_before.getNp2Geburtsort()).equals(rtrim(bsb_after.getNp2Geburtsort())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Geburtsort() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Geburtsort()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Geburtsort() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Geburtsort()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Geburtsort", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2GeburtslandSl() == null && bsb_after.getNp2GeburtslandSl() == null))
                    && ((bsb_before.getNp2GeburtslandSl() == null
                            && !rtrim(bsb_after.getNp2GeburtslandSl()).equals(null))
                            || (bsb_after.getNp2GeburtslandSl() == null
                                    && !(bsb_before.getNp2GeburtslandSl()).equals(null))
                            || (bsb_before.getNp2GeburtslandSl() != null && bsb_after.getNp2GeburtslandSl() != null
                                    && !(rtrim(bsb_before.getNp2GeburtslandSl())
                                            .equals(rtrim(bsb_after.getNp2GeburtslandSl())))))) {

                diffMap.clear();

                if (bsb_before.getNp2GeburtslandSl() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2GeburtslandSl()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2GeburtslandSl() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2GeburtslandSl()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2GeburtslandSl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Geburtsland() == null && bsb_after.getNp2Geburtsland() == null))
                    && ((bsb_before.getNp2Geburtsland() == null && !rtrim(bsb_after.getNp2Geburtsland()).equals(null))
                            || (bsb_after.getNp2Geburtsland() == null && !(bsb_before.getNp2Geburtsland()).equals(null))
                            || (bsb_before.getNp2Geburtsland() != null && bsb_after.getNp2Geburtsland() != null
                                    && !(rtrim(bsb_before.getNp2Geburtsland())
                                            .equals(rtrim(bsb_after.getNp2Geburtsland())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Geburtsland() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Geburtsland()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Geburtsland() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Geburtsland()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Geburtsland", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getNp2AuswandDatum() != null || bsb_after.getNp2AuswandDatum() != null)
                    && ((bsb_before.getNp2AuswandDatum() == null && bsb_after.getNp2AuswandDatum() != null)
                            || (bsb_after.getNp2AuswandDatum() == null && bsb_before.getNp2AuswandDatum() != null)
                            || (bsb_before.getNp2AuswandDatum() != null && bsb_after.getNp2AuswandDatum() != null
                                    && bsb_before.getNp2AuswandDatum()
                                            .compareTo(bsb_after.getNp2AuswandDatum()) != 0))) {

                diffMap.clear();

                if (bsb_before.getNp2AuswandDatum() != null) {

                    diffMap.put("before", bsb_before.getNp2AuswandDatum());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getNp2AuswandDatum());
                fieldMap.put("np2AuswandDatum", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getNp2SterbeDatum() != null || bsb_after.getNp2SterbeDatum() != null)
                    && ((bsb_before.getNp2SterbeDatum() == null && bsb_after.getNp2SterbeDatum() != null)
                            || (bsb_after.getNp2SterbeDatum() == null && bsb_before.getNp2SterbeDatum() != null)
                            || (bsb_before.getNp2SterbeDatum() != null && bsb_after.getNp2SterbeDatum() != null
                                    && bsb_before.getNp2SterbeDatum().compareTo(bsb_after.getNp2SterbeDatum()) != 0))) {

                diffMap.clear();

                if (bsb_before.getNp2SterbeDatum() != null) {

                    diffMap.put("before", bsb_before.getNp2SterbeDatum());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getNp2SterbeDatum());
                fieldMap.put("np2SterbeDatum", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2Typ() == null && bsb_after.getNp2Typ() == null))
                    && ((bsb_before.getNp2Typ() == null && !rtrim(bsb_after.getNp2Typ()).equals(null))
                            || (bsb_after.getNp2Typ() == null && !(bsb_before.getNp2Typ()).equals(null))
                            || (bsb_before.getNp2Typ() != null && bsb_after.getNp2Typ() != null
                                    && !(rtrim(bsb_before.getNp2Typ()).equals(rtrim(bsb_after.getNp2Typ())))))) {

                diffMap.clear();

                if (bsb_before.getNp2Typ() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2Typ()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2Typ() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2Typ()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2Typ", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp2AuslPersstId() == null && bsb_after.getNp2AuslPersstId() == null))
                    && ((bsb_before.getNp2AuslPersstId() == null && !rtrim(bsb_after.getNp2AuslPersstId()).equals(null))
                            || (bsb_after.getNp2AuslPersstId() == null
                                    && !(bsb_before.getNp2AuslPersstId()).equals(null))
                            || (bsb_before.getNp2AuslPersstId() != null && bsb_after.getNp2AuslPersstId() != null
                                    && !(rtrim(bsb_before.getNp2AuslPersstId())
                                            .equals(rtrim(bsb_after.getNp2AuslPersstId())))))) {

                diffMap.clear();

                if (bsb_before.getNp2AuslPersstId() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp2AuslPersstId()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp2AuslPersstId() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp2AuslPersstId()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np2AuslPersstId", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("NaturlichePerson2")) {
            sectionMap.get("NaturlichePerson2").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("NaturlichePerson2", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed NaturlichePerson2");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffAnweisung(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getAnweisungsart() != null) {

                diffMap.put("after", rtrim(bsb_after.getAnweisungsart()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("anweisungsart", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getKmId() != null) {

                diffMap.put("after", rtrim(bsb_after.getKmId()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("kmId", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getRefKmId() != null) {

                diffMap.put("after", rtrim(bsb_after.getRefKmId()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("refKmId", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getAnweisungsart() != null) {

                diffMap.put("before", rtrim(bsb_before.getAnweisungsart()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("anweisungsart", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getKmId() != null) {

                diffMap.put("before", rtrim(bsb_before.getKmId()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kmId", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getRefKmId() != null) {

                diffMap.put("before", rtrim(bsb_before.getRefKmId()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("refKmId", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getAnweisungsart() == null && bsb_after.getAnweisungsart() == null)) && ((bsb_before
                    .getAnweisungsart() == null && !rtrim(bsb_after.getAnweisungsart()).equals(null))
                    || (bsb_after.getAnweisungsart() == null && !(bsb_before.getAnweisungsart()).equals(null))
                    || (bsb_before.getAnweisungsart() != null && bsb_after.getAnweisungsart() != null
                            && !(rtrim(bsb_before.getAnweisungsart()).equals(rtrim(bsb_after.getAnweisungsart())))))) {

                diffMap.clear();

                if (bsb_before.getAnweisungsart() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAnweisungsart()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAnweisungsart() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAnweisungsart()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("anweisungsart", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getKmId() == null && bsb_after.getKmId() == null))
                    && ((bsb_before.getKmId() == null && !rtrim(bsb_after.getKmId()).equals(null))
                            || (bsb_after.getKmId() == null && !(bsb_before.getKmId()).equals(null))
                            || (bsb_before.getKmId() != null && bsb_after.getKmId() != null
                                    && !(rtrim(bsb_before.getKmId()).equals(rtrim(bsb_after.getKmId())))))) {

                diffMap.clear();

                if (bsb_before.getKmId() != null) {

                    diffMap.put("before", rtrim(bsb_before.getKmId()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getKmId() != null) {

                    diffMap.put("after", rtrim(bsb_after.getKmId()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("kmId", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getRefKmId() == null && bsb_after.getRefKmId() == null))
                    && ((bsb_before.getRefKmId() == null && !rtrim(bsb_after.getRefKmId()).equals(null))
                            || (bsb_after.getRefKmId() == null && !(bsb_before.getRefKmId()).equals(null))
                            || (bsb_before.getRefKmId() != null && bsb_after.getRefKmId() != null
                                    && !(rtrim(bsb_before.getRefKmId()).equals(rtrim(bsb_after.getRefKmId())))))) {

                diffMap.clear();

                if (bsb_before.getRefKmId() != null) {

                    diffMap.put("before", rtrim(bsb_before.getRefKmId()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getRefKmId() != null) {

                    diffMap.put("after", rtrim(bsb_after.getRefKmId()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("refKmId", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Anweisung")) {
            sectionMap.get("Anweisung").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Anweisung", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Anweisung");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffNichtNaturlichePerson(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getNnpWid() != null) {

                diffMap.put("after", rtrim(bsb_after.getNnpWid()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nnpWid", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNnpSteuernummer() != null) {

                diffMap.put("after", rtrim(bsb_after.getNnpSteuernummer()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nnpSteuernummer", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNnpFirmenname() != null) {

                diffMap.put("after", rtrim(bsb_after.getNnpFirmenname()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nnpFirmenname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNnpTyp() != null) {

                diffMap.put("after", rtrim(bsb_after.getNnpTyp()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nnpTyp", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNnpAusPersstId() != null) {

                diffMap.put("after", rtrim(bsb_after.getNnpAusPersstId()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("nnpAusPersstId", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getNnpWid() != null) {

                diffMap.put("before", rtrim(bsb_before.getNnpWid()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nnpWid", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNnpSteuernummer() != null) {

                diffMap.put("before", rtrim(bsb_before.getNnpSteuernummer()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nnpSteuernummer", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNnpFirmenname() != null) {

                diffMap.put("before", rtrim(bsb_before.getNnpFirmenname()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nnpFirmenname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNnpTyp() != null) {

                diffMap.put("before", rtrim(bsb_before.getNnpTyp()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nnpTyp", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNnpAusPersstId() != null) {

                diffMap.put("before", rtrim(bsb_before.getNnpAusPersstId()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("nnpAusPersstId", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getNnpWid() == null && bsb_after.getNnpWid() == null))
                    && ((bsb_before.getNnpWid() == null && !rtrim(bsb_after.getNnpWid()).equals(null))
                            || (bsb_after.getNnpWid() == null && !(bsb_before.getNnpWid()).equals(null))
                            || (bsb_before.getNnpWid() != null && bsb_after.getNnpWid() != null
                                    && !(rtrim(bsb_before.getNnpWid()).equals(rtrim(bsb_after.getNnpWid())))))) {

                diffMap.clear();

                if (bsb_before.getNnpWid() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNnpWid()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNnpWid() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNnpWid()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("nnpWid", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNnpSteuernummer() == null && bsb_after.getNnpSteuernummer() == null))
                    && ((bsb_before.getNnpSteuernummer() == null && !rtrim(bsb_after.getNnpSteuernummer()).equals(null))
                            || (bsb_after.getNnpSteuernummer() == null
                                    && !(bsb_before.getNnpSteuernummer()).equals(null))
                            || (bsb_before.getNnpSteuernummer() != null && bsb_after.getNnpSteuernummer() != null
                                    && !(rtrim(bsb_before.getNnpSteuernummer())
                                            .equals(rtrim(bsb_after.getNnpSteuernummer())))))) {

                diffMap.clear();

                if (bsb_before.getNnpSteuernummer() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNnpSteuernummer()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNnpSteuernummer() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNnpSteuernummer()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("nnpSteuernummer", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNnpFirmenname() == null && bsb_after.getNnpFirmenname() == null)) && ((bsb_before
                    .getNnpFirmenname() == null && !rtrim(bsb_after.getNnpFirmenname()).equals(null))
                    || (bsb_after.getNnpFirmenname() == null && !(bsb_before.getNnpFirmenname()).equals(null))
                    || (bsb_before.getNnpFirmenname() != null && bsb_after.getNnpFirmenname() != null
                            && !(rtrim(bsb_before.getNnpFirmenname()).equals(rtrim(bsb_after.getNnpFirmenname())))))) {

                diffMap.clear();

                if (bsb_before.getNnpFirmenname() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNnpFirmenname()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNnpFirmenname() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNnpFirmenname()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("nnpFirmenname", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNnpTyp() == null && bsb_after.getNnpTyp() == null))
                    && ((bsb_before.getNnpTyp() == null && !rtrim(bsb_after.getNnpTyp()).equals(null))
                            || (bsb_after.getNnpTyp() == null && !(bsb_before.getNnpTyp()).equals(null))
                            || (bsb_before.getNnpTyp() != null && bsb_after.getNnpTyp() != null
                                    && !(rtrim(bsb_before.getNnpTyp()).equals(rtrim(bsb_after.getNnpTyp())))))) {

                diffMap.clear();

                if (bsb_before.getNnpTyp() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNnpTyp()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNnpTyp() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNnpTyp()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("nnpTyp", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNnpAusPersstId() == null && bsb_after.getNnpAusPersstId() == null))
                    && ((bsb_before.getNnpAusPersstId() == null && !rtrim(bsb_after.getNnpAusPersstId()).equals(null))
                            || (bsb_after.getNnpAusPersstId() == null && !(bsb_before.getNnpAusPersstId()).equals(null))
                            || (bsb_before.getNnpAusPersstId() != null && bsb_after.getNnpAusPersstId() != null
                                    && !(rtrim(bsb_before.getNnpAusPersstId())
                                            .equals(rtrim(bsb_after.getNnpAusPersstId())))))) {

                diffMap.clear();

                if (bsb_before.getNnpAusPersstId() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNnpAusPersstId()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNnpAusPersstId() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNnpAusPersstId()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("nnpAusPersstId", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("NichtNaturlichePerson")) {
            sectionMap.get("NichtNaturlichePerson").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("NichtNaturlichePerson", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed NichtNaturlichePerson");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBetroffenerFallAdresse(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getStrasse() != null) {

                diffMap.put("after", rtrim(bsb_after.getStrasse()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("strasse", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getHausnummer() != null) {

                diffMap.put("after", bsb_after.getHausnummer());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("hausnummer", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getHausnummerZus() != null) {

                diffMap.put("after", rtrim(bsb_after.getHausnummerZus()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("hausnummerZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAdressergaenzung() != null) {

                diffMap.put("after", rtrim(bsb_after.getAdressergaenzung()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("adressergaenzung", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getOrt() != null) {

                diffMap.put("after", rtrim(bsb_after.getOrt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("ort", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getPlz() != null) {

                diffMap.put("after", bsb_after.getPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("plz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAuslandsplz() != null) {

                diffMap.put("after", rtrim(bsb_after.getAuslandsplz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("auslandsplz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getStaatSchl() != null) {

                diffMap.put("after", rtrim(bsb_after.getStaatSchl()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("staatSchl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getLand() != null) {

                diffMap.put("after", rtrim(bsb_after.getLand()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("land", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getPostfach() != null) {

                diffMap.put("after", bsb_after.getPostfach());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("postfach", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getPfPlz() != null) {

                diffMap.put("after", bsb_after.getPfPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pfPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getPfWohnort() != null) {

                diffMap.put("after", rtrim(bsb_after.getPfWohnort()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pfWohnort", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getStrasse() != null) {

                diffMap.put("before", rtrim(bsb_before.getStrasse()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("strasse", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getHausnummer() != null) {

                diffMap.put("before", bsb_before.getHausnummer());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("hausnummer", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getHausnummerZus() != null) {

                diffMap.put("before", rtrim(bsb_before.getHausnummerZus()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("hausnummerZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAdressergaenzung() != null) {

                diffMap.put("before", rtrim(bsb_before.getAdressergaenzung()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("adressergaenzung", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getOrt() != null) {

                diffMap.put("before", rtrim(bsb_before.getOrt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ort", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getPlz() != null) {

                diffMap.put("before", bsb_before.getPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("plz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAuslandsplz() != null) {

                diffMap.put("before", rtrim(bsb_before.getAuslandsplz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("auslandsplz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getStaatSchl() != null) {

                diffMap.put("before", rtrim(bsb_before.getStaatSchl()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("staatSchl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getLand() != null) {

                diffMap.put("before", rtrim(bsb_before.getLand()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("land", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getPostfach() != null) {

                diffMap.put("before", bsb_before.getPostfach());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("postfach", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getPfPlz() != null) {

                diffMap.put("before", bsb_before.getPfPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pfPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getPfWohnort() != null) {

                diffMap.put("before", rtrim(bsb_before.getPfWohnort()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pfWohnort", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getStrasse() == null && bsb_after.getStrasse() == null))
                    && ((bsb_before.getStrasse() == null && !rtrim(bsb_after.getStrasse()).equals(null))
                            || (bsb_after.getStrasse() == null && !(bsb_before.getStrasse()).equals(null))
                            || (bsb_before.getStrasse() != null && bsb_after.getStrasse() != null
                                    && !(rtrim(bsb_before.getStrasse()).equals(rtrim(bsb_after.getStrasse())))))) {

                diffMap.clear();

                if (bsb_before.getStrasse() != null) {

                    diffMap.put("before", rtrim(bsb_before.getStrasse()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getStrasse() != null) {

                    diffMap.put("after", rtrim(bsb_after.getStrasse()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("strasse", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getHausnummer() != null || bsb_after.getHausnummer() != null)
                    && ((bsb_before.getHausnummer() == null && bsb_after.getHausnummer() != null)
                            || (bsb_after.getHausnummer() == null && bsb_before.getHausnummer() != null)
                            || (bsb_before.getHausnummer() != null && bsb_after.getHausnummer() != null
                                    && bsb_before.getHausnummer().compareTo(bsb_after.getHausnummer()) != 0))) {

                diffMap.clear();

                if (bsb_before.getHausnummer() != null) {

                    diffMap.put("before", bsb_before.getHausnummer());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getHausnummer());
                fieldMap.put("hausnummer", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getHausnummerZus() == null && bsb_after.getHausnummerZus() == null)) && ((bsb_before
                    .getHausnummerZus() == null && !rtrim(bsb_after.getHausnummerZus()).equals(null))
                    || (bsb_after.getHausnummerZus() == null && !(bsb_before.getHausnummerZus()).equals(null))
                    || (bsb_before.getHausnummerZus() != null && bsb_after.getHausnummerZus() != null
                            && !(rtrim(bsb_before.getHausnummerZus()).equals(rtrim(bsb_after.getHausnummerZus())))))) {

                diffMap.clear();

                if (bsb_before.getHausnummerZus() != null) {

                    diffMap.put("before", rtrim(bsb_before.getHausnummerZus()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getHausnummerZus() != null) {

                    diffMap.put("after", rtrim(bsb_after.getHausnummerZus()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("hausnummerZus", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAdressergaenzung() == null && bsb_after.getAdressergaenzung() == null))
                    && ((bsb_before.getAdressergaenzung() == null
                            && !rtrim(bsb_after.getAdressergaenzung()).equals(null))
                            || (bsb_after.getAdressergaenzung() == null
                                    && !(bsb_before.getAdressergaenzung()).equals(null))
                            || (bsb_before.getAdressergaenzung() != null && bsb_after.getAdressergaenzung() != null
                                    && !(rtrim(bsb_before.getAdressergaenzung())
                                            .equals(rtrim(bsb_after.getAdressergaenzung())))))) {

                diffMap.clear();

                if (bsb_before.getAdressergaenzung() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAdressergaenzung()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAdressergaenzung() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAdressergaenzung()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("adressergaenzung", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getOrt() == null && bsb_after.getOrt() == null))
                    && ((bsb_before.getOrt() == null && !rtrim(bsb_after.getOrt()).equals(null))
                            || (bsb_after.getOrt() == null && !(bsb_before.getOrt()).equals(null))
                            || (bsb_before.getOrt() != null && bsb_after.getOrt() != null
                                    && !(rtrim(bsb_before.getOrt()).equals(rtrim(bsb_after.getOrt())))))) {

                diffMap.clear();

                if (bsb_before.getOrt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getOrt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getOrt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getOrt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("ort", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getPlz() != null || bsb_after.getPlz() != null)
                    && ((bsb_before.getPlz() == null && bsb_after.getPlz() != null)
                            || (bsb_after.getPlz() == null && bsb_before.getPlz() != null)
                            || (bsb_before.getPlz() != null && bsb_after.getPlz() != null
                                    && bsb_before.getPlz().compareTo(bsb_after.getPlz()) != 0))) {

                diffMap.clear();

                if (bsb_before.getPlz() != null) {

                    diffMap.put("before", bsb_before.getPlz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getPlz());
                fieldMap.put("plz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAuslandsplz() == null && bsb_after.getAuslandsplz() == null)) && ((bsb_before
                    .getAuslandsplz() == null && !rtrim(bsb_after.getAuslandsplz()).equals(null))
                    || (bsb_after.getAuslandsplz() == null && !(bsb_before.getAuslandsplz()).equals(null))
                    || (bsb_before.getAuslandsplz() != null && bsb_after.getAuslandsplz() != null
                            && !(rtrim(bsb_before.getAuslandsplz()).equals(rtrim(bsb_after.getAuslandsplz())))))) {

                diffMap.clear();

                if (bsb_before.getAuslandsplz() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAuslandsplz()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAuslandsplz() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAuslandsplz()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("auslandsplz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getStaatSchl() == null && bsb_after.getStaatSchl() == null))
                    && ((bsb_before.getStaatSchl() == null && !rtrim(bsb_after.getStaatSchl()).equals(null))
                            || (bsb_after.getStaatSchl() == null && !(bsb_before.getStaatSchl()).equals(null))
                            || (bsb_before.getStaatSchl() != null && bsb_after.getStaatSchl() != null
                                    && !(rtrim(bsb_before.getStaatSchl()).equals(rtrim(bsb_after.getStaatSchl())))))) {

                diffMap.clear();

                if (bsb_before.getStaatSchl() != null) {

                    diffMap.put("before", rtrim(bsb_before.getStaatSchl()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getStaatSchl() != null) {

                    diffMap.put("after", rtrim(bsb_after.getStaatSchl()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("staatSchl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getLand() == null && bsb_after.getLand() == null))
                    && ((bsb_before.getLand() == null && !rtrim(bsb_after.getLand()).equals(null))
                            || (bsb_after.getLand() == null && !(bsb_before.getLand()).equals(null))
                            || (bsb_before.getLand() != null && bsb_after.getLand() != null
                                    && !(rtrim(bsb_before.getLand()).equals(rtrim(bsb_after.getLand())))))) {

                diffMap.clear();

                if (bsb_before.getLand() != null) {

                    diffMap.put("before", rtrim(bsb_before.getLand()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getLand() != null) {

                    diffMap.put("after", rtrim(bsb_after.getLand()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("land", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getPostfach() != null || bsb_after.getPostfach() != null)
                    && ((bsb_before.getPostfach() == null && bsb_after.getPostfach() != null)
                            || (bsb_after.getPostfach() == null && bsb_before.getPostfach() != null)
                            || (bsb_before.getPostfach() != null && bsb_after.getPostfach() != null
                                    && bsb_before.getPostfach().compareTo(bsb_after.getPostfach()) != 0))) {

                diffMap.clear();

                if (bsb_before.getPostfach() != null) {

                    diffMap.put("before", bsb_before.getPostfach());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getPostfach());
                fieldMap.put("postfach", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getPfPlz() != null || bsb_after.getPfPlz() != null)
                    && ((bsb_before.getPfPlz() == null && bsb_after.getPfPlz() != null)
                            || (bsb_after.getPfPlz() == null && bsb_before.getPfPlz() != null)
                            || (bsb_before.getPfPlz() != null && bsb_after.getPfPlz() != null
                                    && bsb_before.getPfPlz().compareTo(bsb_after.getPfPlz()) != 0))) {

                diffMap.clear();

                if (bsb_before.getPfPlz() != null) {

                    diffMap.put("before", bsb_before.getPfPlz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getPfPlz());
                fieldMap.put("pfPlz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getPfWohnort() == null && bsb_after.getPfWohnort() == null))
                    && ((bsb_before.getPfWohnort() == null && !rtrim(bsb_after.getPfWohnort()).equals(null))
                            || (bsb_after.getPfWohnort() == null && !(bsb_before.getPfWohnort()).equals(null))
                            || (bsb_before.getPfWohnort() != null && bsb_after.getPfWohnort() != null
                                    && !(rtrim(bsb_before.getPfWohnort()).equals(rtrim(bsb_after.getPfWohnort())))))) {

                diffMap.clear();

                if (bsb_before.getPfWohnort() != null) {

                    diffMap.put("before", rtrim(bsb_before.getPfWohnort()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getPfWohnort() != null) {

                    diffMap.put("after", rtrim(bsb_after.getPfWohnort()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("pfWohnort", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("BetroffenerFallAdresse")) {
            sectionMap.get("BetroffenerFallAdresse").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("BetroffenerFallAdresse", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed BetroffenerFallAdresse");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBetroffenerFall(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getMeldejahr() != null) {

                diffMap.put("after", bsb_after.getMeldejahr());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("meldejahr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getArt() != null) {

                diffMap.put("after", rtrim(bsb_after.getArt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("art", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getOrdnungsbegriff() != null) {

                diffMap.put("after", rtrim(bsb_after.getOrdnungsbegriff()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("ordnungsbegriff", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getMeldejahr() != null) {

                diffMap.put("before", bsb_before.getMeldejahr());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("meldejahr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getArt() != null) {

                diffMap.put("before", rtrim(bsb_before.getArt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("art", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getOrdnungsbegriff() != null) {

                diffMap.put("before", rtrim(bsb_before.getOrdnungsbegriff()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ordnungsbegriff", new HashMap<>(diffMap));
        } else {

            if ((bsb_before.getMeldejahr() != null || bsb_after.getMeldejahr() != null)
                    && ((bsb_before.getMeldejahr() == null && bsb_after.getMeldejahr() != null)
                            || (bsb_after.getMeldejahr() == null && bsb_before.getMeldejahr() != null)
                            || (bsb_before.getMeldejahr() != null && bsb_after.getMeldejahr() != null
                                    && bsb_before.getMeldejahr().compareTo(bsb_after.getMeldejahr()) != 0))) {

                diffMap.clear();

                if (bsb_before.getMeldejahr() != null) {

                    diffMap.put("before", bsb_before.getMeldejahr());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getMeldejahr());
                fieldMap.put("meldejahr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getArt() == null && bsb_after.getArt() == null))
                    && ((bsb_before.getArt() == null && !rtrim(bsb_after.getArt()).equals(null))
                            || (bsb_after.getArt() == null && !(bsb_before.getArt()).equals(null))
                            || (bsb_before.getArt() != null && bsb_after.getArt() != null
                                    && !(rtrim(bsb_before.getArt()).equals(rtrim(bsb_after.getArt())))))) {

                diffMap.clear();

                if (bsb_before.getArt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getArt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getArt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getArt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("art", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getOrdnungsbegriff() == null && bsb_after.getOrdnungsbegriff() == null))
                    && ((bsb_before.getOrdnungsbegriff() == null && !rtrim(bsb_after.getOrdnungsbegriff()).equals(null))
                            || (bsb_after.getOrdnungsbegriff() == null
                                    && !(bsb_before.getOrdnungsbegriff()).equals(null))
                            || (bsb_before.getOrdnungsbegriff() != null && bsb_after.getOrdnungsbegriff() != null
                                    && !(rtrim(bsb_before.getOrdnungsbegriff())
                                            .equals(rtrim(bsb_after.getOrdnungsbegriff())))))) {

                diffMap.clear();

                if (bsb_before.getOrdnungsbegriff() != null) {

                    diffMap.put("before", rtrim(bsb_before.getOrdnungsbegriff()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getOrdnungsbegriff() != null) {

                    diffMap.put("after", rtrim(bsb_after.getOrdnungsbegriff()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("ordnungsbegriff", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("BetroffenerFall")) {
            sectionMap.get("BetroffenerFall").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("BetroffenerFall", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed BetroffenerFall");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffNaturlichePerson1(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getNp1Geschlecht() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Geschlecht()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Geschlecht", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Idnr() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Idnr()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Idnr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Nationalitaet() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Nationalitaet()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Nationalitaet", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Name() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Name()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Name", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Vorname() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Vorname()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Vorname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Namensvorsatz() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Namensvorsatz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Namensvorsatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Namenszusatz() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Namenszusatz()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Namenszusatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Titel() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Titel()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Titel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Gebdat() != null) {

                diffMap.put("after", bsb_after.getNp1Gebdat());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Gebdat", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Geburtsname() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Geburtsname()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Geburtsname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1GebnameVors() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1GebnameVors()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1GebnameVors", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1GebnameZus() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1GebnameZus()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1GebnameZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Geburtsort() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Geburtsort()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Geburtsort", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1GeburtslandSl() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1GeburtslandSl()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1GeburtslandSl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Geburtsland() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Geburtsland()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Geburtsland", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1AuswandDatum() != null) {

                diffMap.put("after", bsb_after.getNp1AuswandDatum());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1AuswandDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1SterbeDatum() != null) {

                diffMap.put("after", bsb_after.getNp1SterbeDatum());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1SterbeDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1Typ() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1Typ()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1Typ", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getNp1AuslPersstId() != null) {

                diffMap.put("after", rtrim(bsb_after.getNp1AuslPersstId()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("np1AuslPersstId", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getNp1Geschlecht() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Geschlecht()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Geschlecht", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Idnr() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Idnr()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Idnr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Nationalitaet() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Nationalitaet()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Nationalitaet", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Name() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Name()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Name", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Vorname() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Vorname()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Vorname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Namensvorsatz() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Namensvorsatz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Namensvorsatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Namenszusatz() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Namenszusatz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Namenszusatz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Titel() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Titel()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Titel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Gebdat() != null) {

                diffMap.put("before", bsb_before.getNp1Gebdat());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Gebdat", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Geburtsname() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Geburtsname()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Geburtsname", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1GebnameVors() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1GebnameVors()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1GebnameVors", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1GebnameZus() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1GebnameZus()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1GebnameZus", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Geburtsort() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Geburtsort()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Geburtsort", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1GeburtslandSl() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1GeburtslandSl()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1GeburtslandSl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Geburtsland() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Geburtsland()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Geburtsland", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1AuswandDatum() != null) {

                diffMap.put("before", bsb_before.getNp1AuswandDatum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1AuswandDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1SterbeDatum() != null) {

                diffMap.put("before", bsb_before.getNp1SterbeDatum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1SterbeDatum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1Typ() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1Typ()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1Typ", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getNp1AuslPersstId() != null) {

                diffMap.put("before", rtrim(bsb_before.getNp1AuslPersstId()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("np1AuslPersstId", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getNp1Geschlecht() == null && bsb_after.getNp1Geschlecht() == null)) && ((bsb_before
                    .getNp1Geschlecht() == null && !rtrim(bsb_after.getNp1Geschlecht()).equals(null))
                    || (bsb_after.getNp1Geschlecht() == null && !(bsb_before.getNp1Geschlecht()).equals(null))
                    || (bsb_before.getNp1Geschlecht() != null && bsb_after.getNp1Geschlecht() != null
                            && !(rtrim(bsb_before.getNp1Geschlecht()).equals(rtrim(bsb_after.getNp1Geschlecht())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Geschlecht() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Geschlecht()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Geschlecht() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Geschlecht()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Geschlecht", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Idnr() == null && bsb_after.getNp1Idnr() == null))
                    && ((bsb_before.getNp1Idnr() == null && !rtrim(bsb_after.getNp1Idnr()).equals(null))
                            || (bsb_after.getNp1Idnr() == null && !(bsb_before.getNp1Idnr()).equals(null))
                            || (bsb_before.getNp1Idnr() != null && bsb_after.getNp1Idnr() != null
                                    && !(rtrim(bsb_before.getNp1Idnr()).equals(rtrim(bsb_after.getNp1Idnr())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Idnr() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Idnr()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Idnr() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Idnr()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Idnr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Nationalitaet() == null && bsb_after.getNp1Nationalitaet() == null))
                    && ((bsb_before.getNp1Nationalitaet() == null
                            && !rtrim(bsb_after.getNp1Nationalitaet()).equals(null))
                            || (bsb_after.getNp1Nationalitaet() == null
                                    && !(bsb_before.getNp1Nationalitaet()).equals(null))
                            || (bsb_before.getNp1Nationalitaet() != null && bsb_after.getNp1Nationalitaet() != null
                                    && !(rtrim(bsb_before.getNp1Nationalitaet())
                                            .equals(rtrim(bsb_after.getNp1Nationalitaet())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Nationalitaet() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Nationalitaet()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Nationalitaet() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Nationalitaet()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Nationalitaet", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Name() == null && bsb_after.getNp1Name() == null))
                    && ((bsb_before.getNp1Name() == null && !rtrim(bsb_after.getNp1Name()).equals(null))
                            || (bsb_after.getNp1Name() == null && !(bsb_before.getNp1Name()).equals(null))
                            || (bsb_before.getNp1Name() != null && bsb_after.getNp1Name() != null
                                    && !(rtrim(bsb_before.getNp1Name()).equals(rtrim(bsb_after.getNp1Name())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Name() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Name()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Name() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Name()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Name", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Vorname() == null && bsb_after.getNp1Vorname() == null)) && ((bsb_before
                    .getNp1Vorname() == null && !rtrim(bsb_after.getNp1Vorname()).equals(null))
                    || (bsb_after.getNp1Vorname() == null && !(bsb_before.getNp1Vorname()).equals(null))
                    || (bsb_before.getNp1Vorname() != null && bsb_after.getNp1Vorname() != null
                            && !(rtrim(bsb_before.getNp1Vorname()).equals(rtrim(bsb_after.getNp1Vorname())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Vorname() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Vorname()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Vorname() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Vorname()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Vorname", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Namensvorsatz() == null && bsb_after.getNp1Namensvorsatz() == null))
                    && ((bsb_before.getNp1Namensvorsatz() == null
                            && !rtrim(bsb_after.getNp1Namensvorsatz()).equals(null))
                            || (bsb_after.getNp1Namensvorsatz() == null
                                    && !(bsb_before.getNp1Namensvorsatz()).equals(null))
                            || (bsb_before.getNp1Namensvorsatz() != null && bsb_after.getNp1Namensvorsatz() != null
                                    && !(rtrim(bsb_before.getNp1Namensvorsatz())
                                            .equals(rtrim(bsb_after.getNp1Namensvorsatz())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Namensvorsatz() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Namensvorsatz()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Namensvorsatz() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Namensvorsatz()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Namensvorsatz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Namenszusatz() == null && bsb_after.getNp1Namenszusatz() == null))
                    && ((bsb_before.getNp1Namenszusatz() == null && !rtrim(bsb_after.getNp1Namenszusatz()).equals(null))
                            || (bsb_after.getNp1Namenszusatz() == null
                                    && !(bsb_before.getNp1Namenszusatz()).equals(null))
                            || (bsb_before.getNp1Namenszusatz() != null && bsb_after.getNp1Namenszusatz() != null
                                    && !(rtrim(bsb_before.getNp1Namenszusatz())
                                            .equals(rtrim(bsb_after.getNp1Namenszusatz())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Namenszusatz() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Namenszusatz()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Namenszusatz() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Namenszusatz()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Namenszusatz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Titel() == null && bsb_after.getNp1Titel() == null))
                    && ((bsb_before.getNp1Titel() == null && !rtrim(bsb_after.getNp1Titel()).equals(null))
                            || (bsb_after.getNp1Titel() == null && !(bsb_before.getNp1Titel()).equals(null))
                            || (bsb_before.getNp1Titel() != null && bsb_after.getNp1Titel() != null
                                    && !(rtrim(bsb_before.getNp1Titel()).equals(rtrim(bsb_after.getNp1Titel())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Titel() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Titel()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Titel() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Titel()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Titel", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getNp1Gebdat() != null || bsb_after.getNp1Gebdat() != null)
                    && ((bsb_before.getNp1Gebdat() == null && bsb_after.getNp1Gebdat() != null)
                            || (bsb_after.getNp1Gebdat() == null && bsb_before.getNp1Gebdat() != null)
                            || (bsb_before.getNp1Gebdat() != null && bsb_after.getNp1Gebdat() != null
                                    && bsb_before.getNp1Gebdat().compareTo(bsb_after.getNp1Gebdat()) != 0))) {

                diffMap.clear();

                if (bsb_before.getNp1Gebdat() != null) {

                    diffMap.put("before", bsb_before.getNp1Gebdat());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getNp1Gebdat());
                fieldMap.put("np1Gebdat", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Geburtsname() == null && bsb_after.getNp1Geburtsname() == null))
                    && ((bsb_before.getNp1Geburtsname() == null && !rtrim(bsb_after.getNp1Geburtsname()).equals(null))
                            || (bsb_after.getNp1Geburtsname() == null && !(bsb_before.getNp1Geburtsname()).equals(null))
                            || (bsb_before.getNp1Geburtsname() != null && bsb_after.getNp1Geburtsname() != null
                                    && !(rtrim(bsb_before.getNp1Geburtsname())
                                            .equals(rtrim(bsb_after.getNp1Geburtsname())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Geburtsname() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Geburtsname()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Geburtsname() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Geburtsname()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Geburtsname", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1GebnameVors() == null && bsb_after.getNp1GebnameVors() == null))
                    && ((bsb_before.getNp1GebnameVors() == null && !rtrim(bsb_after.getNp1GebnameVors()).equals(null))
                            || (bsb_after.getNp1GebnameVors() == null && !(bsb_before.getNp1GebnameVors()).equals(null))
                            || (bsb_before.getNp1GebnameVors() != null && bsb_after.getNp1GebnameVors() != null
                                    && !(rtrim(bsb_before.getNp1GebnameVors())
                                            .equals(rtrim(bsb_after.getNp1GebnameVors())))))) {

                diffMap.clear();

                if (bsb_before.getNp1GebnameVors() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1GebnameVors()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1GebnameVors() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1GebnameVors()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1GebnameVors", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1GebnameZus() == null && bsb_after.getNp1GebnameZus() == null)) && ((bsb_before
                    .getNp1GebnameZus() == null && !rtrim(bsb_after.getNp1GebnameZus()).equals(null))
                    || (bsb_after.getNp1GebnameZus() == null && !(bsb_before.getNp1GebnameZus()).equals(null))
                    || (bsb_before.getNp1GebnameZus() != null && bsb_after.getNp1GebnameZus() != null
                            && !(rtrim(bsb_before.getNp1GebnameZus()).equals(rtrim(bsb_after.getNp1GebnameZus())))))) {

                diffMap.clear();

                if (bsb_before.getNp1GebnameZus() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1GebnameZus()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1GebnameZus() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1GebnameZus()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1GebnameZus", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Geburtsort() == null && bsb_after.getNp1Geburtsort() == null)) && ((bsb_before
                    .getNp1Geburtsort() == null && !rtrim(bsb_after.getNp1Geburtsort()).equals(null))
                    || (bsb_after.getNp1Geburtsort() == null && !(bsb_before.getNp1Geburtsort()).equals(null))
                    || (bsb_before.getNp1Geburtsort() != null && bsb_after.getNp1Geburtsort() != null
                            && !(rtrim(bsb_before.getNp1Geburtsort()).equals(rtrim(bsb_after.getNp1Geburtsort())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Geburtsort() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Geburtsort()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Geburtsort() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Geburtsort()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Geburtsort", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1GeburtslandSl() == null && bsb_after.getNp1GeburtslandSl() == null))
                    && ((bsb_before.getNp1GeburtslandSl() == null
                            && !rtrim(bsb_after.getNp1GeburtslandSl()).equals(null))
                            || (bsb_after.getNp1GeburtslandSl() == null
                                    && !(bsb_before.getNp1GeburtslandSl()).equals(null))
                            || (bsb_before.getNp1GeburtslandSl() != null && bsb_after.getNp1GeburtslandSl() != null
                                    && !(rtrim(bsb_before.getNp1GeburtslandSl())
                                            .equals(rtrim(bsb_after.getNp1GeburtslandSl())))))) {

                diffMap.clear();

                if (bsb_before.getNp1GeburtslandSl() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1GeburtslandSl()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1GeburtslandSl() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1GeburtslandSl()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1GeburtslandSl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Geburtsland() == null && bsb_after.getNp1Geburtsland() == null))
                    && ((bsb_before.getNp1Geburtsland() == null && !rtrim(bsb_after.getNp1Geburtsland()).equals(null))
                            || (bsb_after.getNp1Geburtsland() == null && !(bsb_before.getNp1Geburtsland()).equals(null))
                            || (bsb_before.getNp1Geburtsland() != null && bsb_after.getNp1Geburtsland() != null
                                    && !(rtrim(bsb_before.getNp1Geburtsland())
                                            .equals(rtrim(bsb_after.getNp1Geburtsland())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Geburtsland() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Geburtsland()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Geburtsland() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Geburtsland()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Geburtsland", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getNp1AuswandDatum() != null || bsb_after.getNp1AuswandDatum() != null)
                    && ((bsb_before.getNp1AuswandDatum() == null && bsb_after.getNp1AuswandDatum() != null)
                            || (bsb_after.getNp1AuswandDatum() == null && bsb_before.getNp1AuswandDatum() != null)
                            || (bsb_before.getNp1AuswandDatum() != null && bsb_after.getNp1AuswandDatum() != null
                                    && bsb_before.getNp1AuswandDatum()
                                            .compareTo(bsb_after.getNp1AuswandDatum()) != 0))) {

                diffMap.clear();

                if (bsb_before.getNp1AuswandDatum() != null) {

                    diffMap.put("before", bsb_before.getNp1AuswandDatum());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getNp1AuswandDatum());
                fieldMap.put("np1AuswandDatum", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getNp1SterbeDatum() != null || bsb_after.getNp1SterbeDatum() != null)
                    && ((bsb_before.getNp1SterbeDatum() == null && bsb_after.getNp1SterbeDatum() != null)
                            || (bsb_after.getNp1SterbeDatum() == null && bsb_before.getNp1SterbeDatum() != null)
                            || (bsb_before.getNp1SterbeDatum() != null && bsb_after.getNp1SterbeDatum() != null
                                    && bsb_before.getNp1SterbeDatum().compareTo(bsb_after.getNp1SterbeDatum()) != 0))) {

                diffMap.clear();

                if (bsb_before.getNp1SterbeDatum() != null) {

                    diffMap.put("before", bsb_before.getNp1SterbeDatum());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getNp1SterbeDatum());
                fieldMap.put("np1SterbeDatum", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1Typ() == null && bsb_after.getNp1Typ() == null))
                    && ((bsb_before.getNp1Typ() == null && !rtrim(bsb_after.getNp1Typ()).equals(null))
                            || (bsb_after.getNp1Typ() == null && !(bsb_before.getNp1Typ()).equals(null))
                            || (bsb_before.getNp1Typ() != null && bsb_after.getNp1Typ() != null
                                    && !(rtrim(bsb_before.getNp1Typ()).equals(rtrim(bsb_after.getNp1Typ())))))) {

                diffMap.clear();

                if (bsb_before.getNp1Typ() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1Typ()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1Typ() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1Typ()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1Typ", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getNp1AuslPersstId() == null && bsb_after.getNp1AuslPersstId() == null))
                    && ((bsb_before.getNp1AuslPersstId() == null && !rtrim(bsb_after.getNp1AuslPersstId()).equals(null))
                            || (bsb_after.getNp1AuslPersstId() == null
                                    && !(bsb_before.getNp1AuslPersstId()).equals(null))
                            || (bsb_before.getNp1AuslPersstId() != null && bsb_after.getNp1AuslPersstId() != null
                                    && !(rtrim(bsb_before.getNp1AuslPersstId())
                                            .equals(rtrim(bsb_after.getNp1AuslPersstId())))))) {

                diffMap.clear();

                if (bsb_before.getNp1AuslPersstId() != null) {

                    diffMap.put("before", rtrim(bsb_before.getNp1AuslPersstId()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getNp1AuslPersstId() != null) {

                    diffMap.put("after", rtrim(bsb_after.getNp1AuslPersstId()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("np1AuslPersstId", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("NaturlichePerson1")) {
            sectionMap.get("NaturlichePerson1").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("NaturlichePerson1", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed NaturlichePerson1");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffVerfasser(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getVerfName() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfName()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfName", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfStr() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfStr()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfStr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfHsnr() != null) {

                diffMap.put("after", bsb_after.getVerfHsnr());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfHsnr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfHszu() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfHszu()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfHszu", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfAdrErg() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfAdrErg()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfAdrErg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfOrt() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfOrt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfPlz() != null) {

                diffMap.put("after", bsb_after.getVerfPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfPfNr() != null) {

                diffMap.put("after", bsb_after.getVerfPfNr());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfPfNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfPfPlz() != null) {

                diffMap.put("after", bsb_after.getVerfPfPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfPfPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfPfOrt() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfPfOrt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfPfOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfGkPlz() != null) {

                diffMap.put("after", bsb_after.getVerfGkPlz());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfGkPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfGkOrt() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfGkOrt()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfGkOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfTel() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfTel()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfTel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfEmail() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfEmail()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfEmail", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfOrdBegriff() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfOrdBegriff()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfOrdBegriff", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getVerfBic() != null) {

                diffMap.put("after", rtrim(bsb_after.getVerfBic()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("verfBic", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getVerfName() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfName()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfName", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfStr() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfStr()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfStr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfHsnr() != null) {

                diffMap.put("before", bsb_before.getVerfHsnr());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfHsnr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfHszu() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfHszu()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfHszu", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfAdrErg() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfAdrErg()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfAdrErg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfOrt() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfOrt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfPlz() != null) {

                diffMap.put("before", bsb_before.getVerfPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfPfNr() != null) {

                diffMap.put("before", bsb_before.getVerfPfNr());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfPfNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfPfPlz() != null) {

                diffMap.put("before", bsb_before.getVerfPfPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfPfPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfPfOrt() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfPfOrt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfPfOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfGkPlz() != null) {

                diffMap.put("before", bsb_before.getVerfGkPlz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfGkPlz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfGkOrt() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfGkOrt()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfGkOrt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfTel() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfTel()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfTel", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfEmail() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfEmail()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfEmail", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfOrdBegriff() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfOrdBegriff()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfOrdBegriff", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getVerfBic() != null) {

                diffMap.put("before", rtrim(bsb_before.getVerfBic()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verfBic", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getVerfName() == null && bsb_after.getVerfName() == null))
                    && ((bsb_before.getVerfName() == null && !rtrim(bsb_after.getVerfName()).equals(null))
                            || (bsb_after.getVerfName() == null && !(bsb_before.getVerfName()).equals(null))
                            || (bsb_before.getVerfName() != null && bsb_after.getVerfName() != null
                                    && !(rtrim(bsb_before.getVerfName()).equals(rtrim(bsb_after.getVerfName())))))) {

                diffMap.clear();

                if (bsb_before.getVerfName() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfName()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfName() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfName()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfName", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfStr() == null && bsb_after.getVerfStr() == null))
                    && ((bsb_before.getVerfStr() == null && !rtrim(bsb_after.getVerfStr()).equals(null))
                            || (bsb_after.getVerfStr() == null && !(bsb_before.getVerfStr()).equals(null))
                            || (bsb_before.getVerfStr() != null && bsb_after.getVerfStr() != null
                                    && !(rtrim(bsb_before.getVerfStr()).equals(rtrim(bsb_after.getVerfStr())))))) {

                diffMap.clear();

                if (bsb_before.getVerfStr() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfStr()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfStr() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfStr()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfStr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getVerfHsnr() != null || bsb_after.getVerfHsnr() != null)
                    && ((bsb_before.getVerfHsnr() == null && bsb_after.getVerfHsnr() != null)
                            || (bsb_after.getVerfHsnr() == null && bsb_before.getVerfHsnr() != null)
                            || (bsb_before.getVerfHsnr() != null && bsb_after.getVerfHsnr() != null
                                    && bsb_before.getVerfHsnr().compareTo(bsb_after.getVerfHsnr()) != 0))) {

                diffMap.clear();

                if (bsb_before.getVerfHsnr() != null) {

                    diffMap.put("before", bsb_before.getVerfHsnr());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getVerfHsnr());
                fieldMap.put("verfHsnr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfHszu() == null && bsb_after.getVerfHszu() == null))
                    && ((bsb_before.getVerfHszu() == null && !rtrim(bsb_after.getVerfHszu()).equals(null))
                            || (bsb_after.getVerfHszu() == null && !(bsb_before.getVerfHszu()).equals(null))
                            || (bsb_before.getVerfHszu() != null && bsb_after.getVerfHszu() != null
                                    && !(rtrim(bsb_before.getVerfHszu()).equals(rtrim(bsb_after.getVerfHszu())))))) {

                diffMap.clear();

                if (bsb_before.getVerfHszu() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfHszu()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfHszu() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfHszu()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfHszu", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfAdrErg() == null && bsb_after.getVerfAdrErg() == null)) && ((bsb_before
                    .getVerfAdrErg() == null && !rtrim(bsb_after.getVerfAdrErg()).equals(null))
                    || (bsb_after.getVerfAdrErg() == null && !(bsb_before.getVerfAdrErg()).equals(null))
                    || (bsb_before.getVerfAdrErg() != null && bsb_after.getVerfAdrErg() != null
                            && !(rtrim(bsb_before.getVerfAdrErg()).equals(rtrim(bsb_after.getVerfAdrErg())))))) {

                diffMap.clear();

                if (bsb_before.getVerfAdrErg() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfAdrErg()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfAdrErg() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfAdrErg()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfAdrErg", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfOrt() == null && bsb_after.getVerfOrt() == null))
                    && ((bsb_before.getVerfOrt() == null && !rtrim(bsb_after.getVerfOrt()).equals(null))
                            || (bsb_after.getVerfOrt() == null && !(bsb_before.getVerfOrt()).equals(null))
                            || (bsb_before.getVerfOrt() != null && bsb_after.getVerfOrt() != null
                                    && !(rtrim(bsb_before.getVerfOrt()).equals(rtrim(bsb_after.getVerfOrt())))))) {

                diffMap.clear();

                if (bsb_before.getVerfOrt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfOrt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfOrt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfOrt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfOrt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getVerfPlz() != null || bsb_after.getVerfPlz() != null)
                    && ((bsb_before.getVerfPlz() == null && bsb_after.getVerfPlz() != null)
                            || (bsb_after.getVerfPlz() == null && bsb_before.getVerfPlz() != null)
                            || (bsb_before.getVerfPlz() != null && bsb_after.getVerfPlz() != null
                                    && bsb_before.getVerfPlz().compareTo(bsb_after.getVerfPlz()) != 0))) {

                diffMap.clear();

                if (bsb_before.getVerfPlz() != null) {

                    diffMap.put("before", bsb_before.getVerfPlz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getVerfPlz());
                fieldMap.put("verfPlz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getVerfPfNr() != null || bsb_after.getVerfPfNr() != null)
                    && ((bsb_before.getVerfPfNr() == null && bsb_after.getVerfPfNr() != null)
                            || (bsb_after.getVerfPfNr() == null && bsb_before.getVerfPfNr() != null)
                            || (bsb_before.getVerfPfNr() != null && bsb_after.getVerfPfNr() != null
                                    && bsb_before.getVerfPfNr().compareTo(bsb_after.getVerfPfNr()) != 0))) {

                diffMap.clear();

                if (bsb_before.getVerfPfNr() != null) {

                    diffMap.put("before", bsb_before.getVerfPfNr());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getVerfPfNr());
                fieldMap.put("verfPfNr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getVerfPfPlz() != null || bsb_after.getVerfPfPlz() != null)
                    && ((bsb_before.getVerfPfPlz() == null && bsb_after.getVerfPfPlz() != null)
                            || (bsb_after.getVerfPfPlz() == null && bsb_before.getVerfPfPlz() != null)
                            || (bsb_before.getVerfPfPlz() != null && bsb_after.getVerfPfPlz() != null
                                    && bsb_before.getVerfPfPlz().compareTo(bsb_after.getVerfPfPlz()) != 0))) {

                diffMap.clear();

                if (bsb_before.getVerfPfPlz() != null) {

                    diffMap.put("before", bsb_before.getVerfPfPlz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getVerfPfPlz());
                fieldMap.put("verfPfPlz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfPfOrt() == null && bsb_after.getVerfPfOrt() == null))
                    && ((bsb_before.getVerfPfOrt() == null && !rtrim(bsb_after.getVerfPfOrt()).equals(null))
                            || (bsb_after.getVerfPfOrt() == null && !(bsb_before.getVerfPfOrt()).equals(null))
                            || (bsb_before.getVerfPfOrt() != null && bsb_after.getVerfPfOrt() != null
                                    && !(rtrim(bsb_before.getVerfPfOrt()).equals(rtrim(bsb_after.getVerfPfOrt())))))) {

                diffMap.clear();

                if (bsb_before.getVerfPfOrt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfPfOrt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfPfOrt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfPfOrt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfPfOrt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getVerfGkPlz() != null || bsb_after.getVerfGkPlz() != null)
                    && ((bsb_before.getVerfGkPlz() == null && bsb_after.getVerfGkPlz() != null)
                            || (bsb_after.getVerfGkPlz() == null && bsb_before.getVerfGkPlz() != null)
                            || (bsb_before.getVerfGkPlz() != null && bsb_after.getVerfGkPlz() != null
                                    && bsb_before.getVerfGkPlz().compareTo(bsb_after.getVerfGkPlz()) != 0))) {

                diffMap.clear();

                if (bsb_before.getVerfGkPlz() != null) {

                    diffMap.put("before", bsb_before.getVerfGkPlz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getVerfGkPlz());
                fieldMap.put("verfGkPlz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfGkOrt() == null && bsb_after.getVerfGkOrt() == null))
                    && ((bsb_before.getVerfGkOrt() == null && !rtrim(bsb_after.getVerfGkOrt()).equals(null))
                            || (bsb_after.getVerfGkOrt() == null && !(bsb_before.getVerfGkOrt()).equals(null))
                            || (bsb_before.getVerfGkOrt() != null && bsb_after.getVerfGkOrt() != null
                                    && !(rtrim(bsb_before.getVerfGkOrt()).equals(rtrim(bsb_after.getVerfGkOrt())))))) {

                diffMap.clear();

                if (bsb_before.getVerfGkOrt() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfGkOrt()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfGkOrt() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfGkOrt()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfGkOrt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfTel() == null && bsb_after.getVerfTel() == null))
                    && ((bsb_before.getVerfTel() == null && !rtrim(bsb_after.getVerfTel()).equals(null))
                            || (bsb_after.getVerfTel() == null && !(bsb_before.getVerfTel()).equals(null))
                            || (bsb_before.getVerfTel() != null && bsb_after.getVerfTel() != null
                                    && !(rtrim(bsb_before.getVerfTel()).equals(rtrim(bsb_after.getVerfTel())))))) {

                diffMap.clear();

                if (bsb_before.getVerfTel() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfTel()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfTel() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfTel()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfTel", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfEmail() == null && bsb_after.getVerfEmail() == null))
                    && ((bsb_before.getVerfEmail() == null && !rtrim(bsb_after.getVerfEmail()).equals(null))
                            || (bsb_after.getVerfEmail() == null && !(bsb_before.getVerfEmail()).equals(null))
                            || (bsb_before.getVerfEmail() != null && bsb_after.getVerfEmail() != null
                                    && !(rtrim(bsb_before.getVerfEmail()).equals(rtrim(bsb_after.getVerfEmail())))))) {

                diffMap.clear();

                if (bsb_before.getVerfEmail() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfEmail()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfEmail() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfEmail()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfEmail", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfOrdBegriff() == null && bsb_after.getVerfOrdBegriff() == null))
                    && ((bsb_before.getVerfOrdBegriff() == null && !rtrim(bsb_after.getVerfOrdBegriff()).equals(null))
                            || (bsb_after.getVerfOrdBegriff() == null && !(bsb_before.getVerfOrdBegriff()).equals(null))
                            || (bsb_before.getVerfOrdBegriff() != null && bsb_after.getVerfOrdBegriff() != null
                                    && !(rtrim(bsb_before.getVerfOrdBegriff())
                                            .equals(rtrim(bsb_after.getVerfOrdBegriff())))))) {

                diffMap.clear();

                if (bsb_before.getVerfOrdBegriff() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfOrdBegriff()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfOrdBegriff() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfOrdBegriff()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfOrdBegriff", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getVerfBic() == null && bsb_after.getVerfBic() == null))
                    && ((bsb_before.getVerfBic() == null && !rtrim(bsb_after.getVerfBic()).equals(null))
                            || (bsb_after.getVerfBic() == null && !(bsb_before.getVerfBic()).equals(null))
                            || (bsb_before.getVerfBic() != null && bsb_after.getVerfBic() != null
                                    && !(rtrim(bsb_before.getVerfBic()).equals(rtrim(bsb_after.getVerfBic())))))) {

                diffMap.clear();

                if (bsb_before.getVerfBic() != null) {

                    diffMap.put("before", rtrim(bsb_before.getVerfBic()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getVerfBic() != null) {

                    diffMap.put("after", rtrim(bsb_after.getVerfBic()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verfBic", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Verfasser")) {
            sectionMap.get("Verfasser").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Verfasser", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Verfasser");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffAllgemeinerTeilBerichtigteSteuerbescheinigungBSB(TrTableBsb bsb_before,
            TrTableBsb bsb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (bsb_before == null) {

            diffMap.clear();

            if (bsb_after.getSteuerauslaender() != null) {

                diffMap.put("after", rtrim(bsb_after.getSteuerauslaender()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("steuerauslaender", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAusstellungsdat() != null) {

                diffMap.put("after", bsb_after.getAusstellungsdat());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("ausstellungsdat", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getAnlass() != null) {

                diffMap.put("after", rtrim(bsb_after.getAnlass()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("anlass", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getErgaenzendeStb() != null) {

                diffMap.put("after", rtrim(bsb_after.getErgaenzendeStb()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("ergaenzendeStb", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_after.getWeitereErlaueterg() != null) {

                diffMap.put("after", rtrim(bsb_after.getWeitereErlaueterg()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("weitereErlaueterg", new HashMap<>(diffMap));
        } else if (bsb_after == null) {

            diffMap.clear();

            if (bsb_before.getSteuerauslaender() != null) {

                diffMap.put("before", rtrim(bsb_before.getSteuerauslaender()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("steuerauslaender", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAusstellungsdat() != null) {

                diffMap.put("before", bsb_before.getAusstellungsdat());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ausstellungsdat", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getAnlass() != null) {

                diffMap.put("before", rtrim(bsb_before.getAnlass()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("anlass", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getErgaenzendeStb() != null) {

                diffMap.put("before", rtrim(bsb_before.getErgaenzendeStb()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ergaenzendeStb", new HashMap<>(diffMap));

            diffMap.clear();

            if (bsb_before.getWeitereErlaueterg() != null) {

                diffMap.put("before", rtrim(bsb_before.getWeitereErlaueterg()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("weitereErlaueterg", new HashMap<>(diffMap));
        } else {

            if ((!(bsb_before.getSteuerauslaender() == null && bsb_after.getSteuerauslaender() == null))
                    && ((bsb_before.getSteuerauslaender() == null
                            && !rtrim(bsb_after.getSteuerauslaender()).equals(null))
                            || (bsb_after.getSteuerauslaender() == null
                                    && !(bsb_before.getSteuerauslaender()).equals(null))
                            || (bsb_before.getSteuerauslaender() != null && bsb_after.getSteuerauslaender() != null
                                    && !(rtrim(bsb_before.getSteuerauslaender())
                                            .equals(rtrim(bsb_after.getSteuerauslaender())))))) {

                diffMap.clear();

                if (bsb_before.getSteuerauslaender() != null) {

                    diffMap.put("before", rtrim(bsb_before.getSteuerauslaender()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getSteuerauslaender() != null) {

                    diffMap.put("after", rtrim(bsb_after.getSteuerauslaender()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("steuerauslaender", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bsb_before.getAusstellungsdat() != null || bsb_after.getAusstellungsdat() != null)
                    && ((bsb_before.getAusstellungsdat() == null && bsb_after.getAusstellungsdat() != null)
                            || (bsb_after.getAusstellungsdat() == null && bsb_before.getAusstellungsdat() != null)
                            || (bsb_before.getAusstellungsdat() != null && bsb_after.getAusstellungsdat() != null
                                    && bsb_before.getAusstellungsdat()
                                            .compareTo(bsb_after.getAusstellungsdat()) != 0))) {

                diffMap.clear();

                if (bsb_before.getAusstellungsdat() != null) {

                    diffMap.put("before", bsb_before.getAusstellungsdat());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bsb_after.getAusstellungsdat());
                fieldMap.put("ausstellungsdat", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getAnlass() == null && bsb_after.getAnlass() == null))
                    && ((bsb_before.getAnlass() == null && !rtrim(bsb_after.getAnlass()).equals(null))
                            || (bsb_after.getAnlass() == null && !(bsb_before.getAnlass()).equals(null))
                            || (bsb_before.getAnlass() != null && bsb_after.getAnlass() != null
                                    && !(rtrim(bsb_before.getAnlass()).equals(rtrim(bsb_after.getAnlass())))))) {

                diffMap.clear();

                if (bsb_before.getAnlass() != null) {

                    diffMap.put("before", rtrim(bsb_before.getAnlass()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getAnlass() != null) {

                    diffMap.put("after", rtrim(bsb_after.getAnlass()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("anlass", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getErgaenzendeStb() == null && bsb_after.getErgaenzendeStb() == null))
                    && ((bsb_before.getErgaenzendeStb() == null && !rtrim(bsb_after.getErgaenzendeStb()).equals(null))
                            || (bsb_after.getErgaenzendeStb() == null && !(bsb_before.getErgaenzendeStb()).equals(null))
                            || (bsb_before.getErgaenzendeStb() != null && bsb_after.getErgaenzendeStb() != null
                                    && !(rtrim(bsb_before.getErgaenzendeStb())
                                            .equals(rtrim(bsb_after.getErgaenzendeStb())))))) {

                diffMap.clear();

                if (bsb_before.getErgaenzendeStb() != null) {

                    diffMap.put("before", rtrim(bsb_before.getErgaenzendeStb()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getErgaenzendeStb() != null) {

                    diffMap.put("after", rtrim(bsb_after.getErgaenzendeStb()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("ergaenzendeStb", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bsb_before.getWeitereErlaueterg() == null && bsb_after.getWeitereErlaueterg() == null))
                    && ((bsb_before.getWeitereErlaueterg() == null
                            && !rtrim(bsb_after.getWeitereErlaueterg()).equals(null))
                            || (bsb_after.getWeitereErlaueterg() == null
                                    && !(bsb_before.getWeitereErlaueterg()).equals(null))
                            || (bsb_before.getWeitereErlaueterg() != null && bsb_after.getWeitereErlaueterg() != null
                                    && !(rtrim(bsb_before.getWeitereErlaueterg())
                                            .equals(rtrim(bsb_after.getWeitereErlaueterg())))))) {

                diffMap.clear();

                if (bsb_before.getWeitereErlaueterg() != null) {

                    diffMap.put("before", rtrim(bsb_before.getWeitereErlaueterg()));
                } else {
                    diffMap.put("before", null);
                }
                if (bsb_after.getWeitereErlaueterg() != null) {

                    diffMap.put("after", rtrim(bsb_after.getWeitereErlaueterg()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("weitereErlaueterg", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AllgemeinerTeilBerichtigteSteuerbescheinigung")) {
            sectionMap.get("AllgemeinerTeilBerichtigteSteuerbescheinigung").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AllgemeinerTeilBerichtigteSteuerbescheinigung", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AllgemeinerTeilBerichtigteSteuerbescheinigung");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BSB") != null) {
                rootMap.get("TR_TABLE_BSB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BSB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Bm1 Sections
    private BsbPairWithChangedFlag getDiffAllgemeinMusterI(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (bm1_before == null) {

            if (!StringUtils.isEmpty(bm1_after.getTrTableBm1PK().getKeySatzart())) {

                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getTrTableBm1PK().getKeySatzart())) {
                    diffMap.put("after", rtrim(bm1_after.getTrTableBm1PK().getKeySatzart()));
                } else {
                    diffMap.put("after", bm1_after.getTrTableBm1PK().getKeySatzart());
                }
            } else {
                diffMap.put("after", "");
            }

            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm1_after.getStornierung())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getStornierung())) {
                    diffMap.put("after", rtrim(bm1_after.getStornierung()));
                } else {
                    diffMap.put("after", bm1_after.getStornierung());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("stornierung", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm1_after.getOrdnungsnummer())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getOrdnungsnummer())) {
                    diffMap.put("after", rtrim(bm1_after.getOrdnungsnummer()));
                } else {
                    diffMap.put("after", bm1_after.getOrdnungsnummer());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("ordnungsnummer", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm1_after.getPrivat())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getPrivat())) {
                    diffMap.put("after", rtrim(bm1_after.getPrivat()));
                } else {
                    diffMap.put("after", bm1_after.getPrivat());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("privat", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm1_after.getVerlustbesch())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getVerlustbesch())) {
                    diffMap.put("after", rtrim(bm1_after.getVerlustbesch()));
                } else {
                    diffMap.put("after", bm1_after.getVerlustbesch());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("verlustbesch", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm1_after.getSteuerbeschDv())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getSteuerbeschDv())) {
                    diffMap.put("after", rtrim(bm1_after.getSteuerbeschDv()));
                } else {
                    diffMap.put("after", bm1_after.getSteuerbeschDv());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("steuerbeschDv", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm1_after.getKeinOriginalM1())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getKeinOriginalM1())) {
                    diffMap.put("after", rtrim(bm1_after.getKeinOriginalM1()));
                } else {
                    diffMap.put("after", bm1_after.getKeinOriginalM1());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("keinOriginalM1", new HashMap<>(diffMap));
        } else if (bm1_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm1_before.getTrTableBm1PK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getStornierung() != null) {

                diffMap.put("before", rtrim(bm1_before.getStornierung()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("stornierung", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getOrdnungsnummer() != null) {

                diffMap.put("before", rtrim(bm1_before.getOrdnungsnummer()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ordnungsnummer", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getPrivat() != null) {

                diffMap.put("before", rtrim(bm1_before.getPrivat()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("privat", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getVerlustbesch() != null) {

                diffMap.put("before", rtrim(bm1_before.getVerlustbesch()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verlustbesch", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getSteuerbeschDv() != null) {

                diffMap.put("before", rtrim(bm1_before.getSteuerbeschDv()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("steuerbeschDv", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getKeinOriginalM1() != null) {

                diffMap.put("before", rtrim(bm1_before.getKeinOriginalM1()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("keinOriginalM1", new HashMap<>(diffMap));
        } else {

            if ((!(bm1_before.getStornierung() == null && bm1_after.getStornierung() == null)) && ((bm1_before
                    .getStornierung() == null && !rtrim(bm1_after.getStornierung()).equals(null))
                    || (bm1_after.getStornierung() == null && !(bm1_before.getStornierung()).equals(null))
                    || (bm1_before.getStornierung() != null && bm1_after.getStornierung() != null
                            && !(rtrim(bm1_before.getStornierung()).equals(rtrim(bm1_after.getStornierung())))))) {

                diffMap.clear();

                if (bm1_before.getStornierung() != null) {

                    diffMap.put("before", rtrim(bm1_before.getStornierung()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1_after.getStornierung() != null) {

                    diffMap.put("after", rtrim(bm1_after.getStornierung()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("stornierung", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1_before.getOrdnungsnummer() == null && bm1_after.getOrdnungsnummer() == null))
                    && ((bm1_before.getOrdnungsnummer() == null && !rtrim(bm1_after.getOrdnungsnummer()).equals(null))
                            || (bm1_after.getOrdnungsnummer() == null && !(bm1_before.getOrdnungsnummer()).equals(null))
                            || (bm1_before.getOrdnungsnummer() != null && bm1_after.getOrdnungsnummer() != null
                                    && !(rtrim(bm1_before.getOrdnungsnummer())
                                            .equals(rtrim(bm1_after.getOrdnungsnummer())))))) {

                diffMap.clear();

                if (bm1_before.getOrdnungsnummer() != null) {

                    diffMap.put("before", rtrim(bm1_before.getOrdnungsnummer()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1_after.getOrdnungsnummer() != null) {

                    diffMap.put("after", rtrim(bm1_after.getOrdnungsnummer()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("ordnungsnummer", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1_before.getPrivat() == null && bm1_after.getPrivat() == null))
                    && ((bm1_before.getPrivat() == null && !rtrim(bm1_after.getPrivat()).equals(null))
                            || (bm1_after.getPrivat() == null && !(bm1_before.getPrivat()).equals(null))
                            || (bm1_before.getPrivat() != null && bm1_after.getPrivat() != null
                                    && !(rtrim(bm1_before.getPrivat()).equals(rtrim(bm1_after.getPrivat())))))) {

                diffMap.clear();

                if (bm1_before.getPrivat() != null) {

                    diffMap.put("before", rtrim(bm1_before.getPrivat()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1_after.getPrivat() != null) {

                    diffMap.put("after", rtrim(bm1_after.getPrivat()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("privat", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1_before.getVerlustbesch() == null && bm1_after.getVerlustbesch() == null)) && ((bm1_before
                    .getVerlustbesch() == null && !rtrim(bm1_after.getVerlustbesch()).equals(null))
                    || (bm1_after.getVerlustbesch() == null && !(bm1_before.getVerlustbesch()).equals(null))
                    || (bm1_before.getVerlustbesch() != null && bm1_after.getVerlustbesch() != null
                            && !(rtrim(bm1_before.getVerlustbesch()).equals(rtrim(bm1_after.getVerlustbesch())))))) {

                diffMap.clear();

                if (bm1_before.getVerlustbesch() != null) {

                    diffMap.put("before", rtrim(bm1_before.getVerlustbesch()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1_after.getVerlustbesch() != null) {

                    diffMap.put("after", rtrim(bm1_after.getVerlustbesch()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("verlustbesch", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1_before.getSteuerbeschDv() == null && bm1_after.getSteuerbeschDv() == null)) && ((bm1_before
                    .getSteuerbeschDv() == null && !rtrim(bm1_after.getSteuerbeschDv()).equals(null))
                    || (bm1_after.getSteuerbeschDv() == null && !(bm1_before.getSteuerbeschDv()).equals(null))
                    || (bm1_before.getSteuerbeschDv() != null && bm1_after.getSteuerbeschDv() != null
                            && !(rtrim(bm1_before.getSteuerbeschDv()).equals(rtrim(bm1_after.getSteuerbeschDv())))))) {

                diffMap.clear();

                if (bm1_before.getSteuerbeschDv() != null) {

                    diffMap.put("before", rtrim(bm1_before.getSteuerbeschDv()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1_after.getSteuerbeschDv() != null) {

                    diffMap.put("after", rtrim(bm1_after.getSteuerbeschDv()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("steuerbeschDv", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1_before.getKeinOriginalM1() == null && bm1_after.getKeinOriginalM1() == null))
                    && ((bm1_before.getKeinOriginalM1() == null && !rtrim(bm1_after.getKeinOriginalM1()).equals(null))
                            || (bm1_after.getKeinOriginalM1() == null && !(bm1_before.getKeinOriginalM1()).equals(null))
                            || (bm1_before.getKeinOriginalM1() != null && bm1_after.getKeinOriginalM1() != null
                                    && !(rtrim(bm1_before.getKeinOriginalM1())
                                            .equals(rtrim(bm1_after.getKeinOriginalM1())))))) {

                diffMap.clear();

                if (bm1_before.getKeinOriginalM1() != null) {

                    diffMap.put("before", rtrim(bm1_before.getKeinOriginalM1()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1_after.getKeinOriginalM1() != null) {

                    diffMap.put("after", rtrim(bm1_after.getKeinOriginalM1()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("keinOriginalM1", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AllgemeinMusterI")) {
            sectionMap.get("AllgemeinMusterI").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AllgemeinMusterI", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AllgemeinMusterI");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM1") != null) {
                rootMap.get("TR_TABLE_BM1").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM1", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffAngabenBescheinigung2(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (bm1_before == null) {

            diffMap.clear();

            diffMap.put("after", bm1_after.getAngerechAuslSteu());
            fieldMap.put("angerechAuslSteu", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getAnrechbAuslSteu());
            fieldMap.put("anrechbAuslSteu", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm1_after.getSteuerlEinlagekto())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getSteuerlEinlagekto())) {
                    diffMap.put("after", rtrim(bm1_after.getSteuerlEinlagekto()));
                } else {
                    diffMap.put("after", bm1_after.getSteuerlEinlagekto());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("steuerlEinlagekto", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getAuslInvFonds());
            fieldMap.put("auslInvFonds", new HashMap<>(diffMap));
        } else if (bm1_after == null) {

            diffMap.clear();

            if (bm1_before.getAngerechAuslSteu() != null) {

                diffMap.put("before", bm1_before.getAngerechAuslSteu());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("angerechAuslSteu", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getAnrechbAuslSteu() != null) {

                diffMap.put("before", bm1_before.getAnrechbAuslSteu());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("anrechbAuslSteu", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getSteuerlEinlagekto() != null) {

                diffMap.put("before", rtrim(bm1_before.getSteuerlEinlagekto()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("steuerlEinlagekto", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getAuslInvFonds() != null) {

                diffMap.put("before", bm1_before.getAuslInvFonds());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("auslInvFonds", new HashMap<>(diffMap));
        } else {

            if ((bm1_before.getAngerechAuslSteu() != null || bm1_after.getAngerechAuslSteu() != null)
                    && ((bm1_before.getAngerechAuslSteu() == null && bm1_after.getAngerechAuslSteu() != null)
                            || (bm1_after.getAngerechAuslSteu() == null && bm1_before.getAngerechAuslSteu() != null)
                            || (bm1_before.getAngerechAuslSteu() != null && bm1_after.getAngerechAuslSteu() != null
                                    && bm1_before.getAngerechAuslSteu()
                                            .compareTo(bm1_after.getAngerechAuslSteu()) != 0))) {

                diffMap.clear();

                if (bm1_before.getAngerechAuslSteu() != null) {

                    diffMap.put("before", bm1_before.getAngerechAuslSteu());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getAngerechAuslSteu());
                fieldMap.put("angerechAuslSteu", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getAnrechbAuslSteu() != null || bm1_after.getAnrechbAuslSteu() != null)
                    && ((bm1_before.getAnrechbAuslSteu() == null && bm1_after.getAnrechbAuslSteu() != null)
                            || (bm1_after.getAnrechbAuslSteu() == null && bm1_before.getAnrechbAuslSteu() != null)
                            || (bm1_before.getAnrechbAuslSteu() != null && bm1_after.getAnrechbAuslSteu() != null
                                    && bm1_before.getAnrechbAuslSteu()
                                            .compareTo(bm1_after.getAnrechbAuslSteu()) != 0))) {

                diffMap.clear();

                if (bm1_before.getAnrechbAuslSteu() != null) {

                    diffMap.put("before", bm1_before.getAnrechbAuslSteu());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getAnrechbAuslSteu());
                fieldMap.put("anrechbAuslSteu", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1_before.getSteuerlEinlagekto() == null && bm1_after.getSteuerlEinlagekto() == null))
                    && ((bm1_before.getSteuerlEinlagekto() == null
                            && !rtrim(bm1_after.getSteuerlEinlagekto()).equals(null))
                            || (bm1_after.getSteuerlEinlagekto() == null
                                    && !(bm1_before.getSteuerlEinlagekto()).equals(null))
                            || (bm1_before.getSteuerlEinlagekto() != null && bm1_after.getSteuerlEinlagekto() != null
                                    && !(rtrim(bm1_before.getSteuerlEinlagekto())
                                            .equals(rtrim(bm1_after.getSteuerlEinlagekto())))))) {

                diffMap.clear();

                if (bm1_before.getSteuerlEinlagekto() != null) {

                    diffMap.put("before", rtrim(bm1_before.getSteuerlEinlagekto()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1_after.getSteuerlEinlagekto() != null) {

                    diffMap.put("after", rtrim(bm1_after.getSteuerlEinlagekto()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("steuerlEinlagekto", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getAuslInvFonds() != null || bm1_after.getAuslInvFonds() != null)
                    && ((bm1_before.getAuslInvFonds() == null && bm1_after.getAuslInvFonds() != null)
                            || (bm1_after.getAuslInvFonds() == null && bm1_before.getAuslInvFonds() != null)
                            || (bm1_before.getAuslInvFonds() != null && bm1_after.getAuslInvFonds() != null
                                    && bm1_before.getAuslInvFonds().compareTo(bm1_after.getAuslInvFonds()) != 0))) {

                diffMap.clear();

                if (bm1_before.getAuslInvFonds() != null) {

                    diffMap.put("before", bm1_before.getAuslInvFonds());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getAuslInvFonds());
                fieldMap.put("auslInvFonds", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AngabenBescheinigung2")) {
            sectionMap.get("AngabenBescheinigung2").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AngabenBescheinigung2", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AngabenBescheinigung2");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM1") != null) {
                rootMap.get("TR_TABLE_BM1").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM1", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffDepositoryReceipts(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (bm1_before == null) {

            diffMap.clear();

            diffMap.put("after", bm1_after.getDepReGesamtzahl());
            fieldMap.put("depReGesamtzahl", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getDepReAnzBesch());
            fieldMap.put("depReAnzBesch", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm1_after.getDepReIsin())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm1_after.getDepReIsin())) {
                    diffMap.put("after", rtrim(bm1_after.getDepReIsin()));
                } else {
                    diffMap.put("after", bm1_after.getDepReIsin());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("depReIsin", new HashMap<>(diffMap));
        } else if (bm1_after == null) {

            diffMap.clear();

            if (bm1_before.getDepReGesamtzahl() != null) {

                diffMap.put("before", bm1_before.getDepReGesamtzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("depReGesamtzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getDepReAnzBesch() != null) {

                diffMap.put("before", bm1_before.getDepReAnzBesch());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("depReAnzBesch", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getDepReIsin() != null) {

                diffMap.put("before", rtrim(bm1_before.getDepReIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("depReIsin", new HashMap<>(diffMap));
        } else {

            if ((bm1_before.getDepReGesamtzahl() != null || bm1_after.getDepReGesamtzahl() != null)
                    && ((bm1_before.getDepReGesamtzahl() == null && bm1_after.getDepReGesamtzahl() != null)
                            || (bm1_after.getDepReGesamtzahl() == null && bm1_before.getDepReGesamtzahl() != null)
                            || (bm1_before.getDepReGesamtzahl() != null && bm1_after.getDepReGesamtzahl() != null
                                    && bm1_before.getDepReGesamtzahl()
                                            .compareTo(bm1_after.getDepReGesamtzahl()) != 0))) {

                diffMap.clear();

                if (bm1_before.getDepReGesamtzahl() != null) {

                    diffMap.put("before", bm1_before.getDepReGesamtzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getDepReGesamtzahl());
                fieldMap.put("depReGesamtzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getDepReAnzBesch() != null || bm1_after.getDepReAnzBesch() != null)
                    && ((bm1_before.getDepReAnzBesch() == null && bm1_after.getDepReAnzBesch() != null)
                            || (bm1_after.getDepReAnzBesch() == null && bm1_before.getDepReAnzBesch() != null)
                            || (bm1_before.getDepReAnzBesch() != null && bm1_after.getDepReAnzBesch() != null
                                    && bm1_before.getDepReAnzBesch().compareTo(bm1_after.getDepReAnzBesch()) != 0))) {

                diffMap.clear();

                if (bm1_before.getDepReAnzBesch() != null) {

                    diffMap.put("before", bm1_before.getDepReAnzBesch());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getDepReAnzBesch());
                fieldMap.put("depReAnzBesch", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1_before.getDepReIsin() == null && bm1_after.getDepReIsin() == null))
                    && ((bm1_before.getDepReIsin() == null && !rtrim(bm1_after.getDepReIsin()).equals(null))
                            || (bm1_after.getDepReIsin() == null && !(bm1_before.getDepReIsin()).equals(null))
                            || (bm1_before.getDepReIsin() != null && bm1_after.getDepReIsin() != null
                                    && !(rtrim(bm1_before.getDepReIsin()).equals(rtrim(bm1_after.getDepReIsin())))))) {

                diffMap.clear();

                if (bm1_before.getDepReIsin() != null) {

                    diffMap.put("before", rtrim(bm1_before.getDepReIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1_after.getDepReIsin() != null) {

                    diffMap.put("after", rtrim(bm1_after.getDepReIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("depReIsin", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("DepositoryReceipts")) {
            sectionMap.get("DepositoryReceipts").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("DepositoryReceipts", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed DepositoryReceipts");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM1") != null) {
                rootMap.get("TR_TABLE_BM1").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM1", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffAngabenBescheinigung1(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (bm1_before == null) {

            diffMap.clear();

            diffMap.put("after", bm1_after.getErsatzBmg());
            fieldMap.put("ersatzBmg", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getVerlustOhneAkt());
            fieldMap.put("verlustOhneAkt", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getVerlustAkt());
            fieldMap.put("verlustAkt", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getVerlTermingesch());
            fieldMap.put("verlTermingesch", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getVerlWertloUneinb());
            fieldMap.put("verlWertloUneinb", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getVerbrSparerpausch());
            fieldMap.put("verbrSparerpausch", new HashMap<>(diffMap));
        } else if (bm1_after == null) {

            diffMap.clear();

            if (bm1_before.getErsatzBmg() != null) {

                diffMap.put("before", bm1_before.getErsatzBmg());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ersatzBmg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getVerlustOhneAkt() != null) {

                diffMap.put("before", bm1_before.getVerlustOhneAkt());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verlustOhneAkt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getVerlustAkt() != null) {

                diffMap.put("before", bm1_before.getVerlustAkt());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verlustAkt", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getVerlTermingesch() != null) {

                diffMap.put("before", bm1_before.getVerlTermingesch());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verlTermingesch", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getVerlWertloUneinb() != null) {

                diffMap.put("before", bm1_before.getVerlWertloUneinb());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verlWertloUneinb", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getVerbrSparerpausch() != null) {

                diffMap.put("before", bm1_before.getVerbrSparerpausch());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("verbrSparerpausch", new HashMap<>(diffMap));
        } else {

            if ((bm1_before.getErsatzBmg() != null || bm1_after.getErsatzBmg() != null)
                    && ((bm1_before.getErsatzBmg() == null && bm1_after.getErsatzBmg() != null)
                            || (bm1_after.getErsatzBmg() == null && bm1_before.getErsatzBmg() != null)
                            || (bm1_before.getErsatzBmg() != null && bm1_after.getErsatzBmg() != null
                                    && bm1_before.getErsatzBmg().compareTo(bm1_after.getErsatzBmg()) != 0))) {

                diffMap.clear();

                if (bm1_before.getErsatzBmg() != null) {

                    diffMap.put("before", bm1_before.getErsatzBmg());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getErsatzBmg());
                fieldMap.put("ersatzBmg", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getVerlustOhneAkt() != null || bm1_after.getVerlustOhneAkt() != null)
                    && ((bm1_before.getVerlustOhneAkt() == null && bm1_after.getVerlustOhneAkt() != null)
                            || (bm1_after.getVerlustOhneAkt() == null && bm1_before.getVerlustOhneAkt() != null)
                            || (bm1_before.getVerlustOhneAkt() != null && bm1_after.getVerlustOhneAkt() != null
                                    && bm1_before.getVerlustOhneAkt().compareTo(bm1_after.getVerlustOhneAkt()) != 0))) {

                diffMap.clear();

                if (bm1_before.getVerlustOhneAkt() != null) {

                    diffMap.put("before", bm1_before.getVerlustOhneAkt());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getVerlustOhneAkt());
                fieldMap.put("verlustOhneAkt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getVerlustAkt() != null || bm1_after.getVerlustAkt() != null)
                    && ((bm1_before.getVerlustAkt() == null && bm1_after.getVerlustAkt() != null)
                            || (bm1_after.getVerlustAkt() == null && bm1_before.getVerlustAkt() != null)
                            || (bm1_before.getVerlustAkt() != null && bm1_after.getVerlustAkt() != null
                                    && bm1_before.getVerlustAkt().compareTo(bm1_after.getVerlustAkt()) != 0))) {

                diffMap.clear();

                if (bm1_before.getVerlustAkt() != null) {

                    diffMap.put("before", bm1_before.getVerlustAkt());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getVerlustAkt());
                fieldMap.put("verlustAkt", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getVerlTermingesch() != null || bm1_after.getVerlTermingesch() != null)
                    && ((bm1_before.getVerlTermingesch() == null && bm1_after.getVerlTermingesch() != null)
                            || (bm1_after.getVerlTermingesch() == null && bm1_before.getVerlTermingesch() != null)
                            || (bm1_before.getVerlTermingesch() != null && bm1_after.getVerlTermingesch() != null
                                    && bm1_before.getVerlTermingesch()
                                            .compareTo(bm1_after.getVerlTermingesch()) != 0))) {

                diffMap.clear();

                if (bm1_before.getVerlTermingesch() != null) {

                    diffMap.put("before", bm1_before.getVerlTermingesch());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getVerlTermingesch());
                fieldMap.put("verlTermingesch", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getVerlWertloUneinb() != null || bm1_after.getVerlWertloUneinb() != null)
                    && ((bm1_before.getVerlWertloUneinb() == null && bm1_after.getVerlWertloUneinb() != null)
                            || (bm1_after.getVerlWertloUneinb() == null && bm1_before.getVerlWertloUneinb() != null)
                            || (bm1_before.getVerlWertloUneinb() != null && bm1_after.getVerlWertloUneinb() != null
                                    && bm1_before.getVerlWertloUneinb()
                                            .compareTo(bm1_after.getVerlWertloUneinb()) != 0))) {

                diffMap.clear();

                if (bm1_before.getVerlWertloUneinb() != null) {

                    diffMap.put("before", bm1_before.getVerlWertloUneinb());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getVerlWertloUneinb());
                fieldMap.put("verlWertloUneinb", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getVerbrSparerpausch() != null || bm1_after.getVerbrSparerpausch() != null)
                    && ((bm1_before.getVerbrSparerpausch() == null && bm1_after.getVerbrSparerpausch() != null)
                            || (bm1_after.getVerbrSparerpausch() == null && bm1_before.getVerbrSparerpausch() != null)
                            || (bm1_before.getVerbrSparerpausch() != null && bm1_after.getVerbrSparerpausch() != null
                                    && bm1_before.getVerbrSparerpausch()
                                            .compareTo(bm1_after.getVerbrSparerpausch()) != 0))) {

                diffMap.clear();

                if (bm1_before.getVerbrSparerpausch() != null) {

                    diffMap.put("before", bm1_before.getVerbrSparerpausch());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getVerbrSparerpausch());
                fieldMap.put("verbrSparerpausch", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AngabenBescheinigung1")) {
            sectionMap.get("AngabenBescheinigung1").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AngabenBescheinigung1", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AngabenBescheinigung1");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM1") != null) {
                rootMap.get("TR_TABLE_BM1").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM1", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffSteuerabzug(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (bm1_before == null) {

            diffMap.clear();

            diffMap.put("after", bm1_after.getKapstAbzug());
            fieldMap.put("kapstAbzug", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getSolzAbzug());
            fieldMap.put("solzAbzug", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getKistAbzug());
            fieldMap.put("kistAbzug", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getKistKonf());
            fieldMap.put("kistKonf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getP2KistAbzug());
            fieldMap.put("p2KistAbzug", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getP2KistKonf());
            fieldMap.put("p2KistKonf", new HashMap<>(diffMap));
        } else if (bm1_after == null) {

            diffMap.clear();

            if (bm1_before.getKapstAbzug() != null) {

                diffMap.put("before", bm1_before.getKapstAbzug());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kapstAbzug", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getSolzAbzug() != null) {

                diffMap.put("before", bm1_before.getSolzAbzug());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("solzAbzug", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getKistAbzug() != null) {

                diffMap.put("before", bm1_before.getKistAbzug());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kistAbzug", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getKistKonf() != null) {

                diffMap.put("before", bm1_before.getKistKonf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kistKonf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getP2KistAbzug() != null) {

                diffMap.put("before", bm1_before.getP2KistAbzug());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("p2KistAbzug", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getP2KistKonf() != null) {

                diffMap.put("before", bm1_before.getP2KistKonf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("p2KistKonf", new HashMap<>(diffMap));
        } else {

            if ((bm1_before.getKapstAbzug() != null || bm1_after.getKapstAbzug() != null)
                    && ((bm1_before.getKapstAbzug() == null && bm1_after.getKapstAbzug() != null)
                            || (bm1_after.getKapstAbzug() == null && bm1_before.getKapstAbzug() != null)
                            || (bm1_before.getKapstAbzug() != null && bm1_after.getKapstAbzug() != null
                                    && bm1_before.getKapstAbzug().compareTo(bm1_after.getKapstAbzug()) != 0))) {

                diffMap.clear();

                if (bm1_before.getKapstAbzug() != null) {

                    diffMap.put("before", bm1_before.getKapstAbzug());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getKapstAbzug());
                fieldMap.put("kapstAbzug", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getSolzAbzug() != null || bm1_after.getSolzAbzug() != null)
                    && ((bm1_before.getSolzAbzug() == null && bm1_after.getSolzAbzug() != null)
                            || (bm1_after.getSolzAbzug() == null && bm1_before.getSolzAbzug() != null)
                            || (bm1_before.getSolzAbzug() != null && bm1_after.getSolzAbzug() != null
                                    && bm1_before.getSolzAbzug().compareTo(bm1_after.getSolzAbzug()) != 0))) {

                diffMap.clear();

                if (bm1_before.getSolzAbzug() != null) {

                    diffMap.put("before", bm1_before.getSolzAbzug());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getSolzAbzug());
                fieldMap.put("solzAbzug", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getKistAbzug() != null || bm1_after.getKistAbzug() != null)
                    && ((bm1_before.getKistAbzug() == null && bm1_after.getKistAbzug() != null)
                            || (bm1_after.getKistAbzug() == null && bm1_before.getKistAbzug() != null)
                            || (bm1_before.getKistAbzug() != null && bm1_after.getKistAbzug() != null
                                    && bm1_before.getKistAbzug().compareTo(bm1_after.getKistAbzug()) != 0))) {

                diffMap.clear();

                if (bm1_before.getKistAbzug() != null) {

                    diffMap.put("before", bm1_before.getKistAbzug());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getKistAbzug());
                fieldMap.put("kistAbzug", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getKistKonf() != null || bm1_after.getKistKonf() != null)
                    && ((bm1_before.getKistKonf() == null && bm1_after.getKistKonf() != null)
                            || (bm1_after.getKistKonf() == null && bm1_before.getKistKonf() != null)
                            || (bm1_before.getKistKonf() != null && bm1_after.getKistKonf() != null
                                    && bm1_before.getKistKonf().compareTo(bm1_after.getKistKonf()) != 0))) {

                diffMap.clear();

                if (bm1_before.getKistKonf() != null) {

                    diffMap.put("before", bm1_before.getKistKonf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getKistKonf());
                fieldMap.put("kistKonf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getP2KistAbzug() != null || bm1_after.getP2KistAbzug() != null)
                    && ((bm1_before.getP2KistAbzug() == null && bm1_after.getP2KistAbzug() != null)
                            || (bm1_after.getP2KistAbzug() == null && bm1_before.getP2KistAbzug() != null)
                            || (bm1_before.getP2KistAbzug() != null && bm1_after.getP2KistAbzug() != null
                                    && bm1_before.getP2KistAbzug().compareTo(bm1_after.getP2KistAbzug()) != 0))) {

                diffMap.clear();

                if (bm1_before.getP2KistAbzug() != null) {

                    diffMap.put("before", bm1_before.getP2KistAbzug());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getP2KistAbzug());
                fieldMap.put("p2KistAbzug", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getP2KistKonf() != null || bm1_after.getP2KistKonf() != null)
                    && ((bm1_before.getP2KistKonf() == null && bm1_after.getP2KistKonf() != null)
                            || (bm1_after.getP2KistKonf() == null && bm1_before.getP2KistKonf() != null)
                            || (bm1_before.getP2KistKonf() != null && bm1_after.getP2KistKonf() != null
                                    && bm1_before.getP2KistKonf().compareTo(bm1_after.getP2KistKonf()) != 0))) {

                diffMap.clear();

                if (bm1_before.getP2KistKonf() != null) {

                    diffMap.put("before", bm1_before.getP2KistKonf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getP2KistKonf());
                fieldMap.put("p2KistKonf", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Steuerabzug")) {
            sectionMap.get("Steuerabzug").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Steuerabzug", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Steuerabzug");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM1") != null) {
                rootMap.get("TR_TABLE_BM1").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM1", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffAngabenBescheinigung(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (bm1_before == null) {

            diffMap.clear();

            diffMap.put("after", bm1_after.getStbJahr());
            fieldMap.put("stbJahr", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getZahlungstag());
            fieldMap.put("zahlungstag", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getZeitraumVon());
            fieldMap.put("zeitraumVon", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getZeitraumBis());
            fieldMap.put("zeitraumBis", new HashMap<>(diffMap));
        } else if (bm1_after == null) {

            diffMap.clear();

            if (bm1_before.getStbJahr() != null) {

                diffMap.put("before", bm1_before.getStbJahr());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("stbJahr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getZahlungstag() != null) {

                diffMap.put("before", bm1_before.getZahlungstag());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("zahlungstag", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getZeitraumVon() != null) {

                diffMap.put("before", bm1_before.getZeitraumVon());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("zeitraumVon", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getZeitraumBis() != null) {

                diffMap.put("before", bm1_before.getZeitraumBis());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("zeitraumBis", new HashMap<>(diffMap));
        } else {

            if ((bm1_before.getStbJahr() != null || bm1_after.getStbJahr() != null)
                    && ((bm1_before.getStbJahr() == null && bm1_after.getStbJahr() != null)
                            || (bm1_after.getStbJahr() == null && bm1_before.getStbJahr() != null)
                            || (bm1_before.getStbJahr() != null && bm1_after.getStbJahr() != null
                                    && bm1_before.getStbJahr().compareTo(bm1_after.getStbJahr()) != 0))) {

                diffMap.clear();

                if (bm1_before.getStbJahr() != null) {

                    diffMap.put("before", bm1_before.getStbJahr());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getStbJahr());
                fieldMap.put("stbJahr", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getZahlungstag() != null || bm1_after.getZahlungstag() != null)
                    && ((bm1_before.getZahlungstag() == null && bm1_after.getZahlungstag() != null)
                            || (bm1_after.getZahlungstag() == null && bm1_before.getZahlungstag() != null)
                            || (bm1_before.getZahlungstag() != null && bm1_after.getZahlungstag() != null
                                    && bm1_before.getZahlungstag().compareTo(bm1_after.getZahlungstag()) != 0))) {

                diffMap.clear();

                if (bm1_before.getZahlungstag() != null) {

                    diffMap.put("before", bm1_before.getZahlungstag());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getZahlungstag());
                fieldMap.put("zahlungstag", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getZeitraumVon() != null || bm1_after.getZeitraumVon() != null)
                    && ((bm1_before.getZeitraumVon() == null && bm1_after.getZeitraumVon() != null)
                            || (bm1_after.getZeitraumVon() == null && bm1_before.getZeitraumVon() != null)
                            || (bm1_before.getZeitraumVon() != null && bm1_after.getZeitraumVon() != null
                                    && bm1_before.getZeitraumVon().compareTo(bm1_after.getZeitraumVon()) != 0))) {

                diffMap.clear();

                if (bm1_before.getZeitraumVon() != null) {

                    diffMap.put("before", bm1_before.getZeitraumVon());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getZeitraumVon());
                fieldMap.put("zeitraumVon", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getZeitraumBis() != null || bm1_after.getZeitraumBis() != null)
                    && ((bm1_before.getZeitraumBis() == null && bm1_after.getZeitraumBis() != null)
                            || (bm1_after.getZeitraumBis() == null && bm1_before.getZeitraumBis() != null)
                            || (bm1_before.getZeitraumBis() != null && bm1_after.getZeitraumBis() != null
                                    && bm1_before.getZeitraumBis().compareTo(bm1_after.getZeitraumBis()) != 0))) {

                diffMap.clear();

                if (bm1_before.getZeitraumBis() != null) {

                    diffMap.put("before", bm1_before.getZeitraumBis());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getZeitraumBis());
                fieldMap.put("zeitraumBis", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AngabenBescheinigung")) {
            sectionMap.get("AngabenBescheinigung").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AngabenBescheinigung", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AngabenBescheinigung");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM1") != null) {
                rootMap.get("TR_TABLE_BM1").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM1", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffKapitalertraegeAbzug(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (bm1_before == null) {

            diffMap.clear();

            diffMap.put("after", bm1_after.getKapitalertrag());
            fieldMap.put("kapitalertrag", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getAktienErtrGew());
            fieldMap.put("aktienErtrGew", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getStillhalterTermin());
            fieldMap.put("stillhalterTermin", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getGewAltanteile());
            fieldMap.put("gewAltanteile", new HashMap<>(diffMap));
        } else if (bm1_after == null) {

            diffMap.clear();

            if (bm1_before.getKapitalertrag() != null) {

                diffMap.put("before", bm1_before.getKapitalertrag());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kapitalertrag", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getAktienErtrGew() != null) {

                diffMap.put("before", bm1_before.getAktienErtrGew());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aktienErtrGew", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getStillhalterTermin() != null) {

                diffMap.put("before", bm1_before.getStillhalterTermin());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("stillhalterTermin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getGewAltanteile() != null) {

                diffMap.put("before", bm1_before.getGewAltanteile());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("gewAltanteile", new HashMap<>(diffMap));
        } else {

            if ((bm1_before.getKapitalertrag() != null || bm1_after.getKapitalertrag() != null)
                    && ((bm1_before.getKapitalertrag() == null && bm1_after.getKapitalertrag() != null)
                            || (bm1_after.getKapitalertrag() == null && bm1_before.getKapitalertrag() != null)
                            || (bm1_before.getKapitalertrag() != null && bm1_after.getKapitalertrag() != null
                                    && bm1_before.getKapitalertrag().compareTo(bm1_after.getKapitalertrag()) != 0))) {

                diffMap.clear();

                if (bm1_before.getKapitalertrag() != null) {

                    diffMap.put("before", bm1_before.getKapitalertrag());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getKapitalertrag());
                fieldMap.put("kapitalertrag", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getAktienErtrGew() != null || bm1_after.getAktienErtrGew() != null)
                    && ((bm1_before.getAktienErtrGew() == null && bm1_after.getAktienErtrGew() != null)
                            || (bm1_after.getAktienErtrGew() == null && bm1_before.getAktienErtrGew() != null)
                            || (bm1_before.getAktienErtrGew() != null && bm1_after.getAktienErtrGew() != null
                                    && bm1_before.getAktienErtrGew().compareTo(bm1_after.getAktienErtrGew()) != 0))) {

                diffMap.clear();

                if (bm1_before.getAktienErtrGew() != null) {

                    diffMap.put("before", bm1_before.getAktienErtrGew());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getAktienErtrGew());
                fieldMap.put("aktienErtrGew", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getStillhalterTermin() != null || bm1_after.getStillhalterTermin() != null)
                    && ((bm1_before.getStillhalterTermin() == null && bm1_after.getStillhalterTermin() != null)
                            || (bm1_after.getStillhalterTermin() == null && bm1_before.getStillhalterTermin() != null)
                            || (bm1_before.getStillhalterTermin() != null && bm1_after.getStillhalterTermin() != null
                                    && bm1_before.getStillhalterTermin()
                                            .compareTo(bm1_after.getStillhalterTermin()) != 0))) {

                diffMap.clear();

                if (bm1_before.getStillhalterTermin() != null) {

                    diffMap.put("before", bm1_before.getStillhalterTermin());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getStillhalterTermin());
                fieldMap.put("stillhalterTermin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getGewAltanteile() != null || bm1_after.getGewAltanteile() != null)
                    && ((bm1_before.getGewAltanteile() == null && bm1_after.getGewAltanteile() != null)
                            || (bm1_after.getGewAltanteile() == null && bm1_before.getGewAltanteile() != null)
                            || (bm1_before.getGewAltanteile() != null && bm1_after.getGewAltanteile() != null
                                    && bm1_before.getGewAltanteile().compareTo(bm1_after.getGewAltanteile()) != 0))) {

                diffMap.clear();

                if (bm1_before.getGewAltanteile() != null) {

                    diffMap.put("before", bm1_before.getGewAltanteile());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getGewAltanteile());
                fieldMap.put("gewAltanteile", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("KapitalertraegeAbzug")) {
            sectionMap.get("KapitalertraegeAbzug").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("KapitalertraegeAbzug", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed KapitalertraegeAbzug");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM1") != null) {
                rootMap.get("TR_TABLE_BM1").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM1", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffEntschaedigung(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (bm1_before == null) {

            diffMap.clear();

            diffMap.put("after", bm1_after.getGewAktVorSon());
            fieldMap.put("gewAktVorSon", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getStillhVorSon());
            fieldMap.put("stillhVorSon", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm1_after.getEntschaedigung());
            fieldMap.put("entschaedigung", new HashMap<>(diffMap));
        } else if (bm1_after == null) {

            diffMap.clear();

            if (bm1_before.getGewAktVorSon() != null) {

                diffMap.put("before", bm1_before.getGewAktVorSon());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("gewAktVorSon", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getStillhVorSon() != null) {

                diffMap.put("before", bm1_before.getStillhVorSon());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("stillhVorSon", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1_before.getEntschaedigung() != null) {

                diffMap.put("before", bm1_before.getEntschaedigung());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("entschaedigung", new HashMap<>(diffMap));
        } else {

            if ((bm1_before.getGewAktVorSon() != null || bm1_after.getGewAktVorSon() != null)
                    && ((bm1_before.getGewAktVorSon() == null && bm1_after.getGewAktVorSon() != null)
                            || (bm1_after.getGewAktVorSon() == null && bm1_before.getGewAktVorSon() != null)
                            || (bm1_before.getGewAktVorSon() != null && bm1_after.getGewAktVorSon() != null
                                    && bm1_before.getGewAktVorSon().compareTo(bm1_after.getGewAktVorSon()) != 0))) {

                diffMap.clear();

                if (bm1_before.getGewAktVorSon() != null) {

                    diffMap.put("before", bm1_before.getGewAktVorSon());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getGewAktVorSon());
                fieldMap.put("gewAktVorSon", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getStillhVorSon() != null || bm1_after.getStillhVorSon() != null)
                    && ((bm1_before.getStillhVorSon() == null && bm1_after.getStillhVorSon() != null)
                            || (bm1_after.getStillhVorSon() == null && bm1_before.getStillhVorSon() != null)
                            || (bm1_before.getStillhVorSon() != null && bm1_after.getStillhVorSon() != null
                                    && bm1_before.getStillhVorSon().compareTo(bm1_after.getStillhVorSon()) != 0))) {

                diffMap.clear();

                if (bm1_before.getStillhVorSon() != null) {

                    diffMap.put("before", bm1_before.getStillhVorSon());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getStillhVorSon());
                fieldMap.put("stillhVorSon", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1_before.getEntschaedigung() != null || bm1_after.getEntschaedigung() != null)
                    && ((bm1_before.getEntschaedigung() == null && bm1_after.getEntschaedigung() != null)
                            || (bm1_after.getEntschaedigung() == null && bm1_before.getEntschaedigung() != null)
                            || (bm1_before.getEntschaedigung() != null && bm1_after.getEntschaedigung() != null
                                    && bm1_before.getEntschaedigung().compareTo(bm1_after.getEntschaedigung()) != 0))) {

                diffMap.clear();

                if (bm1_before.getEntschaedigung() != null) {

                    diffMap.put("before", bm1_before.getEntschaedigung());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1_after.getEntschaedigung());
                fieldMap.put("entschaedigung", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AllgemeinMusterI1")) {
            sectionMap.get("AllgemeinMusterI1").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AllgemeinMusterI1", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AllgemeinMusterI1");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM1") != null) {
                rootMap.get("TR_TABLE_BM1").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM1", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Bm3 Sections
    private BsbPairWithChangedFlag getDiffDepositoryReceipts(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (bm3_before == null) {
            diffMap.clear();

            diffMap.put("after", bm3_after.getDepReGesamtzahl());
            fieldMap.put("depReGesamtzahl", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getDepReAnzBesch());
            fieldMap.put("depReAnzBesch", new HashMap<>(diffMap));

            diffMap.clear();

            if (!StringUtils.isBlank(bm3_after.getDepReIsin())) {
                diffMap.put("after", rtrim(bm3_after.getDepReIsin()));
            } else {
                diffMap.put("after", bm3_after.getDepReIsin());
            }

            fieldMap.put("depReIsin", new HashMap<>(diffMap));
        } else if (bm3_after == null) {

            diffMap.clear();

            if (bm3_before.getDepReGesamtzahl() != null) {

                diffMap.put("before", bm3_before.getDepReGesamtzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("depReGesamtzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getDepReAnzBesch() != null) {

                diffMap.put("before", bm3_before.getDepReAnzBesch());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("depReAnzBesch", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getDepReIsin() != null) {

                diffMap.put("before", rtrim(bm3_before.getDepReIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("depReIsin", new HashMap<>(diffMap));
        } else {

            if ((bm3_before.getDepReGesamtzahl() != null || bm3_after.getDepReGesamtzahl() != null)
                    && ((bm3_before.getDepReGesamtzahl() == null && bm3_after.getDepReGesamtzahl() != null)
                            || (bm3_after.getDepReGesamtzahl() == null && bm3_before.getDepReGesamtzahl() != null)
                            || (bm3_before.getDepReGesamtzahl() != null && bm3_after.getDepReGesamtzahl() != null
                                    && bm3_before.getDepReGesamtzahl()
                                            .compareTo(bm3_after.getDepReGesamtzahl()) != 0))) {

                diffMap.clear();

                if (bm3_before.getDepReGesamtzahl() != null) {

                    diffMap.put("before", bm3_before.getDepReGesamtzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getDepReGesamtzahl());
                fieldMap.put("depReGesamtzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getDepReAnzBesch() != null || bm3_after.getDepReAnzBesch() != null)
                    && ((bm3_before.getDepReAnzBesch() == null && bm3_after.getDepReAnzBesch() != null)
                            || (bm3_after.getDepReAnzBesch() == null && bm3_before.getDepReAnzBesch() != null)
                            || (bm3_before.getDepReAnzBesch() != null && bm3_after.getDepReAnzBesch() != null
                                    && bm3_before.getDepReAnzBesch().compareTo(bm3_after.getDepReAnzBesch()) != 0))) {

                diffMap.clear();

                if (bm3_before.getDepReAnzBesch() != null) {

                    diffMap.put("before", bm3_before.getDepReAnzBesch());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getDepReAnzBesch());
                fieldMap.put("depReAnzBesch", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3_before.getDepReIsin() == null && bm3_after.getDepReIsin() == null))
                    && ((bm3_before.getDepReIsin() == null && !rtrim(bm3_after.getDepReIsin()).equals(null))
                            || (bm3_after.getDepReIsin() == null && !(bm3_before.getDepReIsin()).equals(null))
                            || (bm3_before.getDepReIsin() != null && bm3_after.getDepReIsin() != null
                                    && !(rtrim(bm3_before.getDepReIsin()).equals(rtrim(bm3_after.getDepReIsin())))))) {

                diffMap.clear();

                if (bm3_before.getDepReIsin() != null) {

                    diffMap.put("before", rtrim(bm3_before.getDepReIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getDepReIsin() != null) {

                    diffMap.put("after", rtrim(bm3_after.getDepReIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("depReIsin", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("DepositoryReceipts")) {
            sectionMap.get("DepositoryReceipts").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("DepositoryReceipts", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed DepositoryReceipts");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM3") != null) {
                rootMap.get("TR_TABLE_BM3").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM3", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffPara43Details(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (bm3_before == null) {

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP431());
            fieldMap.put("ertragP431", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragTevP431());
            fieldMap.put("ertragTevP431", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP19Reit1());
            fieldMap.put("ertragP19Reit1", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtBeschrStpfl1());
            fieldMap.put("ertBeschrStpfl1", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getAbzDreiFueP431());
            fieldMap.put("abzDreiFueP431", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getKapDreiFueP431());
            fieldMap.put("kapDreiFueP431", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP432());
            fieldMap.put("ertragP432", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtBeschrStpfl2());
            fieldMap.put("ertBeschrStpfl2", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP433());
            fieldMap.put("ertragP433", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getAbzDreiFueP433());
            fieldMap.put("abzDreiFueP433", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getKapDreiFueP433());
            fieldMap.put("kapDreiFueP433", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP434());
            fieldMap.put("ertragP434", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP435());
            fieldMap.put("ertragP435", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP436());
            fieldMap.put("ertragP436", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragTevP436());
            fieldMap.put("ertragTevP436", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP19Reit6());
            fieldMap.put("ertragP19Reit6", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP437());
            fieldMap.put("ertragP437", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP438());
            fieldMap.put("ertragP438", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragP439());
            fieldMap.put("ertragP439", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErtragTevP439());
            fieldMap.put("ertragTevP439", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getGewinnVerInv());
            fieldMap.put("gewinnVerInv", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getErsatzBmg());
            fieldMap.put("ersatzBmg", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getKapest());
            fieldMap.put("kapest", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getSolz());
            fieldMap.put("solz", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getEinlagekontoSum());
            fieldMap.put("einlagekontoSum", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getAuslInvKStabzug());
            fieldMap.put("auslInvKStabzug", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm3_after.getKStabzugP43Nr5())) {

                diffMap.clear();

                if (StringUtils.isNotBlank(bm3_after.getKStabzugP43Nr5())) {
                    diffMap.put("after", rtrim(bm3_after.getKStabzugP43Nr5()));
                } else {
                    diffMap.put("after", bm3_after.getKStabzugP43Nr5());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("kStabzugP43Nr5", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm3_after.getKStabzugP43Nr1())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getKStabzugP43Nr1())) {
                    diffMap.put("after", rtrim(bm3_after.getKStabzugP43Nr1()));
                } else {
                    diffMap.put("after", bm3_after.getKStabzugP43Nr1());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("kStabzugP43Nr1", new HashMap<>(diffMap));
        } else if (bm3_after == null) {

            diffMap.clear();

            if (bm3_before.getErtragP431() != null) {

                diffMap.put("before", bm3_before.getErtragP431());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP431", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragTevP431() != null) {

                diffMap.put("before", bm3_before.getErtragTevP431());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragTevP431", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP19Reit1() != null) {

                diffMap.put("before", bm3_before.getErtragP19Reit1());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP19Reit1", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtBeschrStpfl1() != null) {

                diffMap.put("before", bm3_before.getErtBeschrStpfl1());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertBeschrStpfl1", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getAbzDreiFueP431() != null) {

                diffMap.put("before", bm3_before.getAbzDreiFueP431());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("abzDreiFueP431", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getKapDreiFueP431() != null) {

                diffMap.put("before", bm3_before.getKapDreiFueP431());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kapDreiFueP431", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP432() != null) {

                diffMap.put("before", bm3_before.getErtragP432());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP432", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtBeschrStpfl2() != null) {

                diffMap.put("before", bm3_before.getErtBeschrStpfl2());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertBeschrStpfl2", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP433() != null) {

                diffMap.put("before", bm3_before.getErtragP433());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP433", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getAbzDreiFueP433() != null) {

                diffMap.put("before", bm3_before.getAbzDreiFueP433());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("abzDreiFueP433", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getKapDreiFueP433() != null) {

                diffMap.put("before", bm3_before.getKapDreiFueP433());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kapDreiFueP433", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP434() != null) {

                diffMap.put("before", bm3_before.getErtragP434());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP434", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP435() != null) {

                diffMap.put("before", bm3_before.getErtragP435());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP435", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP436() != null) {

                diffMap.put("before", bm3_before.getErtragP436());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP436", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragTevP436() != null) {

                diffMap.put("before", bm3_before.getErtragTevP436());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragTevP436", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP19Reit6() != null) {

                diffMap.put("before", bm3_before.getErtragP19Reit6());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP19Reit6", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP437() != null) {

                diffMap.put("before", bm3_before.getErtragP437());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP437", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP438() != null) {

                diffMap.put("before", bm3_before.getErtragP438());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP438", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragP439() != null) {

                diffMap.put("before", bm3_before.getErtragP439());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragP439", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErtragTevP439() != null) {

                diffMap.put("before", bm3_before.getErtragTevP439());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ertragTevP439", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getGewinnVerInv() != null) {

                diffMap.put("before", bm3_before.getGewinnVerInv());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("gewinnVerInv", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getErsatzBmg() != null) {

                diffMap.put("before", bm3_before.getErsatzBmg());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ersatzBmg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getKapest() != null) {

                diffMap.put("before", bm3_before.getKapest());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kapest", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getSolz() != null) {

                diffMap.put("before", bm3_before.getSolz());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("solz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getEinlagekontoSum() != null) {

                diffMap.put("before", bm3_before.getEinlagekontoSum());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("einlagekontoSum", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getAuslInvKStabzug() != null) {

                diffMap.put("before", bm3_before.getAuslInvKStabzug());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("auslInvKStabzug", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getKStabzugP43Nr5() != null) {

                diffMap.put("before", rtrim(bm3_before.getKStabzugP43Nr5()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kStabzugP43Nr5", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getKStabzugP43Nr1() != null) {

                diffMap.put("before", rtrim(bm3_before.getKStabzugP43Nr1()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("kStabzugP43Nr1", new HashMap<>(diffMap));
        } else {

            if ((bm3_before.getErtragP431() != null || bm3_after.getErtragP431() != null)
                    && ((bm3_before.getErtragP431() == null && bm3_after.getErtragP431() != null)
                            || (bm3_after.getErtragP431() == null && bm3_before.getErtragP431() != null)
                            || (bm3_before.getErtragP431() != null && bm3_after.getErtragP431() != null
                                    && bm3_before.getErtragP431().compareTo(bm3_after.getErtragP431()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP431() != null) {

                    diffMap.put("before", bm3_before.getErtragP431());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP431());
                fieldMap.put("ertragP431", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragTevP431() != null || bm3_after.getErtragTevP431() != null)
                    && ((bm3_before.getErtragTevP431() == null && bm3_after.getErtragTevP431() != null)
                            || (bm3_after.getErtragTevP431() == null && bm3_before.getErtragTevP431() != null)
                            || (bm3_before.getErtragTevP431() != null && bm3_after.getErtragTevP431() != null
                                    && bm3_before.getErtragTevP431().compareTo(bm3_after.getErtragTevP431()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragTevP431() != null) {

                    diffMap.put("before", bm3_before.getErtragTevP431());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragTevP431());
                fieldMap.put("ertragTevP431", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP19Reit1() != null || bm3_after.getErtragP19Reit1() != null)
                    && ((bm3_before.getErtragP19Reit1() == null && bm3_after.getErtragP19Reit1() != null)
                            || (bm3_after.getErtragP19Reit1() == null && bm3_before.getErtragP19Reit1() != null)
                            || (bm3_before.getErtragP19Reit1() != null && bm3_after.getErtragP19Reit1() != null
                                    && bm3_before.getErtragP19Reit1().compareTo(bm3_after.getErtragP19Reit1()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP19Reit1() != null) {

                    diffMap.put("before", bm3_before.getErtragP19Reit1());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP19Reit1());
                fieldMap.put("ertragP19Reit1", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtBeschrStpfl1() != null || bm3_after.getErtBeschrStpfl1() != null)
                    && ((bm3_before.getErtBeschrStpfl1() == null && bm3_after.getErtBeschrStpfl1() != null)
                            || (bm3_after.getErtBeschrStpfl1() == null && bm3_before.getErtBeschrStpfl1() != null)
                            || (bm3_before.getErtBeschrStpfl1() != null && bm3_after.getErtBeschrStpfl1() != null
                                    && bm3_before.getErtBeschrStpfl1()
                                            .compareTo(bm3_after.getErtBeschrStpfl1()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtBeschrStpfl1() != null) {

                    diffMap.put("before", bm3_before.getErtBeschrStpfl1());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtBeschrStpfl1());
                fieldMap.put("ertBeschrStpfl1", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getAbzDreiFueP431() != null || bm3_after.getAbzDreiFueP431() != null)
                    && ((bm3_before.getAbzDreiFueP431() == null && bm3_after.getAbzDreiFueP431() != null)
                            || (bm3_after.getAbzDreiFueP431() == null && bm3_before.getAbzDreiFueP431() != null)
                            || (bm3_before.getAbzDreiFueP431() != null && bm3_after.getAbzDreiFueP431() != null
                                    && bm3_before.getAbzDreiFueP431().compareTo(bm3_after.getAbzDreiFueP431()) != 0))) {

                diffMap.clear();

                if (bm3_before.getAbzDreiFueP431() != null) {

                    diffMap.put("before", bm3_before.getAbzDreiFueP431());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getAbzDreiFueP431());
                fieldMap.put("abzDreiFueP431", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getKapDreiFueP431() != null || bm3_after.getKapDreiFueP431() != null)
                    && ((bm3_before.getKapDreiFueP431() == null && bm3_after.getKapDreiFueP431() != null)
                            || (bm3_after.getKapDreiFueP431() == null && bm3_before.getKapDreiFueP431() != null)
                            || (bm3_before.getKapDreiFueP431() != null && bm3_after.getKapDreiFueP431() != null
                                    && bm3_before.getKapDreiFueP431().compareTo(bm3_after.getKapDreiFueP431()) != 0))) {

                diffMap.clear();

                if (bm3_before.getKapDreiFueP431() != null) {

                    diffMap.put("before", bm3_before.getKapDreiFueP431());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getKapDreiFueP431());
                fieldMap.put("kapDreiFueP431", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP432() != null || bm3_after.getErtragP432() != null)
                    && ((bm3_before.getErtragP432() == null && bm3_after.getErtragP432() != null)
                            || (bm3_after.getErtragP432() == null && bm3_before.getErtragP432() != null)
                            || (bm3_before.getErtragP432() != null && bm3_after.getErtragP432() != null
                                    && bm3_before.getErtragP432().compareTo(bm3_after.getErtragP432()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP432() != null) {

                    diffMap.put("before", bm3_before.getErtragP432());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP432());
                fieldMap.put("ertragP432", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtBeschrStpfl2() != null || bm3_after.getErtBeschrStpfl2() != null)
                    && ((bm3_before.getErtBeschrStpfl2() == null && bm3_after.getErtBeschrStpfl2() != null)
                            || (bm3_after.getErtBeschrStpfl2() == null && bm3_before.getErtBeschrStpfl2() != null)
                            || (bm3_before.getErtBeschrStpfl2() != null && bm3_after.getErtBeschrStpfl2() != null
                                    && bm3_before.getErtBeschrStpfl2()
                                            .compareTo(bm3_after.getErtBeschrStpfl2()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtBeschrStpfl2() != null) {

                    diffMap.put("before", bm3_before.getErtBeschrStpfl2());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtBeschrStpfl2());
                fieldMap.put("ertBeschrStpfl2", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP433() != null || bm3_after.getErtragP433() != null)
                    && ((bm3_before.getErtragP433() == null && bm3_after.getErtragP433() != null)
                            || (bm3_after.getErtragP433() == null && bm3_before.getErtragP433() != null)
                            || (bm3_before.getErtragP433() != null && bm3_after.getErtragP433() != null
                                    && bm3_before.getErtragP433().compareTo(bm3_after.getErtragP433()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP433() != null) {

                    diffMap.put("before", bm3_before.getErtragP433());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP433());
                fieldMap.put("ertragP433", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getAbzDreiFueP433() != null || bm3_after.getAbzDreiFueP433() != null)
                    && ((bm3_before.getAbzDreiFueP433() == null && bm3_after.getAbzDreiFueP433() != null)
                            || (bm3_after.getAbzDreiFueP433() == null && bm3_before.getAbzDreiFueP433() != null)
                            || (bm3_before.getAbzDreiFueP433() != null && bm3_after.getAbzDreiFueP433() != null
                                    && bm3_before.getAbzDreiFueP433().compareTo(bm3_after.getAbzDreiFueP433()) != 0))) {

                diffMap.clear();

                if (bm3_before.getAbzDreiFueP433() != null) {

                    diffMap.put("before", bm3_before.getAbzDreiFueP433());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getAbzDreiFueP433());
                fieldMap.put("abzDreiFueP433", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getKapDreiFueP433() != null || bm3_after.getKapDreiFueP433() != null)
                    && ((bm3_before.getKapDreiFueP433() == null && bm3_after.getKapDreiFueP433() != null)
                            || (bm3_after.getKapDreiFueP433() == null && bm3_before.getKapDreiFueP433() != null)
                            || (bm3_before.getKapDreiFueP433() != null && bm3_after.getKapDreiFueP433() != null
                                    && bm3_before.getKapDreiFueP433().compareTo(bm3_after.getKapDreiFueP433()) != 0))) {

                diffMap.clear();

                if (bm3_before.getKapDreiFueP433() != null) {

                    diffMap.put("before", bm3_before.getKapDreiFueP433());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getKapDreiFueP433());
                fieldMap.put("kapDreiFueP433", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP434() != null || bm3_after.getErtragP434() != null)
                    && ((bm3_before.getErtragP434() == null && bm3_after.getErtragP434() != null)
                            || (bm3_after.getErtragP434() == null && bm3_before.getErtragP434() != null)
                            || (bm3_before.getErtragP434() != null && bm3_after.getErtragP434() != null
                                    && bm3_before.getErtragP434().compareTo(bm3_after.getErtragP434()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP434() != null) {

                    diffMap.put("before", bm3_before.getErtragP434());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP434());
                fieldMap.put("ertragP434", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP435() != null || bm3_after.getErtragP435() != null)
                    && ((bm3_before.getErtragP435() == null && bm3_after.getErtragP435() != null)
                            || (bm3_after.getErtragP435() == null && bm3_before.getErtragP435() != null)
                            || (bm3_before.getErtragP435() != null && bm3_after.getErtragP435() != null
                                    && bm3_before.getErtragP435().compareTo(bm3_after.getErtragP435()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP435() != null) {

                    diffMap.put("before", bm3_before.getErtragP435());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP435());
                fieldMap.put("ertragP435", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP436() != null || bm3_after.getErtragP436() != null)
                    && ((bm3_before.getErtragP436() == null && bm3_after.getErtragP436() != null)
                            || (bm3_after.getErtragP436() == null && bm3_before.getErtragP436() != null)
                            || (bm3_before.getErtragP436() != null && bm3_after.getErtragP436() != null
                                    && bm3_before.getErtragP436().compareTo(bm3_after.getErtragP436()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP436() != null) {

                    diffMap.put("before", bm3_before.getErtragP436());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP436());
                fieldMap.put("ertragP436", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragTevP436() != null || bm3_after.getErtragTevP436() != null)
                    && ((bm3_before.getErtragTevP436() == null && bm3_after.getErtragTevP436() != null)
                            || (bm3_after.getErtragTevP436() == null && bm3_before.getErtragTevP436() != null)
                            || (bm3_before.getErtragTevP436() != null && bm3_after.getErtragTevP436() != null
                                    && bm3_before.getErtragTevP436().compareTo(bm3_after.getErtragTevP436()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragTevP436() != null) {

                    diffMap.put("before", bm3_before.getErtragTevP436());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragTevP436());
                fieldMap.put("ertragTevP436", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP19Reit6() != null || bm3_after.getErtragP19Reit6() != null)
                    && ((bm3_before.getErtragP19Reit6() == null && bm3_after.getErtragP19Reit6() != null)
                            || (bm3_after.getErtragP19Reit6() == null && bm3_before.getErtragP19Reit6() != null)
                            || (bm3_before.getErtragP19Reit6() != null && bm3_after.getErtragP19Reit6() != null
                                    && bm3_before.getErtragP19Reit6().compareTo(bm3_after.getErtragP19Reit6()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP19Reit6() != null) {

                    diffMap.put("before", bm3_before.getErtragP19Reit6());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP19Reit6());
                fieldMap.put("ertragP19Reit6", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP437() != null || bm3_after.getErtragP437() != null)
                    && ((bm3_before.getErtragP437() == null && bm3_after.getErtragP437() != null)
                            || (bm3_after.getErtragP437() == null && bm3_before.getErtragP437() != null)
                            || (bm3_before.getErtragP437() != null && bm3_after.getErtragP437() != null
                                    && bm3_before.getErtragP437().compareTo(bm3_after.getErtragP437()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP437() != null) {

                    diffMap.put("before", bm3_before.getErtragP437());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP437());
                fieldMap.put("ertragP437", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP438() != null || bm3_after.getErtragP438() != null)
                    && ((bm3_before.getErtragP438() == null && bm3_after.getErtragP438() != null)
                            || (bm3_after.getErtragP438() == null && bm3_before.getErtragP438() != null)
                            || (bm3_before.getErtragP438() != null && bm3_after.getErtragP438() != null
                                    && bm3_before.getErtragP438().compareTo(bm3_after.getErtragP438()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP438() != null) {

                    diffMap.put("before", bm3_before.getErtragP438());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP438());
                fieldMap.put("ertragP438", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragP439() != null || bm3_after.getErtragP439() != null)
                    && ((bm3_before.getErtragP439() == null && bm3_after.getErtragP439() != null)
                            || (bm3_after.getErtragP439() == null && bm3_before.getErtragP439() != null)
                            || (bm3_before.getErtragP439() != null && bm3_after.getErtragP439() != null
                                    && bm3_before.getErtragP439().compareTo(bm3_after.getErtragP439()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragP439() != null) {

                    diffMap.put("before", bm3_before.getErtragP439());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragP439());
                fieldMap.put("ertragP439", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErtragTevP439() != null || bm3_after.getErtragTevP439() != null)
                    && ((bm3_before.getErtragTevP439() == null && bm3_after.getErtragTevP439() != null)
                            || (bm3_after.getErtragTevP439() == null && bm3_before.getErtragTevP439() != null)
                            || (bm3_before.getErtragTevP439() != null && bm3_after.getErtragTevP439() != null
                                    && bm3_before.getErtragTevP439().compareTo(bm3_after.getErtragTevP439()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErtragTevP439() != null) {

                    diffMap.put("before", bm3_before.getErtragTevP439());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErtragTevP439());
                fieldMap.put("ertragTevP439", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getGewinnVerInv() != null || bm3_after.getGewinnVerInv() != null)
                    && ((bm3_before.getGewinnVerInv() == null && bm3_after.getGewinnVerInv() != null)
                            || (bm3_after.getGewinnVerInv() == null && bm3_before.getGewinnVerInv() != null)
                            || (bm3_before.getGewinnVerInv() != null && bm3_after.getGewinnVerInv() != null
                                    && bm3_before.getGewinnVerInv().compareTo(bm3_after.getGewinnVerInv()) != 0))) {

                diffMap.clear();

                if (bm3_before.getGewinnVerInv() != null) {

                    diffMap.put("before", bm3_before.getGewinnVerInv());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getGewinnVerInv());
                fieldMap.put("gewinnVerInv", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getErsatzBmg() != null || bm3_after.getErsatzBmg() != null)
                    && ((bm3_before.getErsatzBmg() == null && bm3_after.getErsatzBmg() != null)
                            || (bm3_after.getErsatzBmg() == null && bm3_before.getErsatzBmg() != null)
                            || (bm3_before.getErsatzBmg() != null && bm3_after.getErsatzBmg() != null
                                    && bm3_before.getErsatzBmg().compareTo(bm3_after.getErsatzBmg()) != 0))) {

                diffMap.clear();

                if (bm3_before.getErsatzBmg() != null) {

                    diffMap.put("before", bm3_before.getErsatzBmg());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getErsatzBmg());
                fieldMap.put("ersatzBmg", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getKapest() != null || bm3_after.getKapest() != null)
                    && ((bm3_before.getKapest() == null && bm3_after.getKapest() != null)
                            || (bm3_after.getKapest() == null && bm3_before.getKapest() != null)
                            || (bm3_before.getKapest() != null && bm3_after.getKapest() != null
                                    && bm3_before.getKapest().compareTo(bm3_after.getKapest()) != 0))) {

                diffMap.clear();

                if (bm3_before.getKapest() != null) {

                    diffMap.put("before", bm3_before.getKapest());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getKapest());
                fieldMap.put("kapest", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getSolz() != null || bm3_after.getSolz() != null)
                    && ((bm3_before.getSolz() == null && bm3_after.getSolz() != null)
                            || (bm3_after.getSolz() == null && bm3_before.getSolz() != null)
                            || (bm3_before.getSolz() != null && bm3_after.getSolz() != null
                                    && bm3_before.getSolz().compareTo(bm3_after.getSolz()) != 0))) {

                diffMap.clear();

                if (bm3_before.getSolz() != null) {

                    diffMap.put("before", bm3_before.getSolz());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getSolz());
                fieldMap.put("solz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getEinlagekontoSum() != null || bm3_after.getEinlagekontoSum() != null)
                    && ((bm3_before.getEinlagekontoSum() == null && bm3_after.getEinlagekontoSum() != null)
                            || (bm3_after.getEinlagekontoSum() == null && bm3_before.getEinlagekontoSum() != null)
                            || (bm3_before.getEinlagekontoSum() != null && bm3_after.getEinlagekontoSum() != null
                                    && bm3_before.getEinlagekontoSum()
                                            .compareTo(bm3_after.getEinlagekontoSum()) != 0))) {

                diffMap.clear();

                if (bm3_before.getEinlagekontoSum() != null) {

                    diffMap.put("before", bm3_before.getEinlagekontoSum());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getEinlagekontoSum());
                fieldMap.put("einlagekontoSum", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getAuslInvKStabzug() != null || bm3_after.getAuslInvKStabzug() != null)
                    && ((bm3_before.getAuslInvKStabzug() == null && bm3_after.getAuslInvKStabzug() != null)
                            || (bm3_after.getAuslInvKStabzug() == null && bm3_before.getAuslInvKStabzug() != null)
                            || (bm3_before.getAuslInvKStabzug() != null && bm3_after.getAuslInvKStabzug() != null
                                    && bm3_before.getAuslInvKStabzug()
                                            .compareTo(bm3_after.getAuslInvKStabzug()) != 0))) {

                diffMap.clear();

                if (bm3_before.getAuslInvKStabzug() != null) {

                    diffMap.put("before", bm3_before.getAuslInvKStabzug());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getAuslInvKStabzug());
                fieldMap.put("auslInvKStabzug", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3_before.getKStabzugP43Nr5() == null && bm3_after.getKStabzugP43Nr5() == null))
                    && ((bm3_before.getKStabzugP43Nr5() == null && !rtrim(bm3_after.getKStabzugP43Nr5()).equals(null))
                            || (bm3_after.getKStabzugP43Nr5() == null && !(bm3_before.getKStabzugP43Nr5()).equals(null))
                            || (bm3_before.getKStabzugP43Nr5() != null && bm3_after.getKStabzugP43Nr5() != null
                                    && !(rtrim(bm3_before.getKStabzugP43Nr5())
                                            .equals(rtrim(bm3_after.getKStabzugP43Nr5())))))) {

                diffMap.clear();

                if (bm3_before.getKStabzugP43Nr5() != null) {

                    diffMap.put("before", rtrim(bm3_before.getKStabzugP43Nr5()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getKStabzugP43Nr5() != null) {

                    diffMap.put("after", rtrim(bm3_after.getKStabzugP43Nr5()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("kStabzugP43Nr5", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3_before.getKStabzugP43Nr1() == null && bm3_after.getKStabzugP43Nr1() == null))
                    && ((bm3_before.getKStabzugP43Nr1() == null && !rtrim(bm3_after.getKStabzugP43Nr1()).equals(null))
                            || (bm3_after.getKStabzugP43Nr1() == null && !(bm3_before.getKStabzugP43Nr1()).equals(null))
                            || (bm3_before.getKStabzugP43Nr1() != null && bm3_after.getKStabzugP43Nr1() != null
                                    && !(rtrim(bm3_before.getKStabzugP43Nr1())
                                            .equals(rtrim(bm3_after.getKStabzugP43Nr1())))))) {

                diffMap.clear();

                if (bm3_before.getKStabzugP43Nr1() != null) {

                    diffMap.put("before", rtrim(bm3_before.getKStabzugP43Nr1()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getKStabzugP43Nr1() != null) {

                    diffMap.put("after", rtrim(bm3_after.getKStabzugP43Nr1()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("kStabzugP43Nr1", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Para43Details")) {
            sectionMap.get("Para43Details").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Para43Details", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Para43Details");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM3") != null) {
                rootMap.get("TR_TABLE_BM3").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM3", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffPara16Abs1Nr1u2(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (bm3_before == null) {

            diffMap.clear();

            diffMap.put("after", bm3_after.getInvErt1612());
            fieldMap.put("invErt1612", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612Aktf());
            fieldMap.put("inv1612Aktf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612AktfVp());
            fieldMap.put("inv1612AktfVp", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612Misf());
            fieldMap.put("inv1612Misf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612MisfVp());
            fieldMap.put("inv1612MisfVp", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612Immf());
            fieldMap.put("inv1612Immf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612ImmfVp());
            fieldMap.put("inv1612ImmfVp", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612Aimmf());
            fieldMap.put("inv1612Aimmf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612AimmfVp());
            fieldMap.put("inv1612AimmfVp", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612Sonf());
            fieldMap.put("inv1612Sonf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv1612SonfVp());
            fieldMap.put("inv1612SonfVp", new HashMap<>(diffMap));
        } else if (bm3_after == null) {

            diffMap.clear();

            if (bm3_before.getInvErt1612() != null) {

                diffMap.put("before", bm3_before.getInvErt1612());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("invErt1612", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612Aktf() != null) {

                diffMap.put("before", bm3_before.getInv1612Aktf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612Aktf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612AktfVp() != null) {

                diffMap.put("before", bm3_before.getInv1612AktfVp());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612AktfVp", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612Misf() != null) {

                diffMap.put("before", bm3_before.getInv1612Misf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612Misf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612MisfVp() != null) {

                diffMap.put("before", bm3_before.getInv1612MisfVp());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612MisfVp", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612Immf() != null) {

                diffMap.put("before", bm3_before.getInv1612Immf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612Immf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612ImmfVp() != null) {

                diffMap.put("before", bm3_before.getInv1612ImmfVp());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612ImmfVp", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612Aimmf() != null) {

                diffMap.put("before", bm3_before.getInv1612Aimmf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612Aimmf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612AimmfVp() != null) {

                diffMap.put("before", bm3_before.getInv1612AimmfVp());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612AimmfVp", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612Sonf() != null) {

                diffMap.put("before", bm3_before.getInv1612Sonf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612Sonf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv1612SonfVp() != null) {

                diffMap.put("before", bm3_before.getInv1612SonfVp());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv1612SonfVp", new HashMap<>(diffMap));
        } else {

            if ((bm3_before.getInvErt1612() != null || bm3_after.getInvErt1612() != null)
                    && ((bm3_before.getInvErt1612() == null && bm3_after.getInvErt1612() != null)
                            || (bm3_after.getInvErt1612() == null && bm3_before.getInvErt1612() != null)
                            || (bm3_before.getInvErt1612() != null && bm3_after.getInvErt1612() != null
                                    && bm3_before.getInvErt1612().compareTo(bm3_after.getInvErt1612()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInvErt1612() != null) {

                    diffMap.put("before", bm3_before.getInvErt1612());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInvErt1612());
                fieldMap.put("invErt1612", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612Aktf() != null || bm3_after.getInv1612Aktf() != null)
                    && ((bm3_before.getInv1612Aktf() == null && bm3_after.getInv1612Aktf() != null)
                            || (bm3_after.getInv1612Aktf() == null && bm3_before.getInv1612Aktf() != null)
                            || (bm3_before.getInv1612Aktf() != null && bm3_after.getInv1612Aktf() != null
                                    && bm3_before.getInv1612Aktf().compareTo(bm3_after.getInv1612Aktf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612Aktf() != null) {

                    diffMap.put("before", bm3_before.getInv1612Aktf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612Aktf());
                fieldMap.put("inv1612Aktf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612AktfVp() != null || bm3_after.getInv1612AktfVp() != null)
                    && ((bm3_before.getInv1612AktfVp() == null && bm3_after.getInv1612AktfVp() != null)
                            || (bm3_after.getInv1612AktfVp() == null && bm3_before.getInv1612AktfVp() != null)
                            || (bm3_before.getInv1612AktfVp() != null && bm3_after.getInv1612AktfVp() != null
                                    && bm3_before.getInv1612AktfVp().compareTo(bm3_after.getInv1612AktfVp()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612AktfVp() != null) {

                    diffMap.put("before", bm3_before.getInv1612AktfVp());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612AktfVp());
                fieldMap.put("inv1612AktfVp", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612Misf() != null || bm3_after.getInv1612Misf() != null)
                    && ((bm3_before.getInv1612Misf() == null && bm3_after.getInv1612Misf() != null)
                            || (bm3_after.getInv1612Misf() == null && bm3_before.getInv1612Misf() != null)
                            || (bm3_before.getInv1612Misf() != null && bm3_after.getInv1612Misf() != null
                                    && bm3_before.getInv1612Misf().compareTo(bm3_after.getInv1612Misf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612Misf() != null) {

                    diffMap.put("before", bm3_before.getInv1612Misf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612Misf());
                fieldMap.put("inv1612Misf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612MisfVp() != null || bm3_after.getInv1612MisfVp() != null)
                    && ((bm3_before.getInv1612MisfVp() == null && bm3_after.getInv1612MisfVp() != null)
                            || (bm3_after.getInv1612MisfVp() == null && bm3_before.getInv1612MisfVp() != null)
                            || (bm3_before.getInv1612MisfVp() != null && bm3_after.getInv1612MisfVp() != null
                                    && bm3_before.getInv1612MisfVp().compareTo(bm3_after.getInv1612MisfVp()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612MisfVp() != null) {

                    diffMap.put("before", bm3_before.getInv1612MisfVp());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612MisfVp());
                fieldMap.put("inv1612MisfVp", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612Immf() != null || bm3_after.getInv1612Immf() != null)
                    && ((bm3_before.getInv1612Immf() == null && bm3_after.getInv1612Immf() != null)
                            || (bm3_after.getInv1612Immf() == null && bm3_before.getInv1612Immf() != null)
                            || (bm3_before.getInv1612Immf() != null && bm3_after.getInv1612Immf() != null
                                    && bm3_before.getInv1612Immf().compareTo(bm3_after.getInv1612Immf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612Immf() != null) {

                    diffMap.put("before", bm3_before.getInv1612Immf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612Immf());
                fieldMap.put("inv1612Immf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612ImmfVp() != null || bm3_after.getInv1612ImmfVp() != null)
                    && ((bm3_before.getInv1612ImmfVp() == null && bm3_after.getInv1612ImmfVp() != null)
                            || (bm3_after.getInv1612ImmfVp() == null && bm3_before.getInv1612ImmfVp() != null)
                            || (bm3_before.getInv1612ImmfVp() != null && bm3_after.getInv1612ImmfVp() != null
                                    && bm3_before.getInv1612ImmfVp().compareTo(bm3_after.getInv1612ImmfVp()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612ImmfVp() != null) {

                    diffMap.put("before", bm3_before.getInv1612ImmfVp());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612ImmfVp());
                fieldMap.put("inv1612ImmfVp", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612Aimmf() != null || bm3_after.getInv1612Aimmf() != null)
                    && ((bm3_before.getInv1612Aimmf() == null && bm3_after.getInv1612Aimmf() != null)
                            || (bm3_after.getInv1612Aimmf() == null && bm3_before.getInv1612Aimmf() != null)
                            || (bm3_before.getInv1612Aimmf() != null && bm3_after.getInv1612Aimmf() != null
                                    && bm3_before.getInv1612Aimmf().compareTo(bm3_after.getInv1612Aimmf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612Aimmf() != null) {

                    diffMap.put("before", bm3_before.getInv1612Aimmf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612Aimmf());
                fieldMap.put("inv1612Aimmf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612AimmfVp() != null || bm3_after.getInv1612AimmfVp() != null)
                    && ((bm3_before.getInv1612AimmfVp() == null && bm3_after.getInv1612AimmfVp() != null)
                            || (bm3_after.getInv1612AimmfVp() == null && bm3_before.getInv1612AimmfVp() != null)
                            || (bm3_before.getInv1612AimmfVp() != null && bm3_after.getInv1612AimmfVp() != null
                                    && bm3_before.getInv1612AimmfVp().compareTo(bm3_after.getInv1612AimmfVp()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612AimmfVp() != null) {

                    diffMap.put("before", bm3_before.getInv1612AimmfVp());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612AimmfVp());
                fieldMap.put("inv1612AimmfVp", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612Sonf() != null || bm3_after.getInv1612Sonf() != null)
                    && ((bm3_before.getInv1612Sonf() == null && bm3_after.getInv1612Sonf() != null)
                            || (bm3_after.getInv1612Sonf() == null && bm3_before.getInv1612Sonf() != null)
                            || (bm3_before.getInv1612Sonf() != null && bm3_after.getInv1612Sonf() != null
                                    && bm3_before.getInv1612Sonf().compareTo(bm3_after.getInv1612Sonf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612Sonf() != null) {

                    diffMap.put("before", bm3_before.getInv1612Sonf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612Sonf());
                fieldMap.put("inv1612Sonf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv1612SonfVp() != null || bm3_after.getInv1612SonfVp() != null)
                    && ((bm3_before.getInv1612SonfVp() == null && bm3_after.getInv1612SonfVp() != null)
                            || (bm3_after.getInv1612SonfVp() == null && bm3_before.getInv1612SonfVp() != null)
                            || (bm3_before.getInv1612SonfVp() != null && bm3_after.getInv1612SonfVp() != null
                                    && bm3_before.getInv1612SonfVp().compareTo(bm3_after.getInv1612SonfVp()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv1612SonfVp() != null) {

                    diffMap.put("before", bm3_before.getInv1612SonfVp());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv1612SonfVp());
                fieldMap.put("inv1612SonfVp", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Para16Abs1Nr1u2")) {
            sectionMap.get("Para16Abs1Nr1u2").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Para16Abs1Nr1u2", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Para16Abs1Nr1u2");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM3") != null) {
                rootMap.get("TR_TABLE_BM3").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM3", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffAllgemeinMusterIII(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (bm3_before == null) {

            if (!StringUtils.isEmpty(bm3_after.getTrTableBm3PK().getKeySatzart())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getTrTableBm3PK().getKeySatzart())) {
                    diffMap.put("after", rtrim(bm3_after.getTrTableBm3PK().getKeySatzart()));
                } else {
                    diffMap.put("after", bm3_after.getTrTableBm3PK().getKeySatzart());
                }
            } else {
                diffMap.put("after", "");
            }

            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm3_after.getStornierung())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getStornierung())) {
                    diffMap.put("after", rtrim(bm3_after.getStornierung()));
                } else {
                    diffMap.put("after", bm3_after.getStornierung());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("stornierung", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm3_after.getOrdnungsnummer())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getOrdnungsnummer())) {
                    diffMap.put("after", rtrim(bm3_after.getOrdnungsnummer()));
                } else {
                    diffMap.put("after", bm3_after.getOrdnungsnummer());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("ordnungsnummer", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm3_after.getKeinOriginalM3())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getKeinOriginalM3())) {
                    diffMap.put("after", rtrim(bm3_after.getKeinOriginalM3()));
                } else {
                    diffMap.put("after", bm3_after.getKeinOriginalM3());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("keinOriginalM3", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm3_after.getAbstandSteuerabz())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getAbstandSteuerabz())) {
                    diffMap.put("after", rtrim(bm3_after.getAbstandSteuerabz()));
                } else {
                    diffMap.put("after", bm3_after.getAbstandSteuerabz());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("abstandSteuerabz", new HashMap<>(diffMap));

            diffMap.clear();
            diffMap.put("after", bm3_after.getZahlungstag());

            fieldMap.put("zahlungstag", new HashMap<>(diffMap));

            diffMap.clear();
            diffMap.put("after", bm3_after.getZahlungszeitrVon());

            fieldMap.put("zahlungszeitrVon", new HashMap<>(diffMap));

            diffMap.clear();
            diffMap.put("after", bm3_after.getZahlungszeitrBis());

            fieldMap.put("zahlungszeitrBis", new HashMap<>(diffMap));
        } else if (bm3_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm3_before.getTrTableBm3PK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getStornierung() != null) {

                diffMap.put("before", rtrim(bm3_before.getStornierung()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("stornierung", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getOrdnungsnummer() != null) {

                diffMap.put("before", rtrim(bm3_before.getOrdnungsnummer()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("ordnungsnummer", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getKeinOriginalM3() != null) {

                diffMap.put("before", rtrim(bm3_before.getKeinOriginalM3()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("keinOriginalM3", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getAbstandSteuerabz() != null) {

                diffMap.put("before", rtrim(bm3_before.getAbstandSteuerabz()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("abstandSteuerabz", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getZahlungstag() != null) {

                diffMap.put("before", bm3_before.getZahlungstag());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("zahlungstag", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getZahlungszeitrVon() != null) {

                diffMap.put("before", bm3_before.getZahlungszeitrVon());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("zahlungszeitrVon", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getZahlungszeitrBis() != null) {

                diffMap.put("before", bm3_before.getZahlungszeitrBis());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("zahlungszeitrBis", new HashMap<>(diffMap));
        } else {

            if ((!(bm3_before.getStornierung() == null && bm3_after.getStornierung() == null)) && ((bm3_before
                    .getStornierung() == null && !rtrim(bm3_after.getStornierung()).equals(null))
                    || (bm3_after.getStornierung() == null && !(bm3_before.getStornierung()).equals(null))
                    || (bm3_before.getStornierung() != null && bm3_after.getStornierung() != null
                            && !(rtrim(bm3_before.getStornierung()).equals(rtrim(bm3_after.getStornierung())))))) {

                diffMap.clear();

                if (bm3_before.getStornierung() != null) {

                    diffMap.put("before", rtrim(bm3_before.getStornierung()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getStornierung() != null) {

                    diffMap.put("after", rtrim(bm3_after.getStornierung()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("stornierung", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3_before.getOrdnungsnummer() == null && bm3_after.getOrdnungsnummer() == null))
                    && ((bm3_before.getOrdnungsnummer() == null && !rtrim(bm3_after.getOrdnungsnummer()).equals(null))
                            || (bm3_after.getOrdnungsnummer() == null && !(bm3_before.getOrdnungsnummer()).equals(null))
                            || (bm3_before.getOrdnungsnummer() != null && bm3_after.getOrdnungsnummer() != null
                                    && !(rtrim(bm3_before.getOrdnungsnummer())
                                            .equals(rtrim(bm3_after.getOrdnungsnummer())))))) {

                diffMap.clear();

                if (bm3_before.getOrdnungsnummer() != null) {

                    diffMap.put("before", rtrim(bm3_before.getOrdnungsnummer()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getOrdnungsnummer() != null) {

                    diffMap.put("after", rtrim(bm3_after.getOrdnungsnummer()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("ordnungsnummer", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3_before.getKeinOriginalM3() == null && bm3_after.getKeinOriginalM3() == null))
                    && ((bm3_before.getKeinOriginalM3() == null && !rtrim(bm3_after.getKeinOriginalM3()).equals(null))
                            || (bm3_after.getKeinOriginalM3() == null && !(bm3_before.getKeinOriginalM3()).equals(null))
                            || (bm3_before.getKeinOriginalM3() != null && bm3_after.getKeinOriginalM3() != null
                                    && !(rtrim(bm3_before.getKeinOriginalM3())
                                            .equals(rtrim(bm3_after.getKeinOriginalM3())))))) {

                diffMap.clear();

                if (bm3_before.getKeinOriginalM3() != null) {

                    diffMap.put("before", rtrim(bm3_before.getKeinOriginalM3()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getKeinOriginalM3() != null) {

                    diffMap.put("after", rtrim(bm3_after.getKeinOriginalM3()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("keinOriginalM3", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3_before.getAbstandSteuerabz() == null && bm3_after.getAbstandSteuerabz() == null))
                    && ((bm3_before.getAbstandSteuerabz() == null
                            && !rtrim(bm3_after.getAbstandSteuerabz()).equals(null))
                            || (bm3_after.getAbstandSteuerabz() == null
                                    && !(bm3_before.getAbstandSteuerabz()).equals(null))
                            || (bm3_before.getAbstandSteuerabz() != null && bm3_after.getAbstandSteuerabz() != null
                                    && !(rtrim(bm3_before.getAbstandSteuerabz())
                                            .equals(rtrim(bm3_after.getAbstandSteuerabz())))))) {

                diffMap.clear();

                if (bm3_before.getAbstandSteuerabz() != null) {

                    diffMap.put("before", rtrim(bm3_before.getAbstandSteuerabz()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getAbstandSteuerabz() != null) {

                    diffMap.put("after", rtrim(bm3_after.getAbstandSteuerabz()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("abstandSteuerabz", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getZahlungstag() != null || bm3_after.getZahlungstag() != null)
                    && ((bm3_before.getZahlungstag() == null && bm3_after.getZahlungstag() != null)
                            || (bm3_after.getZahlungstag() == null && bm3_before.getZahlungstag() != null)
                            || (bm3_before.getZahlungstag() != null && bm3_after.getZahlungstag() != null
                                    && bm3_before.getZahlungstag().compareTo(bm3_after.getZahlungstag()) != 0))) {

                diffMap.clear();

                if (bm3_before.getZahlungstag() != null) {

                    diffMap.put("before", bm3_before.getZahlungstag());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getZahlungstag());
                fieldMap.put("zahlungstag", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getZahlungszeitrVon() != null || bm3_after.getZahlungszeitrVon() != null)
                    && ((bm3_before.getZahlungszeitrVon() == null && bm3_after.getZahlungszeitrVon() != null)
                            || (bm3_after.getZahlungszeitrVon() == null && bm3_before.getZahlungszeitrVon() != null)
                            || (bm3_before.getZahlungszeitrVon() != null && bm3_after.getZahlungszeitrVon() != null
                                    && bm3_before.getZahlungszeitrVon()
                                            .compareTo(bm3_after.getZahlungszeitrVon()) != 0))) {

                diffMap.clear();

                if (bm3_before.getZahlungszeitrVon() != null) {

                    diffMap.put("before", bm3_before.getZahlungszeitrVon());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getZahlungszeitrVon());
                fieldMap.put("zahlungszeitrVon", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getZahlungszeitrBis() != null || bm3_after.getZahlungszeitrBis() != null)
                    && ((bm3_before.getZahlungszeitrBis() == null && bm3_after.getZahlungszeitrBis() != null)
                            || (bm3_after.getZahlungszeitrBis() == null && bm3_before.getZahlungszeitrBis() != null)
                            || (bm3_before.getZahlungszeitrBis() != null && bm3_after.getZahlungszeitrBis() != null
                                    && bm3_before.getZahlungszeitrBis()
                                            .compareTo(bm3_after.getZahlungszeitrBis()) != 0))) {

                diffMap.clear();

                if (bm3_before.getZahlungszeitrBis() != null) {

                    diffMap.put("before", bm3_before.getZahlungszeitrBis());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getZahlungszeitrBis());
                fieldMap.put("zahlungszeitrBis", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AllgemeinMusterIII")) {
            sectionMap.get("AllgemeinMusterIII").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AllgemeinMusterIII", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AllgemeinMusterIII");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM3") != null) {
                rootMap.get("TR_TABLE_BM3").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM3", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffAuslSpezInvest(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (bm3_before == null) {

            if (!StringUtils.isEmpty(bm3_after.getAuslSpezInv())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getAuslSpezInv())) {
                    diffMap.put("after", rtrim(bm3_after.getAuslSpezInv()));
                } else {
                    diffMap.put("after", bm3_after.getAuslSpezInv());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("auslSpezInv", new HashMap<>(diffMap));
        } else if (bm3_after == null) {

            diffMap.clear();

            if (bm3_before.getAuslSpezInv() != null) {

                diffMap.put("before", rtrim(bm3_before.getAuslSpezInv()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("auslSpezInv", new HashMap<>(diffMap));
        } else {

            if ((!(bm3_before.getAuslSpezInv() == null && bm3_after.getAuslSpezInv() == null)) && ((bm3_before
                    .getAuslSpezInv() == null && !rtrim(bm3_after.getAuslSpezInv()).equals(null))
                    || (bm3_after.getAuslSpezInv() == null && !(bm3_before.getAuslSpezInv()).equals(null))
                    || (bm3_before.getAuslSpezInv() != null && bm3_after.getAuslSpezInv() != null
                            && !(rtrim(bm3_before.getAuslSpezInv()).equals(rtrim(bm3_after.getAuslSpezInv())))))) {

                diffMap.clear();

                if (bm3_before.getAuslSpezInv() != null) {

                    diffMap.put("before", rtrim(bm3_before.getAuslSpezInv()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getAuslSpezInv() != null) {

                    diffMap.put("after", rtrim(bm3_after.getAuslSpezInv()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("auslSpezInv", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AuslSpezInvest")) {
            sectionMap.get("AuslSpezInvest").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AuslSpezInvest", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AuslSpezInvest");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM3") != null) {
                rootMap.get("TR_TABLE_BM3").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM3", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffInvestmentanteile(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (bm3_before == null) {

            if (!StringUtils.isEmpty(bm3_after.getInvVorhanden())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getInvVorhanden())) {
                    diffMap.put("after", rtrim(bm3_after.getInvVorhanden()));
                } else {
                    diffMap.put("after", bm3_after.getInvVorhanden());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("invVorhanden", new HashMap<>(diffMap));
        } else if (bm3_after == null) {

            diffMap.clear();

            if (bm3_before.getInvVorhanden() != null) {

                diffMap.put("before", rtrim(bm3_before.getInvVorhanden()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("invVorhanden", new HashMap<>(diffMap));
        } else {

            if ((!(bm3_before.getInvVorhanden() == null && bm3_after.getInvVorhanden() == null)) && ((bm3_before
                    .getInvVorhanden() == null && !rtrim(bm3_after.getInvVorhanden()).equals(null))
                    || (bm3_after.getInvVorhanden() == null && !(bm3_before.getInvVorhanden()).equals(null))
                    || (bm3_before.getInvVorhanden() != null && bm3_after.getInvVorhanden() != null
                            && !(rtrim(bm3_before.getInvVorhanden()).equals(rtrim(bm3_after.getInvVorhanden())))))) {

                diffMap.clear();

                if (bm3_before.getInvVorhanden() != null) {

                    diffMap.put("before", rtrim(bm3_before.getInvVorhanden()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getInvVorhanden() != null) {

                    diffMap.put("after", rtrim(bm3_after.getInvVorhanden()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("invVorhanden", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Investmentanteile")) {
            sectionMap.get("Investmentanteile").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Investmentanteile", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Investmentanteile");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM3") != null) {
                rootMap.get("TR_TABLE_BM3").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM3", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffPara16Abs1Nr3(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (bm3_before == null) {

            diffMap.clear();

            diffMap.put("after", bm3_after.getInvErt163());
            fieldMap.put("invErt163", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv163Aktf());
            fieldMap.put("inv163Aktf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv163Misf());
            fieldMap.put("inv163Misf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv163Immf());
            fieldMap.put("inv163Immf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv163Aimmf());
            fieldMap.put("inv163Aimmf", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", bm3_after.getInv163Sonf());
            fieldMap.put("inv163Sonf", new HashMap<>(diffMap));

            if (!StringUtils.isEmpty(bm3_after.getAuslSpezInv())) {
                diffMap.clear();

                if (!StringUtils.isBlank(bm3_after.getAuslSpezInv())) {
                    diffMap.put("after", rtrim(bm3_after.getAuslSpezInv()));
                } else {
                    diffMap.put("after", bm3_after.getAuslSpezInv());
                }
            } else {
                diffMap.put("after", null);
            }

            fieldMap.put("auslSpezInv", new HashMap<>(diffMap));
        } else if (bm3_after == null) {

            diffMap.clear();

            if (bm3_before.getInvErt163() != null) {

                diffMap.put("before", bm3_before.getInvErt163());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("invErt163", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv163Aktf() != null) {

                diffMap.put("before", bm3_before.getInv163Aktf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv163Aktf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv163Misf() != null) {

                diffMap.put("before", bm3_before.getInv163Misf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv163Misf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv163Immf() != null) {

                diffMap.put("before", bm3_before.getInv163Immf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv163Immf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv163Aimmf() != null) {

                diffMap.put("before", bm3_before.getInv163Aimmf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv163Aimmf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getInv163Sonf() != null) {

                diffMap.put("before", bm3_before.getInv163Sonf());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("inv163Sonf", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3_before.getAuslSpezInv() != null) {

                diffMap.put("before", rtrim(bm3_before.getAuslSpezInv()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("auslSpezInv", new HashMap<>(diffMap));
        } else {

            if ((bm3_before.getInvErt163() != null || bm3_after.getInvErt163() != null)
                    && ((bm3_before.getInvErt163() == null && bm3_after.getInvErt163() != null)
                            || (bm3_after.getInvErt163() == null && bm3_before.getInvErt163() != null)
                            || (bm3_before.getInvErt163() != null && bm3_after.getInvErt163() != null
                                    && bm3_before.getInvErt163().compareTo(bm3_after.getInvErt163()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInvErt163() != null) {

                    diffMap.put("before", bm3_before.getInvErt163());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInvErt163());
                fieldMap.put("invErt163", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv163Aktf() != null || bm3_after.getInv163Aktf() != null)
                    && ((bm3_before.getInv163Aktf() == null && bm3_after.getInv163Aktf() != null)
                            || (bm3_after.getInv163Aktf() == null && bm3_before.getInv163Aktf() != null)
                            || (bm3_before.getInv163Aktf() != null && bm3_after.getInv163Aktf() != null
                                    && bm3_before.getInv163Aktf().compareTo(bm3_after.getInv163Aktf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv163Aktf() != null) {

                    diffMap.put("before", bm3_before.getInv163Aktf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv163Aktf());
                fieldMap.put("inv163Aktf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv163Misf() != null || bm3_after.getInv163Misf() != null)
                    && ((bm3_before.getInv163Misf() == null && bm3_after.getInv163Misf() != null)
                            || (bm3_after.getInv163Misf() == null && bm3_before.getInv163Misf() != null)
                            || (bm3_before.getInv163Misf() != null && bm3_after.getInv163Misf() != null
                                    && bm3_before.getInv163Misf().compareTo(bm3_after.getInv163Misf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv163Misf() != null) {

                    diffMap.put("before", bm3_before.getInv163Misf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv163Misf());
                fieldMap.put("inv163Misf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv163Immf() != null || bm3_after.getInv163Immf() != null)
                    && ((bm3_before.getInv163Immf() == null && bm3_after.getInv163Immf() != null)
                            || (bm3_after.getInv163Immf() == null && bm3_before.getInv163Immf() != null)
                            || (bm3_before.getInv163Immf() != null && bm3_after.getInv163Immf() != null
                                    && bm3_before.getInv163Immf().compareTo(bm3_after.getInv163Immf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv163Immf() != null) {

                    diffMap.put("before", bm3_before.getInv163Immf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv163Immf());
                fieldMap.put("inv163Immf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv163Aimmf() != null || bm3_after.getInv163Aimmf() != null)
                    && ((bm3_before.getInv163Aimmf() == null && bm3_after.getInv163Aimmf() != null)
                            || (bm3_after.getInv163Aimmf() == null && bm3_before.getInv163Aimmf() != null)
                            || (bm3_before.getInv163Aimmf() != null && bm3_after.getInv163Aimmf() != null
                                    && bm3_before.getInv163Aimmf().compareTo(bm3_after.getInv163Aimmf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv163Aimmf() != null) {

                    diffMap.put("before", bm3_before.getInv163Aimmf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv163Aimmf());
                fieldMap.put("inv163Aimmf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3_before.getInv163Sonf() != null || bm3_after.getInv163Sonf() != null)
                    && ((bm3_before.getInv163Sonf() == null && bm3_after.getInv163Sonf() != null)
                            || (bm3_after.getInv163Sonf() == null && bm3_before.getInv163Sonf() != null)
                            || (bm3_before.getInv163Sonf() != null && bm3_after.getInv163Sonf() != null
                                    && bm3_before.getInv163Sonf().compareTo(bm3_after.getInv163Sonf()) != 0))) {

                diffMap.clear();

                if (bm3_before.getInv163Sonf() != null) {

                    diffMap.put("before", bm3_before.getInv163Sonf());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3_after.getInv163Sonf());
                fieldMap.put("inv163Sonf", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3_before.getAuslSpezInv() == null && bm3_after.getAuslSpezInv() == null)) && ((bm3_before
                    .getAuslSpezInv() == null && !rtrim(bm3_after.getAuslSpezInv()).equals(null))
                    || (bm3_after.getAuslSpezInv() == null && !(bm3_before.getAuslSpezInv()).equals(null))
                    || (bm3_before.getAuslSpezInv() != null && bm3_after.getAuslSpezInv() != null
                            && !(rtrim(bm3_before.getAuslSpezInv()).equals(rtrim(bm3_after.getAuslSpezInv())))))) {

                diffMap.clear();

                if (bm3_before.getAuslSpezInv() != null) {

                    diffMap.put("before", rtrim(bm3_before.getAuslSpezInv()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3_after.getAuslSpezInv() != null) {

                    diffMap.put("after", rtrim(bm3_after.getAuslSpezInv()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("auslSpezInv", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("Para16Abs1Nr3")) {
            sectionMap.get("Para16Abs1Nr3").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("Para16Abs1Nr3", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed Para16Abs1Nr3");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_BM3") != null) {
                rootMap.get("TR_TABLE_BM3").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_BM3", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Aam Sections
    private BsbPairWithChangedFlag getDiffBm1AamAltAnteileBestandschutz(TrTableBm1Aam bm1Aam_before,
            TrTableBm1Aam bm1Aam_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1Aam_before == null && bm1Aam_after == null) {
            return null;
        } else if (bm1Aam_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Aam_after.getTrTableAamPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Aam_after.getTrTableAamPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_after.getAamAntBezeichn() != null) {

                diffMap.put("after", rtrim(bm1Aam_after.getAamAntBezeichn()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_after.getAamAntIsin() != null) {

                diffMap.put("after", rtrim(bm1Aam_after.getAamAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_after.getAamAntAnzahl() != null) {

                diffMap.put("after", bm1Aam_after.getAamAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_after.getAamGewVerMillfo() != null) {

                diffMap.put("after", bm1Aam_after.getAamGewVerMillfo());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamGewVerMillfo", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_after.getAamAntGewFiktiv() != null) {

                diffMap.put("after", bm1Aam_after.getAamAntGewFiktiv());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntGewFiktiv", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_after.getAamAntGewNiErm() != null) {

                diffMap.put("after", rtrim(bm1Aam_after.getAamAntGewNiErm()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntGewNiErm", new HashMap<>(diffMap));
        } else if (bm1Aam_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Aam_before.getTrTableAamPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Aam_before.getTrTableAamPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_before.getAamAntBezeichn() != null) {

                diffMap.put("before", rtrim(bm1Aam_before.getAamAntBezeichn()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_before.getAamAntIsin() != null) {

                diffMap.put("before", rtrim(bm1Aam_before.getAamAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_before.getAamAntAnzahl() != null) {

                diffMap.put("before", bm1Aam_before.getAamAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_before.getAamGewVerMillfo() != null) {

                diffMap.put("before", bm1Aam_before.getAamGewVerMillfo());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamGewVerMillfo", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_before.getAamAntGewFiktiv() != null) {

                diffMap.put("before", bm1Aam_before.getAamAntGewFiktiv());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntGewFiktiv", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Aam_before.getAamAntGewNiErm() != null) {

                diffMap.put("before", rtrim(bm1Aam_before.getAamAntGewNiErm()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntGewNiErm", new HashMap<>(diffMap));
        } else {

            if ((!(bm1Aam_before.getAamAntBezeichn() == null && bm1Aam_after.getAamAntBezeichn() == null))
                    && ((bm1Aam_before.getAamAntBezeichn() == null
                            && !rtrim(bm1Aam_after.getAamAntBezeichn()).equals(null))
                            || (bm1Aam_after.getAamAntBezeichn() == null
                                    && !(bm1Aam_before.getAamAntBezeichn()).equals(null))
                            || (bm1Aam_before.getAamAntBezeichn() != null && bm1Aam_after.getAamAntBezeichn() != null
                                    && !(rtrim(bm1Aam_before.getAamAntBezeichn())
                                            .equals(rtrim(bm1Aam_after.getAamAntBezeichn())))))) {

                diffMap.clear();

                if (bm1Aam_before.getAamAntBezeichn() != null) {

                    diffMap.put("before", rtrim(bm1Aam_before.getAamAntBezeichn()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Aam_after.getAamAntBezeichn() != null) {

                    diffMap.put("after", rtrim(bm1Aam_after.getAamAntBezeichn()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aamAntBezeichn", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1Aam_before.getAamAntIsin() == null && bm1Aam_after.getAamAntIsin() == null)) && ((bm1Aam_before
                    .getAamAntIsin() == null && !rtrim(bm1Aam_after.getAamAntIsin()).equals(null))
                    || (bm1Aam_after.getAamAntIsin() == null && !(bm1Aam_before.getAamAntIsin()).equals(null))
                    || (bm1Aam_before.getAamAntIsin() != null && bm1Aam_after.getAamAntIsin() != null
                            && !(rtrim(bm1Aam_before.getAamAntIsin()).equals(rtrim(bm1Aam_after.getAamAntIsin())))))) {

                diffMap.clear();

                if (bm1Aam_before.getAamAntIsin() != null) {

                    diffMap.put("before", rtrim(bm1Aam_before.getAamAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Aam_after.getAamAntIsin() != null) {

                    diffMap.put("after", rtrim(bm1Aam_after.getAamAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aamAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Aam_before.getAamAntAnzahl() != null || bm1Aam_after.getAamAntAnzahl() != null)
                    && ((bm1Aam_before.getAamAntAnzahl() == null && bm1Aam_after.getAamAntAnzahl() != null)
                            || (bm1Aam_after.getAamAntAnzahl() == null && bm1Aam_before.getAamAntAnzahl() != null)
                            || (bm1Aam_before.getAamAntAnzahl() != null && bm1Aam_after.getAamAntAnzahl() != null
                                    && bm1Aam_before.getAamAntAnzahl()
                                            .compareTo(bm1Aam_after.getAamAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm1Aam_before.getAamAntAnzahl() != null) {

                    diffMap.put("before", bm1Aam_before.getAamAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Aam_after.getAamAntAnzahl());
                fieldMap.put("aamAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Aam_before.getAamGewVerMillfo() != null || bm1Aam_after.getAamGewVerMillfo() != null)
                    && ((bm1Aam_before.getAamGewVerMillfo() == null && bm1Aam_after.getAamGewVerMillfo() != null)
                            || (bm1Aam_after.getAamGewVerMillfo() == null && bm1Aam_before.getAamGewVerMillfo() != null)
                            || (bm1Aam_before.getAamGewVerMillfo() != null && bm1Aam_after.getAamGewVerMillfo() != null
                                    && bm1Aam_before.getAamGewVerMillfo()
                                            .compareTo(bm1Aam_after.getAamGewVerMillfo()) != 0))) {

                diffMap.clear();

                if (bm1Aam_before.getAamGewVerMillfo() != null) {

                    diffMap.put("before", bm1Aam_before.getAamGewVerMillfo());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Aam_after.getAamGewVerMillfo());
                fieldMap.put("aamGewVerMillfo", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Aam_before.getAamAntGewFiktiv() != null || bm1Aam_after.getAamAntGewFiktiv() != null)
                    && ((bm1Aam_before.getAamAntGewFiktiv() == null && bm1Aam_after.getAamAntGewFiktiv() != null)
                            || (bm1Aam_after.getAamAntGewFiktiv() == null && bm1Aam_before.getAamAntGewFiktiv() != null)
                            || (bm1Aam_before.getAamAntGewFiktiv() != null && bm1Aam_after.getAamAntGewFiktiv() != null
                                    && bm1Aam_before.getAamAntGewFiktiv()
                                            .compareTo(bm1Aam_after.getAamAntGewFiktiv()) != 0))) {

                diffMap.clear();

                if (bm1Aam_before.getAamAntGewFiktiv() != null) {

                    diffMap.put("before", bm1Aam_before.getAamAntGewFiktiv());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Aam_after.getAamAntGewFiktiv());
                fieldMap.put("aamAntGewFiktiv", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1Aam_before.getAamAntGewNiErm() == null && bm1Aam_after.getAamAntGewNiErm() == null))
                    && ((bm1Aam_before.getAamAntGewNiErm() == null
                            && !rtrim(bm1Aam_after.getAamAntGewNiErm()).equals(null))
                            || (bm1Aam_after.getAamAntGewNiErm() == null
                                    && !(bm1Aam_before.getAamAntGewNiErm()).equals(null))
                            || (bm1Aam_before.getAamAntGewNiErm() != null && bm1Aam_after.getAamAntGewNiErm() != null
                                    && !(rtrim(bm1Aam_before.getAamAntGewNiErm())
                                            .equals(rtrim(bm1Aam_after.getAamAntGewNiErm())))))) {

                diffMap.clear();

                if (bm1Aam_before.getAamAntGewNiErm() != null) {

                    diffMap.put("before", rtrim(bm1Aam_before.getAamAntGewNiErm()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Aam_after.getAamAntGewNiErm() != null) {

                    diffMap.put("after", rtrim(bm1Aam_after.getAamAntGewNiErm()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aamAntGewNiErm", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AltAnteileBestandschutz")) {
            sectionMap.get("AltAnteileBestandschutz").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AltAnteileBestandschutz", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AltAnteileBestandschutz");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_AAM") != null) {
                rootMap.get("TR_TABLE_AAM").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_AAM", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3AamAltAnteileBestandschutz(TrTableBm3Aam bm3Aam_before,
            TrTableBm3Aam bm3Aam_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3Aam_before == null && bm3Aam_after == null) {
            return null;
        } else if (bm3Aam_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Aam_after.getTrTableAamPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Aam_after.getTrTableAamPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_after.getAamAntBezeichn() != null) {

                diffMap.put("after", rtrim(bm3Aam_after.getAamAntBezeichn()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_after.getAamAntIsin() != null) {

                diffMap.put("after", rtrim(bm3Aam_after.getAamAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_after.getAamAntAnzahl() != null) {

                diffMap.put("after", bm3Aam_after.getAamAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_after.getAamGewVerMillfo() != null) {

                diffMap.put("after", bm3Aam_after.getAamGewVerMillfo());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamGewVerMillfo", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_after.getAamAntGewFiktiv() != null) {

                diffMap.put("after", bm3Aam_after.getAamAntGewFiktiv());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntGewFiktiv", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_after.getAamAntGewNiErm() != null) {

                diffMap.put("after", rtrim(bm3Aam_after.getAamAntGewNiErm()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("aamAntGewNiErm", new HashMap<>(diffMap));
        } else if (bm3Aam_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Aam_before.getTrTableAamPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Aam_before.getTrTableAamPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_before.getAamAntBezeichn() != null) {

                diffMap.put("before", rtrim(bm3Aam_before.getAamAntBezeichn()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_before.getAamAntIsin() != null) {

                diffMap.put("before", rtrim(bm3Aam_before.getAamAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_before.getAamAntAnzahl() != null) {

                diffMap.put("before", bm3Aam_before.getAamAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_before.getAamGewVerMillfo() != null) {

                diffMap.put("before", bm3Aam_before.getAamGewVerMillfo());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamGewVerMillfo", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_before.getAamAntGewFiktiv() != null) {

                diffMap.put("before", bm3Aam_before.getAamAntGewFiktiv());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntGewFiktiv", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Aam_before.getAamAntGewNiErm() != null) {

                diffMap.put("before", rtrim(bm3Aam_before.getAamAntGewNiErm()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("aamAntGewNiErm", new HashMap<>(diffMap));
        } else {

            if ((!(bm3Aam_before.getAamAntBezeichn() == null && bm3Aam_after.getAamAntBezeichn() == null))
                    && ((bm3Aam_before.getAamAntBezeichn() == null
                            && !rtrim(bm3Aam_after.getAamAntBezeichn()).equals(null))
                            || (bm3Aam_after.getAamAntBezeichn() == null
                                    && !(bm3Aam_before.getAamAntBezeichn()).equals(null))
                            || (bm3Aam_before.getAamAntBezeichn() != null && bm3Aam_after.getAamAntBezeichn() != null
                                    && !(rtrim(bm3Aam_before.getAamAntBezeichn())
                                            .equals(rtrim(bm3Aam_after.getAamAntBezeichn())))))) {

                diffMap.clear();

                if (bm3Aam_before.getAamAntBezeichn() != null) {

                    diffMap.put("before", rtrim(bm3Aam_before.getAamAntBezeichn()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Aam_after.getAamAntBezeichn() != null) {

                    diffMap.put("after", rtrim(bm3Aam_after.getAamAntBezeichn()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aamAntBezeichn", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3Aam_before.getAamAntIsin() == null && bm3Aam_after.getAamAntIsin() == null)) && ((bm3Aam_before
                    .getAamAntIsin() == null && !rtrim(bm3Aam_after.getAamAntIsin()).equals(null))
                    || (bm3Aam_after.getAamAntIsin() == null && !(bm3Aam_before.getAamAntIsin()).equals(null))
                    || (bm3Aam_before.getAamAntIsin() != null && bm3Aam_after.getAamAntIsin() != null
                            && !(rtrim(bm3Aam_before.getAamAntIsin()).equals(rtrim(bm3Aam_after.getAamAntIsin())))))) {

                diffMap.clear();

                if (bm3Aam_before.getAamAntIsin() != null) {

                    diffMap.put("before", rtrim(bm3Aam_before.getAamAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Aam_after.getAamAntIsin() != null) {

                    diffMap.put("after", rtrim(bm3Aam_after.getAamAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aamAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Aam_before.getAamAntAnzahl() != null || bm3Aam_after.getAamAntAnzahl() != null)
                    && ((bm3Aam_before.getAamAntAnzahl() == null && bm3Aam_after.getAamAntAnzahl() != null)
                            || (bm3Aam_after.getAamAntAnzahl() == null && bm3Aam_before.getAamAntAnzahl() != null)
                            || (bm3Aam_before.getAamAntAnzahl() != null && bm3Aam_after.getAamAntAnzahl() != null
                                    && bm3Aam_before.getAamAntAnzahl()
                                            .compareTo(bm3Aam_after.getAamAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm3Aam_before.getAamAntAnzahl() != null) {

                    diffMap.put("before", bm3Aam_before.getAamAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Aam_after.getAamAntAnzahl());
                fieldMap.put("aamAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Aam_before.getAamGewVerMillfo() != null || bm3Aam_after.getAamGewVerMillfo() != null)
                    && ((bm3Aam_before.getAamGewVerMillfo() == null && bm3Aam_after.getAamGewVerMillfo() != null)
                            || (bm3Aam_after.getAamGewVerMillfo() == null && bm3Aam_before.getAamGewVerMillfo() != null)
                            || (bm3Aam_before.getAamGewVerMillfo() != null && bm3Aam_after.getAamGewVerMillfo() != null
                                    && bm3Aam_before.getAamGewVerMillfo()
                                            .compareTo(bm3Aam_after.getAamGewVerMillfo()) != 0))) {

                diffMap.clear();

                if (bm3Aam_before.getAamGewVerMillfo() != null) {

                    diffMap.put("before", bm3Aam_before.getAamGewVerMillfo());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Aam_after.getAamGewVerMillfo());
                fieldMap.put("aamGewVerMillfo", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Aam_before.getAamAntGewFiktiv() != null || bm3Aam_after.getAamAntGewFiktiv() != null)
                    && ((bm3Aam_before.getAamAntGewFiktiv() == null && bm3Aam_after.getAamAntGewFiktiv() != null)
                            || (bm3Aam_after.getAamAntGewFiktiv() == null && bm3Aam_before.getAamAntGewFiktiv() != null)
                            || (bm3Aam_before.getAamAntGewFiktiv() != null && bm3Aam_after.getAamAntGewFiktiv() != null
                                    && bm3Aam_before.getAamAntGewFiktiv()
                                            .compareTo(bm3Aam_after.getAamAntGewFiktiv()) != 0))) {

                diffMap.clear();

                if (bm3Aam_before.getAamAntGewFiktiv() != null) {

                    diffMap.put("before", bm3Aam_before.getAamAntGewFiktiv());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Aam_after.getAamAntGewFiktiv());
                fieldMap.put("aamAntGewFiktiv", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3Aam_before.getAamAntGewNiErm() == null && bm3Aam_after.getAamAntGewNiErm() == null))
                    && ((bm3Aam_before.getAamAntGewNiErm() == null
                            && !rtrim(bm3Aam_after.getAamAntGewNiErm()).equals(null))
                            || (bm3Aam_after.getAamAntGewNiErm() == null
                                    && !(bm3Aam_before.getAamAntGewNiErm()).equals(null))
                            || (bm3Aam_before.getAamAntGewNiErm() != null && bm3Aam_after.getAamAntGewNiErm() != null
                                    && !(rtrim(bm3Aam_before.getAamAntGewNiErm())
                                            .equals(rtrim(bm3Aam_after.getAamAntGewNiErm())))))) {

                diffMap.clear();

                if (bm3Aam_before.getAamAntGewNiErm() != null) {

                    diffMap.put("before", rtrim(bm3Aam_before.getAamAntGewNiErm()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Aam_after.getAamAntGewNiErm() != null) {

                    diffMap.put("after", rtrim(bm3Aam_after.getAamAntGewNiErm()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("aamAntGewNiErm", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AltAnteileBestandschutz")) {
            sectionMap.get("AltAnteileBestandschutz").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AltAnteileBestandschutz", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AltAnteileBestandschutz");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_AAM") != null) {
                rootMap.get("TR_TABLE_AAM").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_AAM", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Akb Sections
    private BsbPairWithChangedFlag getDiffBm1AkbAltAntKeinBestandschutz(TrTableBm1Akb bm1Akb_before,
            TrTableBm1Akb bm1Akb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1Akb_before == null && bm1Akb_after == null) {
            return null;
        } else if (bm1Akb_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Akb_after.getTrTableAkbPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Akb_after.getTrTableAkbPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Akb_after.getAkbAntBezeichn() != null) {

                diffMap.put("after", rtrim(bm1Akb_after.getAkbAntBezeichn()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akbAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Akb_after.getAkbAntIsin() != null) {

                diffMap.put("after", rtrim(bm1Akb_after.getAkbAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akbAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Akb_after.getAkbAntAnzahl() != null) {

                diffMap.put("after", bm1Akb_after.getAkbAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akbAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Akb_after.getAkbAntGewinn() != null) {

                diffMap.put("after", bm1Akb_after.getAkbAntGewinn());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akbAntGewinn", new HashMap<>(diffMap));
        } else if (bm1Akb_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Akb_before.getTrTableAkbPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Akb_before.getTrTableAkbPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Akb_before.getAkbAntBezeichn() != null) {

                diffMap.put("before", rtrim(bm1Akb_before.getAkbAntBezeichn()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akbAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Akb_before.getAkbAntIsin() != null) {

                diffMap.put("before", rtrim(bm1Akb_before.getAkbAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akbAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Akb_before.getAkbAntAnzahl() != null) {

                diffMap.put("before", bm1Akb_before.getAkbAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akbAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Akb_before.getAkbAntGewinn() != null) {

                diffMap.put("before", bm1Akb_before.getAkbAntGewinn());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akbAntGewinn", new HashMap<>(diffMap));
        } else {

            if ((!(bm1Akb_before.getAkbAntBezeichn() == null && bm1Akb_after.getAkbAntBezeichn() == null))
                    && ((bm1Akb_before.getAkbAntBezeichn() == null
                            && !rtrim(bm1Akb_after.getAkbAntBezeichn()).equals(null))
                            || (bm1Akb_after.getAkbAntBezeichn() == null
                                    && !(bm1Akb_before.getAkbAntBezeichn()).equals(null))
                            || (bm1Akb_before.getAkbAntBezeichn() != null && bm1Akb_after.getAkbAntBezeichn() != null
                                    && !(rtrim(bm1Akb_before.getAkbAntBezeichn())
                                            .equals(rtrim(bm1Akb_after.getAkbAntBezeichn())))))) {

                diffMap.clear();

                if (bm1Akb_before.getAkbAntBezeichn() != null) {

                    diffMap.put("before", rtrim(bm1Akb_before.getAkbAntBezeichn()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Akb_after.getAkbAntBezeichn() != null) {

                    diffMap.put("after", rtrim(bm1Akb_after.getAkbAntBezeichn()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akbAntBezeichn", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1Akb_before.getAkbAntIsin() == null && bm1Akb_after.getAkbAntIsin() == null)) && ((bm1Akb_before
                    .getAkbAntIsin() == null && !rtrim(bm1Akb_after.getAkbAntIsin()).equals(null))
                    || (bm1Akb_after.getAkbAntIsin() == null && !(bm1Akb_before.getAkbAntIsin()).equals(null))
                    || (bm1Akb_before.getAkbAntIsin() != null && bm1Akb_after.getAkbAntIsin() != null
                            && !(rtrim(bm1Akb_before.getAkbAntIsin()).equals(rtrim(bm1Akb_after.getAkbAntIsin())))))) {

                diffMap.clear();

                if (bm1Akb_before.getAkbAntIsin() != null) {

                    diffMap.put("before", rtrim(bm1Akb_before.getAkbAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Akb_after.getAkbAntIsin() != null) {

                    diffMap.put("after", rtrim(bm1Akb_after.getAkbAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akbAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Akb_before.getAkbAntAnzahl() != null || bm1Akb_after.getAkbAntAnzahl() != null)
                    && ((bm1Akb_before.getAkbAntAnzahl() == null && bm1Akb_after.getAkbAntAnzahl() != null)
                            || (bm1Akb_after.getAkbAntAnzahl() == null && bm1Akb_before.getAkbAntAnzahl() != null)
                            || (bm1Akb_before.getAkbAntAnzahl() != null && bm1Akb_after.getAkbAntAnzahl() != null
                                    && bm1Akb_before.getAkbAntAnzahl()
                                            .compareTo(bm1Akb_after.getAkbAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm1Akb_before.getAkbAntAnzahl() != null) {

                    diffMap.put("before", bm1Akb_before.getAkbAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Akb_after.getAkbAntAnzahl());
                fieldMap.put("akbAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Akb_before.getAkbAntGewinn() != null || bm1Akb_after.getAkbAntGewinn() != null)
                    && ((bm1Akb_before.getAkbAntGewinn() == null && bm1Akb_after.getAkbAntGewinn() != null)
                            || (bm1Akb_after.getAkbAntGewinn() == null && bm1Akb_before.getAkbAntGewinn() != null)
                            || (bm1Akb_before.getAkbAntGewinn() != null && bm1Akb_after.getAkbAntGewinn() != null
                                    && bm1Akb_before.getAkbAntGewinn()
                                            .compareTo(bm1Akb_after.getAkbAntGewinn()) != 0))) {

                diffMap.clear();

                if (bm1Akb_before.getAkbAntGewinn() != null) {

                    diffMap.put("before", bm1Akb_before.getAkbAntGewinn());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Akb_after.getAkbAntGewinn());
                fieldMap.put("akbAntGewinn", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AltAntKeinBestandschutz")) {
            sectionMap.get("AltAntKeinBestandschutz").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AltAntKeinBestandschutz", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AltAntKeinBestandschutz");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_AKB") != null) {
                rootMap.get("TR_TABLE_AKB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_AKB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3AkbAltAntKeinBestandschutz(TrTableBm3Akb bm3Akb_before,
            TrTableBm3Akb bm3Akb_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3Akb_before == null && bm3Akb_after == null) {
            return null;
        } else if (bm3Akb_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Akb_after.getTrTableAkbPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Akb_after.getTrTableAkbPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Akb_after.getAkbAntBezeichn() != null) {

                diffMap.put("after", rtrim(bm3Akb_after.getAkbAntBezeichn()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akbAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Akb_after.getAkbAntIsin() != null) {

                diffMap.put("after", rtrim(bm3Akb_after.getAkbAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akbAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Akb_after.getAkbAntAnzahl() != null) {

                diffMap.put("after", bm3Akb_after.getAkbAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akbAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Akb_after.getAkbAntGewinn() != null) {

                diffMap.put("after", bm3Akb_after.getAkbAntGewinn());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akbAntGewinn", new HashMap<>(diffMap));
        } else if (bm3Akb_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Akb_before.getTrTableAkbPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Akb_before.getTrTableAkbPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Akb_before.getAkbAntBezeichn() != null) {

                diffMap.put("before", rtrim(bm3Akb_before.getAkbAntBezeichn()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akbAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Akb_before.getAkbAntIsin() != null) {

                diffMap.put("before", rtrim(bm3Akb_before.getAkbAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akbAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Akb_before.getAkbAntAnzahl() != null) {

                diffMap.put("before", bm3Akb_before.getAkbAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akbAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Akb_before.getAkbAntGewinn() != null) {

                diffMap.put("before", bm3Akb_before.getAkbAntGewinn());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akbAntGewinn", new HashMap<>(diffMap));
        } else {

            if ((!(bm3Akb_before.getAkbAntBezeichn() == null && bm3Akb_after.getAkbAntBezeichn() == null))
                    && ((bm3Akb_before.getAkbAntBezeichn() == null
                            && !rtrim(bm3Akb_after.getAkbAntBezeichn()).equals(null))
                            || (bm3Akb_after.getAkbAntBezeichn() == null
                                    && !(bm3Akb_before.getAkbAntBezeichn()).equals(null))
                            || (bm3Akb_before.getAkbAntBezeichn() != null && bm3Akb_after.getAkbAntBezeichn() != null
                                    && !(rtrim(bm3Akb_before.getAkbAntBezeichn())
                                            .equals(rtrim(bm3Akb_after.getAkbAntBezeichn())))))) {

                diffMap.clear();

                if (bm3Akb_before.getAkbAntBezeichn() != null) {

                    diffMap.put("before", rtrim(bm3Akb_before.getAkbAntBezeichn()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Akb_after.getAkbAntBezeichn() != null) {

                    diffMap.put("after", rtrim(bm3Akb_after.getAkbAntBezeichn()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akbAntBezeichn", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3Akb_before.getAkbAntIsin() == null && bm3Akb_after.getAkbAntIsin() == null)) && ((bm3Akb_before
                    .getAkbAntIsin() == null && !rtrim(bm3Akb_after.getAkbAntIsin()).equals(null))
                    || (bm3Akb_after.getAkbAntIsin() == null && !(bm3Akb_before.getAkbAntIsin()).equals(null))
                    || (bm3Akb_before.getAkbAntIsin() != null && bm3Akb_after.getAkbAntIsin() != null
                            && !(rtrim(bm3Akb_before.getAkbAntIsin()).equals(rtrim(bm3Akb_after.getAkbAntIsin())))))) {

                diffMap.clear();

                if (bm3Akb_before.getAkbAntIsin() != null) {

                    diffMap.put("before", rtrim(bm3Akb_before.getAkbAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Akb_after.getAkbAntIsin() != null) {

                    diffMap.put("after", rtrim(bm3Akb_after.getAkbAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akbAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Akb_before.getAkbAntAnzahl() != null || bm3Akb_after.getAkbAntAnzahl() != null)
                    && ((bm3Akb_before.getAkbAntAnzahl() == null && bm3Akb_after.getAkbAntAnzahl() != null)
                            || (bm3Akb_after.getAkbAntAnzahl() == null && bm3Akb_before.getAkbAntAnzahl() != null)
                            || (bm3Akb_before.getAkbAntAnzahl() != null && bm3Akb_after.getAkbAntAnzahl() != null
                                    && bm3Akb_before.getAkbAntAnzahl()
                                            .compareTo(bm3Akb_after.getAkbAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm3Akb_before.getAkbAntAnzahl() != null) {

                    diffMap.put("before", bm3Akb_before.getAkbAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Akb_after.getAkbAntAnzahl());
                fieldMap.put("akbAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Akb_before.getAkbAntGewinn() != null || bm3Akb_after.getAkbAntGewinn() != null)
                    && ((bm3Akb_before.getAkbAntGewinn() == null && bm3Akb_after.getAkbAntGewinn() != null)
                            || (bm3Akb_after.getAkbAntGewinn() == null && bm3Akb_before.getAkbAntGewinn() != null)
                            || (bm3Akb_before.getAkbAntGewinn() != null && bm3Akb_after.getAkbAntGewinn() != null
                                    && bm3Akb_before.getAkbAntGewinn()
                                            .compareTo(bm3Akb_after.getAkbAntGewinn()) != 0))) {

                diffMap.clear();

                if (bm3Akb_before.getAkbAntGewinn() != null) {

                    diffMap.put("before", bm3Akb_before.getAkbAntGewinn());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Akb_after.getAkbAntGewinn());
                fieldMap.put("akbAntGewinn", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AltAntKeinBestandschutz")) {
            sectionMap.get("AltAntKeinBestandschutz").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AltAntKeinBestandschutz", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AltAntKeinBestandschutz");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_AKB") != null) {
                rootMap.get("TR_TABLE_AKB").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_AKB", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Ake Sections
    private BsbPairWithChangedFlag getDiffBm1AkeAltAntKeinBestandschutzErsatz(TrTableBm1Ake bm1Ake_before,
            TrTableBm1Ake bm1Ake_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1Ake_before == null && bm1Ake_after == null) {
            return null;
        } else if (bm1Ake_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Ake_after.getTrTableAkePK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Ake_after.getTrTableAkePK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_after.getAkeAntBezeichn() != null) {

                diffMap.put("after", rtrim(bm1Ake_after.getAkeAntBezeichn()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_after.getAkeAntIsin() != null) {

                diffMap.put("after", rtrim(bm1Ake_after.getAkeAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_after.getAkeAntAnzahl() != null) {

                diffMap.put("after", bm1Ake_after.getAkeAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_after.getAkeAntErsBmg() != null) {

                diffMap.put("after", bm1Ake_after.getAkeAntErsBmg());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntErsBmg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_after.getAkeAntEbmgNErm() != null) {

                diffMap.put("after", rtrim(bm1Ake_after.getAkeAntEbmgNErm()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntEbmgNErm", new HashMap<>(diffMap));
        } else if (bm1Ake_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Ake_before.getTrTableAkePK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Ake_before.getTrTableAkePK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_before.getAkeAntBezeichn() != null) {

                diffMap.put("before", rtrim(bm1Ake_before.getAkeAntBezeichn()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_before.getAkeAntIsin() != null) {

                diffMap.put("before", rtrim(bm1Ake_before.getAkeAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_before.getAkeAntAnzahl() != null) {

                diffMap.put("before", bm1Ake_before.getAkeAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_before.getAkeAntErsBmg() != null) {

                diffMap.put("before", bm1Ake_before.getAkeAntErsBmg());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntErsBmg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Ake_before.getAkeAntEbmgNErm() != null) {

                diffMap.put("before", rtrim(bm1Ake_before.getAkeAntEbmgNErm()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntEbmgNErm", new HashMap<>(diffMap));
        } else {

            if ((!(bm1Ake_before.getAkeAntBezeichn() == null && bm1Ake_after.getAkeAntBezeichn() == null))
                    && ((bm1Ake_before.getAkeAntBezeichn() == null
                            && !rtrim(bm1Ake_after.getAkeAntBezeichn()).equals(null))
                            || (bm1Ake_after.getAkeAntBezeichn() == null
                                    && !(bm1Ake_before.getAkeAntBezeichn()).equals(null))
                            || (bm1Ake_before.getAkeAntBezeichn() != null && bm1Ake_after.getAkeAntBezeichn() != null
                                    && !(rtrim(bm1Ake_before.getAkeAntBezeichn())
                                            .equals(rtrim(bm1Ake_after.getAkeAntBezeichn())))))) {

                diffMap.clear();

                if (bm1Ake_before.getAkeAntBezeichn() != null) {

                    diffMap.put("before", rtrim(bm1Ake_before.getAkeAntBezeichn()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Ake_after.getAkeAntBezeichn() != null) {

                    diffMap.put("after", rtrim(bm1Ake_after.getAkeAntBezeichn()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akeAntBezeichn", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1Ake_before.getAkeAntIsin() == null && bm1Ake_after.getAkeAntIsin() == null)) && ((bm1Ake_before
                    .getAkeAntIsin() == null && !rtrim(bm1Ake_after.getAkeAntIsin()).equals(null))
                    || (bm1Ake_after.getAkeAntIsin() == null && !(bm1Ake_before.getAkeAntIsin()).equals(null))
                    || (bm1Ake_before.getAkeAntIsin() != null && bm1Ake_after.getAkeAntIsin() != null
                            && !(rtrim(bm1Ake_before.getAkeAntIsin()).equals(rtrim(bm1Ake_after.getAkeAntIsin())))))) {

                diffMap.clear();

                if (bm1Ake_before.getAkeAntIsin() != null) {

                    diffMap.put("before", rtrim(bm1Ake_before.getAkeAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Ake_after.getAkeAntIsin() != null) {

                    diffMap.put("after", rtrim(bm1Ake_after.getAkeAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akeAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Ake_before.getAkeAntAnzahl() != null || bm1Ake_after.getAkeAntAnzahl() != null)
                    && ((bm1Ake_before.getAkeAntAnzahl() == null && bm1Ake_after.getAkeAntAnzahl() != null)
                            || (bm1Ake_after.getAkeAntAnzahl() == null && bm1Ake_before.getAkeAntAnzahl() != null)
                            || (bm1Ake_before.getAkeAntAnzahl() != null && bm1Ake_after.getAkeAntAnzahl() != null
                                    && bm1Ake_before.getAkeAntAnzahl()
                                            .compareTo(bm1Ake_after.getAkeAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm1Ake_before.getAkeAntAnzahl() != null) {

                    diffMap.put("before", bm1Ake_before.getAkeAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Ake_after.getAkeAntAnzahl());
                fieldMap.put("akeAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Ake_before.getAkeAntErsBmg() != null || bm1Ake_after.getAkeAntErsBmg() != null)
                    && ((bm1Ake_before.getAkeAntErsBmg() == null && bm1Ake_after.getAkeAntErsBmg() != null)
                            || (bm1Ake_after.getAkeAntErsBmg() == null && bm1Ake_before.getAkeAntErsBmg() != null)
                            || (bm1Ake_before.getAkeAntErsBmg() != null && bm1Ake_after.getAkeAntErsBmg() != null
                                    && bm1Ake_before.getAkeAntErsBmg()
                                            .compareTo(bm1Ake_after.getAkeAntErsBmg()) != 0))) {

                diffMap.clear();

                if (bm1Ake_before.getAkeAntErsBmg() != null) {

                    diffMap.put("before", bm1Ake_before.getAkeAntErsBmg());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Ake_after.getAkeAntErsBmg());
                fieldMap.put("akeAntErsBmg", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1Ake_before.getAkeAntEbmgNErm() == null && bm1Ake_after.getAkeAntEbmgNErm() == null))
                    && ((bm1Ake_before.getAkeAntEbmgNErm() == null
                            && !rtrim(bm1Ake_after.getAkeAntEbmgNErm()).equals(null))
                            || (bm1Ake_after.getAkeAntEbmgNErm() == null
                                    && !(bm1Ake_before.getAkeAntEbmgNErm()).equals(null))
                            || (bm1Ake_before.getAkeAntEbmgNErm() != null && bm1Ake_after.getAkeAntEbmgNErm() != null
                                    && !(rtrim(bm1Ake_before.getAkeAntEbmgNErm())
                                            .equals(rtrim(bm1Ake_after.getAkeAntEbmgNErm())))))) {

                diffMap.clear();

                if (bm1Ake_before.getAkeAntEbmgNErm() != null) {

                    diffMap.put("before", rtrim(bm1Ake_before.getAkeAntEbmgNErm()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Ake_after.getAkeAntEbmgNErm() != null) {

                    diffMap.put("after", rtrim(bm1Ake_after.getAkeAntEbmgNErm()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akeAntEbmgNErm", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AltAntKeinBestandschutzErsatz")) {
            sectionMap.get("AltAntKeinBestandschutzErsatz").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AltAntKeinBestandschutzErsatz", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AltAntKeinBestandschutzErsatz");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_AKE") != null) {
                rootMap.get("TR_TABLE_AKE").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_AKE", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3AkeAltAntKeinBestandschutzErsatz(TrTableBm3Ake bm3Ake_before,
            TrTableBm3Ake bm3Ake_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3Ake_before == null && bm3Ake_after == null) {
            return null;
        } else if (bm3Ake_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Ake_after.getTrTableAkePK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Ake_after.getTrTableAkePK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_after.getAkeAntBezeichn() != null) {

                diffMap.put("after", rtrim(bm3Ake_after.getAkeAntBezeichn()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_after.getAkeAntIsin() != null) {

                diffMap.put("after", rtrim(bm3Ake_after.getAkeAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_after.getAkeAntAnzahl() != null) {

                diffMap.put("after", bm3Ake_after.getAkeAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_after.getAkeAntErsBmg() != null) {

                diffMap.put("after", bm3Ake_after.getAkeAntErsBmg());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntErsBmg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_after.getAkeAntEbmgNErm() != null) {

                diffMap.put("after", rtrim(bm3Ake_after.getAkeAntEbmgNErm()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("akeAntEbmgNErm", new HashMap<>(diffMap));
        } else if (bm3Ake_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Ake_before.getTrTableAkePK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Ake_before.getTrTableAkePK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_before.getAkeAntBezeichn() != null) {

                diffMap.put("before", rtrim(bm3Ake_before.getAkeAntBezeichn()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_before.getAkeAntIsin() != null) {

                diffMap.put("before", rtrim(bm3Ake_before.getAkeAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_before.getAkeAntAnzahl() != null) {

                diffMap.put("before", bm3Ake_before.getAkeAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_before.getAkeAntErsBmg() != null) {

                diffMap.put("before", bm3Ake_before.getAkeAntErsBmg());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntErsBmg", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Ake_before.getAkeAntEbmgNErm() != null) {

                diffMap.put("before", rtrim(bm3Ake_before.getAkeAntEbmgNErm()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("akeAntEbmgNErm", new HashMap<>(diffMap));
        } else {

            if ((!(bm3Ake_before.getAkeAntBezeichn() == null && bm3Ake_after.getAkeAntBezeichn() == null))
                    && ((bm3Ake_before.getAkeAntBezeichn() == null
                            && !rtrim(bm3Ake_after.getAkeAntBezeichn()).equals(null))
                            || (bm3Ake_after.getAkeAntBezeichn() == null
                                    && !(bm3Ake_before.getAkeAntBezeichn()).equals(null))
                            || (bm3Ake_before.getAkeAntBezeichn() != null && bm3Ake_after.getAkeAntBezeichn() != null
                                    && !(rtrim(bm3Ake_before.getAkeAntBezeichn())
                                            .equals(rtrim(bm3Ake_after.getAkeAntBezeichn())))))) {

                diffMap.clear();

                if (bm3Ake_before.getAkeAntBezeichn() != null) {

                    diffMap.put("before", rtrim(bm3Ake_before.getAkeAntBezeichn()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Ake_after.getAkeAntBezeichn() != null) {

                    diffMap.put("after", rtrim(bm3Ake_after.getAkeAntBezeichn()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akeAntBezeichn", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3Ake_before.getAkeAntIsin() == null && bm3Ake_after.getAkeAntIsin() == null)) && ((bm3Ake_before
                    .getAkeAntIsin() == null && !rtrim(bm3Ake_after.getAkeAntIsin()).equals(null))
                    || (bm3Ake_after.getAkeAntIsin() == null && !(bm3Ake_before.getAkeAntIsin()).equals(null))
                    || (bm3Ake_before.getAkeAntIsin() != null && bm3Ake_after.getAkeAntIsin() != null
                            && !(rtrim(bm3Ake_before.getAkeAntIsin()).equals(rtrim(bm3Ake_after.getAkeAntIsin())))))) {

                diffMap.clear();

                if (bm3Ake_before.getAkeAntIsin() != null) {

                    diffMap.put("before", rtrim(bm3Ake_before.getAkeAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Ake_after.getAkeAntIsin() != null) {

                    diffMap.put("after", rtrim(bm3Ake_after.getAkeAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akeAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Ake_before.getAkeAntAnzahl() != null || bm3Ake_after.getAkeAntAnzahl() != null)
                    && ((bm3Ake_before.getAkeAntAnzahl() == null && bm3Ake_after.getAkeAntAnzahl() != null)
                            || (bm3Ake_after.getAkeAntAnzahl() == null && bm3Ake_before.getAkeAntAnzahl() != null)
                            || (bm3Ake_before.getAkeAntAnzahl() != null && bm3Ake_after.getAkeAntAnzahl() != null
                                    && bm3Ake_before.getAkeAntAnzahl()
                                            .compareTo(bm3Ake_after.getAkeAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm3Ake_before.getAkeAntAnzahl() != null) {

                    diffMap.put("before", bm3Ake_before.getAkeAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Ake_after.getAkeAntAnzahl());
                fieldMap.put("akeAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Ake_before.getAkeAntErsBmg() != null || bm3Ake_after.getAkeAntErsBmg() != null)
                    && ((bm3Ake_before.getAkeAntErsBmg() == null && bm3Ake_after.getAkeAntErsBmg() != null)
                            || (bm3Ake_after.getAkeAntErsBmg() == null && bm3Ake_before.getAkeAntErsBmg() != null)
                            || (bm3Ake_before.getAkeAntErsBmg() != null && bm3Ake_after.getAkeAntErsBmg() != null
                                    && bm3Ake_before.getAkeAntErsBmg()
                                            .compareTo(bm3Ake_after.getAkeAntErsBmg()) != 0))) {

                diffMap.clear();

                if (bm3Ake_before.getAkeAntErsBmg() != null) {

                    diffMap.put("before", bm3Ake_before.getAkeAntErsBmg());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Ake_after.getAkeAntErsBmg());
                fieldMap.put("akeAntErsBmg", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3Ake_before.getAkeAntEbmgNErm() == null && bm3Ake_after.getAkeAntEbmgNErm() == null))
                    && ((bm3Ake_before.getAkeAntEbmgNErm() == null
                            && !rtrim(bm3Ake_after.getAkeAntEbmgNErm()).equals(null))
                            || (bm3Ake_after.getAkeAntEbmgNErm() == null
                                    && !(bm3Ake_before.getAkeAntEbmgNErm()).equals(null))
                            || (bm3Ake_before.getAkeAntEbmgNErm() != null && bm3Ake_after.getAkeAntEbmgNErm() != null
                                    && !(rtrim(bm3Ake_before.getAkeAntEbmgNErm())
                                            .equals(rtrim(bm3Ake_after.getAkeAntEbmgNErm())))))) {

                diffMap.clear();

                if (bm3Ake_before.getAkeAntEbmgNErm() != null) {

                    diffMap.put("before", rtrim(bm3Ake_before.getAkeAntEbmgNErm()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Ake_after.getAkeAntEbmgNErm() != null) {

                    diffMap.put("after", rtrim(bm3Ake_after.getAkeAntEbmgNErm()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("akeAntEbmgNErm", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("AltAntKeinBestandschutzErsatz")) {
            sectionMap.get("AltAntKeinBestandschutzErsatz").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("AltAntKeinBestandschutzErsatz", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed AltAntKeinBestandschutzErsatz");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_AKE") != null) {
                rootMap.get("TR_TABLE_AKE").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_AKE", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Eik Sections
    private BsbPairWithChangedFlag getDiffBm1EikErstattungAbstandnahme(TrTableBm1Eik bm1Eik_before,
            TrTableBm1Eik bm1Eik_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1Eik_before == null && bm1Eik_after == null) {
            return null;
        } else if (bm1Eik_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Eik_after.getTrTableEikPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Eik_after.getTrTableEikPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Eik_after.getEikAntBezeichn() != null) {

                diffMap.put("after", rtrim(bm1Eik_after.getEikAntBezeichn()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("eikAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Eik_after.getEikAntIsin() != null) {

                diffMap.put("after", rtrim(bm1Eik_after.getEikAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("eikAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Eik_after.getEikAntAnzahl() != null) {

                diffMap.put("after", bm1Eik_after.getEikAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("eikAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Eik_after.getEikAntAusschuett() != null) {

                diffMap.put("after", bm1Eik_after.getEikAntAusschuett());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("eikAntAusschuett", new HashMap<>(diffMap));
        } else if (bm1Eik_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Eik_before.getTrTableEikPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Eik_before.getTrTableEikPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Eik_before.getEikAntBezeichn() != null) {

                diffMap.put("before", rtrim(bm1Eik_before.getEikAntBezeichn()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("eikAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Eik_before.getEikAntIsin() != null) {

                diffMap.put("before", rtrim(bm1Eik_before.getEikAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("eikAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Eik_before.getEikAntAnzahl() != null) {

                diffMap.put("before", bm1Eik_before.getEikAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("eikAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Eik_before.getEikAntAusschuett() != null) {

                diffMap.put("before", bm1Eik_before.getEikAntAusschuett());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("eikAntAusschuett", new HashMap<>(diffMap));
        } else {

            if ((!(bm1Eik_before.getEikAntBezeichn() == null && bm1Eik_after.getEikAntBezeichn() == null))
                    && ((bm1Eik_before.getEikAntBezeichn() == null
                            && !rtrim(bm1Eik_after.getEikAntBezeichn()).equals(null))
                            || (bm1Eik_after.getEikAntBezeichn() == null
                                    && !(bm1Eik_before.getEikAntBezeichn()).equals(null))
                            || (bm1Eik_before.getEikAntBezeichn() != null && bm1Eik_after.getEikAntBezeichn() != null
                                    && !(rtrim(bm1Eik_before.getEikAntBezeichn())
                                            .equals(rtrim(bm1Eik_after.getEikAntBezeichn())))))) {

                diffMap.clear();

                if (bm1Eik_before.getEikAntBezeichn() != null) {

                    diffMap.put("before", rtrim(bm1Eik_before.getEikAntBezeichn()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Eik_after.getEikAntBezeichn() != null) {

                    diffMap.put("after", rtrim(bm1Eik_after.getEikAntBezeichn()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("eikAntBezeichn", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1Eik_before.getEikAntIsin() == null && bm1Eik_after.getEikAntIsin() == null)) && ((bm1Eik_before
                    .getEikAntIsin() == null && !rtrim(bm1Eik_after.getEikAntIsin()).equals(null))
                    || (bm1Eik_after.getEikAntIsin() == null && !(bm1Eik_before.getEikAntIsin()).equals(null))
                    || (bm1Eik_before.getEikAntIsin() != null && bm1Eik_after.getEikAntIsin() != null
                            && !(rtrim(bm1Eik_before.getEikAntIsin()).equals(rtrim(bm1Eik_after.getEikAntIsin())))))) {

                diffMap.clear();

                if (bm1Eik_before.getEikAntIsin() != null) {

                    diffMap.put("before", rtrim(bm1Eik_before.getEikAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Eik_after.getEikAntIsin() != null) {

                    diffMap.put("after", rtrim(bm1Eik_after.getEikAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("eikAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Eik_before.getEikAntAnzahl() != null || bm1Eik_after.getEikAntAnzahl() != null)
                    && ((bm1Eik_before.getEikAntAnzahl() == null && bm1Eik_after.getEikAntAnzahl() != null)
                            || (bm1Eik_after.getEikAntAnzahl() == null && bm1Eik_before.getEikAntAnzahl() != null)
                            || (bm1Eik_before.getEikAntAnzahl() != null && bm1Eik_after.getEikAntAnzahl() != null
                                    && bm1Eik_before.getEikAntAnzahl()
                                            .compareTo(bm1Eik_after.getEikAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm1Eik_before.getEikAntAnzahl() != null) {

                    diffMap.put("before", bm1Eik_before.getEikAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Eik_after.getEikAntAnzahl());
                fieldMap.put("eikAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Eik_before.getEikAntAusschuett() != null || bm1Eik_after.getEikAntAusschuett() != null)
                    && ((bm1Eik_before.getEikAntAusschuett() == null && bm1Eik_after.getEikAntAusschuett() != null)
                            || (bm1Eik_after.getEikAntAusschuett() == null
                                    && bm1Eik_before.getEikAntAusschuett() != null)
                            || (bm1Eik_before.getEikAntAusschuett() != null
                                    && bm1Eik_after.getEikAntAusschuett() != null && bm1Eik_before.getEikAntAusschuett()
                                            .compareTo(bm1Eik_after.getEikAntAusschuett()) != 0))) {

                diffMap.clear();

                if (bm1Eik_before.getEikAntAusschuett() != null) {

                    diffMap.put("before", bm1Eik_before.getEikAntAusschuett());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Eik_after.getEikAntAusschuett());
                fieldMap.put("eikAntAusschuett", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("ErstattungAbstandnahme")) {
            sectionMap.get("ErstattungAbstandnahme").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("ErstattungAbstandnahme", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed ErstattungAbstandnahme");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_EIK") != null) {
                rootMap.get("TR_TABLE_EIK").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_EIK", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3EikErstattungAbstandnahme(TrTableBm3Eik bm3Eik_before,
            TrTableBm3Eik bm3Eik_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3Eik_before == null && bm3Eik_after == null) {
            return null;
        } else if (bm3Eik_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Eik_after.getTrTableEikPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Eik_after.getTrTableEikPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Eik_after.getEikAntBezeichn() != null) {

                diffMap.put("after", rtrim(bm3Eik_after.getEikAntBezeichn()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("eikAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Eik_after.getEikAntIsin() != null) {

                diffMap.put("after", rtrim(bm3Eik_after.getEikAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("eikAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Eik_after.getEikAntAnzahl() != null) {

                diffMap.put("after", bm3Eik_after.getEikAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("eikAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Eik_after.getEikAntAusschuett() != null) {

                diffMap.put("after", bm3Eik_after.getEikAntAusschuett());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("eikAntAusschuett", new HashMap<>(diffMap));
        } else if (bm3Eik_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Eik_before.getTrTableEikPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Eik_before.getTrTableEikPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Eik_before.getEikAntBezeichn() != null) {

                diffMap.put("before", rtrim(bm3Eik_before.getEikAntBezeichn()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("eikAntBezeichn", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Eik_before.getEikAntIsin() != null) {

                diffMap.put("before", rtrim(bm3Eik_before.getEikAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("eikAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Eik_before.getEikAntAnzahl() != null) {

                diffMap.put("before", bm3Eik_before.getEikAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("eikAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Eik_before.getEikAntAusschuett() != null) {

                diffMap.put("before", bm3Eik_before.getEikAntAusschuett());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("eikAntAusschuett", new HashMap<>(diffMap));
        } else {

            if ((!(bm3Eik_before.getEikAntBezeichn() == null && bm3Eik_after.getEikAntBezeichn() == null))
                    && ((bm3Eik_before.getEikAntBezeichn() == null
                            && !rtrim(bm3Eik_after.getEikAntBezeichn()).equals(null))
                            || (bm3Eik_after.getEikAntBezeichn() == null
                                    && !(bm3Eik_before.getEikAntBezeichn()).equals(null))
                            || (bm3Eik_before.getEikAntBezeichn() != null && bm3Eik_after.getEikAntBezeichn() != null
                                    && !(rtrim(bm3Eik_before.getEikAntBezeichn())
                                            .equals(rtrim(bm3Eik_after.getEikAntBezeichn())))))) {

                diffMap.clear();

                if (bm3Eik_before.getEikAntBezeichn() != null) {

                    diffMap.put("before", rtrim(bm3Eik_before.getEikAntBezeichn()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Eik_after.getEikAntBezeichn() != null) {

                    diffMap.put("after", rtrim(bm3Eik_after.getEikAntBezeichn()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("eikAntBezeichn", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3Eik_before.getEikAntIsin() == null && bm3Eik_after.getEikAntIsin() == null)) && ((bm3Eik_before
                    .getEikAntIsin() == null && !rtrim(bm3Eik_after.getEikAntIsin()).equals(null))
                    || (bm3Eik_after.getEikAntIsin() == null && !(bm3Eik_before.getEikAntIsin()).equals(null))
                    || (bm3Eik_before.getEikAntIsin() != null && bm3Eik_after.getEikAntIsin() != null
                            && !(rtrim(bm3Eik_before.getEikAntIsin()).equals(rtrim(bm3Eik_after.getEikAntIsin())))))) {

                diffMap.clear();

                if (bm3Eik_before.getEikAntIsin() != null) {

                    diffMap.put("before", rtrim(bm3Eik_before.getEikAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Eik_after.getEikAntIsin() != null) {

                    diffMap.put("after", rtrim(bm3Eik_after.getEikAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("eikAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Eik_before.getEikAntAnzahl() != null || bm3Eik_after.getEikAntAnzahl() != null)
                    && ((bm3Eik_before.getEikAntAnzahl() == null && bm3Eik_after.getEikAntAnzahl() != null)
                            || (bm3Eik_after.getEikAntAnzahl() == null && bm3Eik_before.getEikAntAnzahl() != null)
                            || (bm3Eik_before.getEikAntAnzahl() != null && bm3Eik_after.getEikAntAnzahl() != null
                                    && bm3Eik_before.getEikAntAnzahl()
                                            .compareTo(bm3Eik_after.getEikAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm3Eik_before.getEikAntAnzahl() != null) {

                    diffMap.put("before", bm3Eik_before.getEikAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Eik_after.getEikAntAnzahl());
                fieldMap.put("eikAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Eik_before.getEikAntAusschuett() != null || bm3Eik_after.getEikAntAusschuett() != null)
                    && ((bm3Eik_before.getEikAntAusschuett() == null && bm3Eik_after.getEikAntAusschuett() != null)
                            || (bm3Eik_after.getEikAntAusschuett() == null
                                    && bm3Eik_before.getEikAntAusschuett() != null)
                            || (bm3Eik_before.getEikAntAusschuett() != null
                                    && bm3Eik_after.getEikAntAusschuett() != null && bm3Eik_before.getEikAntAusschuett()
                                            .compareTo(bm3Eik_after.getEikAntAusschuett()) != 0))) {

                diffMap.clear();

                if (bm3Eik_before.getEikAntAusschuett() != null) {

                    diffMap.put("before", bm3Eik_before.getEikAntAusschuett());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Eik_after.getEikAntAusschuett());
                fieldMap.put("eikAntAusschuett", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("ErstattungInvestKapESt")) {
            sectionMap.get("ErstattungInvestKapESt").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("ErstattungInvestKapESt", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed ErstattungInvestKapESt");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_EIK") != null) {
                rootMap.get("TR_TABLE_EIK").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_EIK", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Piv Sections
    private BsbPairWithChangedFlag getDiffBm1PivPersInvestVermoegen(TrTableBm1Piv bm1Piv_before,
            TrTableBm1Piv bm1Piv_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm1Piv_before == null && bm1Piv_after == null) {
            return null;
        } else if (bm1Piv_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Piv_after.getTrTablePivPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm1Piv_after.getTrTablePivPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Piv_after.getPivAntBezeichng() != null) {

                diffMap.put("after", rtrim(bm1Piv_after.getPivAntBezeichng()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pivAntBezeichng", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Piv_after.getPivAntIsin() != null) {

                diffMap.put("after", rtrim(bm1Piv_after.getPivAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pivAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Piv_after.getPivAntAnzahl() != null) {

                diffMap.put("after", bm1Piv_after.getPivAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pivAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Piv_after.getPivAntAusErloes() != null) {

                diffMap.put("after", bm1Piv_after.getPivAntAusErloes());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pivAntAusErloes", new HashMap<>(diffMap));
        } else if (bm1Piv_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Piv_before.getTrTablePivPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm1Piv_before.getTrTablePivPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Piv_before.getPivAntBezeichng() != null) {

                diffMap.put("before", rtrim(bm1Piv_before.getPivAntBezeichng()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pivAntBezeichng", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Piv_before.getPivAntIsin() != null) {

                diffMap.put("before", rtrim(bm1Piv_before.getPivAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pivAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Piv_before.getPivAntAnzahl() != null) {

                diffMap.put("before", bm1Piv_before.getPivAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pivAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm1Piv_before.getPivAntAusErloes() != null) {

                diffMap.put("before", bm1Piv_before.getPivAntAusErloes());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pivAntAusErloes", new HashMap<>(diffMap));
        } else {

            if ((!(bm1Piv_before.getPivAntBezeichng() == null && bm1Piv_after.getPivAntBezeichng() == null))
                    && ((bm1Piv_before.getPivAntBezeichng() == null
                            && !rtrim(bm1Piv_after.getPivAntBezeichng()).equals(null))
                            || (bm1Piv_after.getPivAntBezeichng() == null
                                    && !(bm1Piv_before.getPivAntBezeichng()).equals(null))
                            || (bm1Piv_before.getPivAntBezeichng() != null && bm1Piv_after.getPivAntBezeichng() != null
                                    && !(rtrim(bm1Piv_before.getPivAntBezeichng())
                                            .equals(rtrim(bm1Piv_after.getPivAntBezeichng())))))) {

                diffMap.clear();

                if (bm1Piv_before.getPivAntBezeichng() != null) {

                    diffMap.put("before", rtrim(bm1Piv_before.getPivAntBezeichng()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Piv_after.getPivAntBezeichng() != null) {

                    diffMap.put("after", rtrim(bm1Piv_after.getPivAntBezeichng()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("pivAntBezeichng", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm1Piv_before.getPivAntIsin() == null && bm1Piv_after.getPivAntIsin() == null)) && ((bm1Piv_before
                    .getPivAntIsin() == null && !rtrim(bm1Piv_after.getPivAntIsin()).equals(null))
                    || (bm1Piv_after.getPivAntIsin() == null && !(bm1Piv_before.getPivAntIsin()).equals(null))
                    || (bm1Piv_before.getPivAntIsin() != null && bm1Piv_after.getPivAntIsin() != null
                            && !(rtrim(bm1Piv_before.getPivAntIsin()).equals(rtrim(bm1Piv_after.getPivAntIsin())))))) {

                diffMap.clear();

                if (bm1Piv_before.getPivAntIsin() != null) {

                    diffMap.put("before", rtrim(bm1Piv_before.getPivAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm1Piv_after.getPivAntIsin() != null) {

                    diffMap.put("after", rtrim(bm1Piv_after.getPivAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("pivAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Piv_before.getPivAntAnzahl() != null || bm1Piv_after.getPivAntAnzahl() != null)
                    && ((bm1Piv_before.getPivAntAnzahl() == null && bm1Piv_after.getPivAntAnzahl() != null)
                            || (bm1Piv_after.getPivAntAnzahl() == null && bm1Piv_before.getPivAntAnzahl() != null)
                            || (bm1Piv_before.getPivAntAnzahl() != null && bm1Piv_after.getPivAntAnzahl() != null
                                    && bm1Piv_before.getPivAntAnzahl()
                                            .compareTo(bm1Piv_after.getPivAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm1Piv_before.getPivAntAnzahl() != null) {

                    diffMap.put("before", bm1Piv_before.getPivAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Piv_after.getPivAntAnzahl());
                fieldMap.put("pivAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm1Piv_before.getPivAntAusErloes() != null || bm1Piv_after.getPivAntAusErloes() != null)
                    && ((bm1Piv_before.getPivAntAusErloes() == null && bm1Piv_after.getPivAntAusErloes() != null)
                            || (bm1Piv_after.getPivAntAusErloes() == null && bm1Piv_before.getPivAntAusErloes() != null)
                            || (bm1Piv_before.getPivAntAusErloes() != null && bm1Piv_after.getPivAntAusErloes() != null
                                    && bm1Piv_before.getPivAntAusErloes()
                                            .compareTo(bm1Piv_after.getPivAntAusErloes()) != 0))) {

                diffMap.clear();

                if (bm1Piv_before.getPivAntAusErloes() != null) {

                    diffMap.put("before", bm1Piv_before.getPivAntAusErloes());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm1Piv_after.getPivAntAusErloes());
                fieldMap.put("pivAntAusErloes", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("PersInvestVermoegen")) {
            sectionMap.get("PersInvestVermoegen").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("PersInvestVermoegen", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed PersInvestVermoegen");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_PIV") != null) {
                rootMap.get("TR_TABLE_PIV").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_PIV", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3PivPersInvestVermoegen(TrTableBm3Piv bm3Piv_before,
            TrTableBm3Piv bm3Piv_after) {
        int hydrated = 0;

        boolean changed = false;

        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPair pair = new BsbPair();

        List<String> summaries = new ArrayList<>();
        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Map<String, List<Map<String, Map<String, Map<String, Object>>>>> rootMap = new HashMap<>();
        Map<String, Map<String, Map<String, Object>>> sectionMap = new HashMap<>();
        Map<String, Map<String, Object>> fieldMap = new HashMap<>();
        Map<String, Object> diffMap = new HashMap<>();

        if (bm3Piv_before == null && bm3Piv_after == null) {
            return null;
        } else if (bm3Piv_before == null) {

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Piv_after.getTrTablePivPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("after", rtrim(bm3Piv_after.getTrTablePivPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Piv_after.getPivAntBezeichng() != null) {

                diffMap.put("after", rtrim(bm3Piv_after.getPivAntBezeichng()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pivAntBezeichng", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Piv_after.getPivAntIsin() != null) {

                diffMap.put("after", rtrim(bm3Piv_after.getPivAntIsin()));
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pivAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Piv_after.getPivAntAnzahl() != null) {
                diffMap.put("after", bm3Piv_after.getPivAntAnzahl());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pivAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Piv_after.getPivAntAusErloes() != null) {

                diffMap.put("after", bm3Piv_after.getPivAntAusErloes());
            } else {
                diffMap.put("after", null);
            }
            fieldMap.put("pivAntAusErloes", new HashMap<>(diffMap));
        } else if (bm3Piv_after == null) {

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Piv_before.getTrTablePivPK().getKeySatzart()));
            fieldMap.put("keySatzart", new HashMap<>(diffMap));

            diffMap.clear();

            diffMap.put("before", rtrim(bm3Piv_before.getTrTablePivPK().getKeyAbrechNr()));
            fieldMap.put("keyAbrechNr", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Piv_before.getPivAntBezeichng() != null) {

                diffMap.put("before", rtrim(bm3Piv_before.getPivAntBezeichng()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pivAntBezeichng", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Piv_before.getPivAntIsin() != null) {

                diffMap.put("before", rtrim(bm3Piv_before.getPivAntIsin()));
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pivAntIsin", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Piv_before.getPivAntAnzahl() != null) {
                diffMap.put("before", bm3Piv_before.getPivAntAnzahl());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pivAntAnzahl", new HashMap<>(diffMap));

            diffMap.clear();

            if (bm3Piv_before.getPivAntAusErloes() != null) {

                diffMap.put("before", bm3Piv_before.getPivAntAusErloes());
            } else {
                diffMap.put("before", null);
            }
            fieldMap.put("pivAntAusErloes", new HashMap<>(diffMap));
        } else {

            if ((!(bm3Piv_before.getPivAntBezeichng() == null && bm3Piv_after.getPivAntBezeichng() == null))
                    && ((bm3Piv_before.getPivAntBezeichng() == null
                            && !rtrim(bm3Piv_after.getPivAntBezeichng()).equals(null))
                            || (bm3Piv_after.getPivAntBezeichng() == null
                                    && !(bm3Piv_before.getPivAntBezeichng()).equals(null))
                            || (bm3Piv_before.getPivAntBezeichng() != null && bm3Piv_after.getPivAntBezeichng() != null
                                    && !(rtrim(bm3Piv_before.getPivAntBezeichng())
                                            .equals(rtrim(bm3Piv_after.getPivAntBezeichng())))))) {

                diffMap.clear();

                if (bm3Piv_before.getPivAntBezeichng() != null) {

                    diffMap.put("before", rtrim(bm3Piv_before.getPivAntBezeichng()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Piv_after.getPivAntBezeichng() != null) {

                    diffMap.put("after", rtrim(bm3Piv_after.getPivAntBezeichng()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("pivAntBezeichng", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((!(bm3Piv_before.getPivAntIsin() == null && bm3Piv_after.getPivAntIsin() == null)) && ((bm3Piv_before
                    .getPivAntIsin() == null && !rtrim(bm3Piv_after.getPivAntIsin()).equals(null))
                    || (bm3Piv_after.getPivAntIsin() == null && !(bm3Piv_before.getPivAntIsin()).equals(null))
                    || (bm3Piv_before.getPivAntIsin() != null && bm3Piv_after.getPivAntIsin() != null
                            && !(rtrim(bm3Piv_before.getPivAntIsin()).equals(rtrim(bm3Piv_after.getPivAntIsin())))))) {

                diffMap.clear();

                if (bm3Piv_before.getPivAntIsin() != null) {

                    diffMap.put("before", rtrim(bm3Piv_before.getPivAntIsin()));
                } else {
                    diffMap.put("before", null);
                }
                if (bm3Piv_after.getPivAntIsin() != null) {

                    diffMap.put("after", rtrim(bm3Piv_after.getPivAntIsin()));
                } else {
                    diffMap.put("after", null);
                }
                fieldMap.put("pivAntIsin", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Piv_before.getPivAntAnzahl() != null || bm3Piv_after.getPivAntAnzahl() != null)
                    && ((bm3Piv_before.getPivAntAnzahl() == null && bm3Piv_after.getPivAntAnzahl() != null)
                            || (bm3Piv_after.getPivAntAnzahl() == null && bm3Piv_before.getPivAntAnzahl() != null)
                            || (bm3Piv_before.getPivAntAnzahl() != null && bm3Piv_after.getPivAntAnzahl() != null
                                    && bm3Piv_before.getPivAntAnzahl()
                                            .compareTo(bm3Piv_after.getPivAntAnzahl()) != 0))) {

                diffMap.clear();

                if (bm3Piv_before.getPivAntAnzahl() != null) {

                    diffMap.put("before", bm3Piv_before.getPivAntAnzahl());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Piv_after.getPivAntAnzahl());
                fieldMap.put("pivAntAnzahl", new HashMap<>(diffMap));
                hydrated++;
            }

            if ((bm3Piv_before.getPivAntAusErloes() != null || bm3Piv_after.getPivAntAusErloes() != null)
                    && ((bm3Piv_before.getPivAntAusErloes() == null && bm3Piv_after.getPivAntAusErloes() != null)
                            || (bm3Piv_after.getPivAntAusErloes() == null && bm3Piv_before.getPivAntAusErloes() != null)
                            || (bm3Piv_before.getPivAntAusErloes() != null && bm3Piv_after.getPivAntAusErloes() != null
                                    && bm3Piv_before.getPivAntAusErloes()
                                            .compareTo(bm3Piv_after.getPivAntAusErloes()) != 0))) {

                diffMap.clear();

                if (bm3Piv_before.getPivAntAusErloes() != null) {

                    diffMap.put("before", bm3Piv_before.getPivAntAusErloes());
                } else {
                    diffMap.put("before", null);
                }
                diffMap.put("after", bm3Piv_after.getPivAntAusErloes());
                fieldMap.put("pivAntAusErloes", new HashMap<>(diffMap));
                hydrated++;
            }
        }

        if (sectionMap.containsKey("PersInvestVermoegen")) {
            sectionMap.get("PersInvestVermoegen").putAll(fieldMap);
        } else {
            if (!fieldMap.isEmpty()) {
                sectionMap.put("PersInvestVermoegen", fieldMap);
            }
        }

        if (hydrated > 0) {
            summaries.add("Changed PersInvestVermoegen");
            changed = true;
        } ;

        pair.setSummaries(summaries);

        if (sectionMap.size() > 0) {
            if (rootMap.get("TR_TABLE_PIV") != null) {
                rootMap.get("TR_TABLE_PIV").add(sectionMap);
            } else {
                changesList = new ArrayList();
                changesList.add(sectionMap);
                rootMap.put("TR_TABLE_PIV", changesList);
            }
        }

        pair.setChanges(rootMap);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Sets

    // Bsb Sets
    private BsbPairWithChangedFlag getDiffBm1Set(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm1AamSet_Intersection, diffBm1AamSet_Addition, diffBm1AamSet_Removal,
                diffBm1AkbSet_Intersection, diffBm1AkbSet_Addition, diffBm1AkbSet_Removal, diffBm1AkeSet_Intersection,
                diffBm1AkeSet_Addition, diffBm1AkeSet_Removal, diffBm1EikSet_Intersection, diffBm1EikSet_Addition,
                diffBm1EikSet_Removal, diffBm1PivSet_Intersection, diffBm1PivSet_Addition, diffBm1PivSet_Removal,
                diffAllgemeinMusterI_Intersection, diffAllgemeinMusterI_Addition, diffAllgemeinMusterI_Removal,
                diffAngabenBescheinigung2_Intersection, diffAngabenBescheinigung2_Addition,
                diffAngabenBescheinigung2_Removal, diffDepositoryReceipts_Intersection, diffDepositoryReceipts_Addition,
                diffDepositoryReceipts_Removal, diffAngabenBescheinigung1_Intersection,
                diffAngabenBescheinigung1_Addition, diffAngabenBescheinigung1_Removal, diffSteuerabzug_Intersection,
                diffSteuerabzug_Addition, diffSteuerabzug_Removal, diffAngabenBescheinigung_Intersection,
                diffAngabenBescheinigung_Addition, diffAngabenBescheinigung_Removal,
                diffKapitalertraegeAbzug_Intersection, diffKapitalertraegeAbzug_Addition,
                diffKapitalertraegeAbzug_Removal, diffEntschaedigung_Intersection, diffEntschaedigung_Addition,
                diffEntschaedigung_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableBm1PK> Bm1PKRemoved, Bm1PKAdded, Bm1PKIntersection;

        Bm1PKRemoved = new HashSet<>();
        Bm1PKAdded = new HashSet<>();

        Set<TrTableBm1PK> Bm1PKPrevious = bsb_before != null
                ? bsb_before.getTrTableBm1Set().stream().map(TrTableBm1::getTrTableBm1PK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableBm1PK> Bm1PKAfter = bsb_after != null
                ? bsb_after.getTrTableBm1Set().stream().map(TrTableBm1::getTrTableBm1PK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (Bm1PKPrevious.size() == 0 && Bm1PKAfter.size() > 0) {
            for (TrTableBm1PK Bm1PK : Bm1PKAfter) {

                TrTableBm1 after = bsb_after.getTrTableBm1Set().stream()
                        .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().isPresent()
                                ? bsb_after.getTrTableBm1Set().stream()
                                        .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().get()
                                : null;

                diffBm1AamSet_Addition = getDiffBm1AamSet(null, after);
                diffBm1AkbSet_Addition = getDiffBm1AkbSet(null, after);
                diffBm1AkeSet_Addition = getDiffBm1AkeSet(null, after);
                diffBm1EikSet_Addition = getDiffBm1EikSet(null, after);
                diffBm1PivSet_Addition = getDiffBm1PivSet(null, after);
                diffAllgemeinMusterI_Addition = getDiffAllgemeinMusterI(null, after);
                diffAngabenBescheinigung2_Addition = getDiffAngabenBescheinigung2(null, after);
                diffDepositoryReceipts_Addition = getDiffDepositoryReceipts(null, after);
                diffAngabenBescheinigung1_Addition = getDiffAngabenBescheinigung1(null, after);
                diffSteuerabzug_Addition = getDiffSteuerabzug(null, after);
                diffAngabenBescheinigung_Addition = getDiffAngabenBescheinigung(null, after);
                diffKapitalertraegeAbzug_Addition = getDiffKapitalertraegeAbzug(null, after);
                diffEntschaedigung_Addition = getDiffEntschaedigung(null, after);

                if (diffBm1AamSet_Addition != null) {

                    if (diffBm1AamSet_Addition.getPair() != null
                            && diffBm1AamSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                && (diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                && diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AAM")
                                    .addAll(diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM"));
                        } else {
                            if ((diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM"));
                                pair.getChanges().put("TR_TABLE_AAM", changesList);
                            }
                        }

                        if (diffBm1AamSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AamSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm1AkbSet_Addition != null) {

                    if (diffBm1AkbSet_Addition.getPair() != null
                            && diffBm1AkbSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                && (diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                && diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKB")
                                    .addAll(diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB"));
                        } else {
                            if ((diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB"));
                                pair.getChanges().put("TR_TABLE_AKB", changesList);
                            }
                        }

                        if (diffBm1AkbSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AkbSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm1AkeSet_Addition != null) {

                    if (diffBm1AkeSet_Addition.getPair() != null
                            && diffBm1AkeSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                && (diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                && diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKE")
                                    .addAll(diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE"));
                        } else {
                            if ((diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE"));
                                pair.getChanges().put("TR_TABLE_AKE", changesList);
                            }
                        }

                        if (diffBm1AkeSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AkeSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm1EikSet_Addition != null) {

                    if (diffBm1EikSet_Addition.getPair() != null
                            && diffBm1EikSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                && (diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                && diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                            pair.getChanges().get("TR_TABLE_EIK")
                                    .addAll(diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK"));
                        } else {
                            if ((diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK"));
                                pair.getChanges().put("TR_TABLE_EIK", changesList);
                            }
                        }

                        if (diffBm1EikSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1EikSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm1PivSet_Addition != null) {

                    if (diffBm1PivSet_Addition.getPair() != null
                            && diffBm1PivSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                && (diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                && diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                            pair.getChanges().get("TR_TABLE_PIV")
                                    .addAll(diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                        } else {
                            if ((diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                                pair.getChanges().put("TR_TABLE_PIV", changesList);
                            }
                        }

                        if (diffBm1PivSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1PivSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffAllgemeinMusterI_Addition != null) {

                    if (diffAllgemeinMusterI_Addition.getPair() != null
                            && diffAllgemeinMusterI_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1")
                                    .addAll(diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffAllgemeinMusterI_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAllgemeinMusterI_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffAngabenBescheinigung2_Addition != null) {

                    if (diffAngabenBescheinigung2_Addition.getPair() != null
                            && diffAngabenBescheinigung2_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffAngabenBescheinigung2_Addition.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                && diffAngabenBescheinigung2_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1").addAll(
                                    diffAngabenBescheinigung2_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffAngabenBescheinigung2_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung2_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAngabenBescheinigung2_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffAngabenBescheinigung2_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAngabenBescheinigung2_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffDepositoryReceipts_Addition != null) {

                    if (diffDepositoryReceipts_Addition.getPair() != null
                            && diffDepositoryReceipts_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1")
                                    .addAll(diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffDepositoryReceipts_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffDepositoryReceipts_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffAngabenBescheinigung1_Addition != null) {

                    if (diffAngabenBescheinigung1_Addition.getPair() != null
                            && diffAngabenBescheinigung1_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffAngabenBescheinigung1_Addition.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                && diffAngabenBescheinigung1_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1").addAll(
                                    diffAngabenBescheinigung1_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffAngabenBescheinigung1_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung1_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAngabenBescheinigung1_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffAngabenBescheinigung1_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAngabenBescheinigung1_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffSteuerabzug_Addition != null) {

                    if (diffSteuerabzug_Addition.getPair() != null
                            && diffSteuerabzug_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1")
                                    .addAll(diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffSteuerabzug_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffSteuerabzug_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffAngabenBescheinigung_Addition != null) {

                    if (diffAngabenBescheinigung_Addition.getPair() != null
                            && diffAngabenBescheinigung_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffAngabenBescheinigung_Addition.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                && diffAngabenBescheinigung_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1").addAll(
                                    diffAngabenBescheinigung_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffAngabenBescheinigung_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAngabenBescheinigung_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffAngabenBescheinigung_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAngabenBescheinigung_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffKapitalertraegeAbzug_Addition != null) {

                    if (diffKapitalertraegeAbzug_Addition.getPair() != null
                            && diffKapitalertraegeAbzug_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffKapitalertraegeAbzug_Addition.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                && diffKapitalertraegeAbzug_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1").addAll(
                                    diffKapitalertraegeAbzug_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffKapitalertraegeAbzug_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffKapitalertraegeAbzug_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffKapitalertraegeAbzug_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffKapitalertraegeAbzug_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffKapitalertraegeAbzug_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffEntschaedigung_Addition != null) {

                    if (diffEntschaedigung_Addition.getPair() != null
                            && diffEntschaedigung_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1")
                                    .addAll(diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffEntschaedigung_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffEntschaedigung_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm1 record");
        } else if (Bm1PKPrevious.size() > 0 && Bm1PKAfter.size() == 0) {

            for (TrTableBm1PK Bm1PK : Bm1PKPrevious) {

                TrTableBm1 before = bsb_before.getTrTableBm1Set().stream()
                        .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().isPresent()
                                ? bsb_before.getTrTableBm1Set().stream()
                                        .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().get()
                                : null;

                diffBm1AamSet_Removal = getDiffBm1AamSet(before, null);
                diffBm1AkbSet_Removal = getDiffBm1AkbSet(before, null);
                diffBm1AkeSet_Removal = getDiffBm1AkeSet(before, null);
                diffBm1EikSet_Removal = getDiffBm1EikSet(before, null);
                diffBm1PivSet_Removal = getDiffBm1PivSet(before, null);
                diffAllgemeinMusterI_Removal = getDiffAllgemeinMusterI(before, null);
                diffAngabenBescheinigung2_Removal = getDiffAngabenBescheinigung2(before, null);
                diffDepositoryReceipts_Removal = getDiffDepositoryReceipts(before, null);
                diffAngabenBescheinigung1_Removal = getDiffAngabenBescheinigung1(before, null);
                diffSteuerabzug_Removal = getDiffSteuerabzug(before, null);
                diffAngabenBescheinigung_Removal = getDiffAngabenBescheinigung(before, null);
                diffKapitalertraegeAbzug_Removal = getDiffKapitalertraegeAbzug(before, null);
                diffEntschaedigung_Removal = getDiffEntschaedigung(before, null);

                if (diffBm1AamSet_Removal != null) {

                    if (diffBm1AamSet_Removal.getPair() != null
                            && diffBm1AamSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                && (diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                && diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AAM")
                                    .addAll(diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM"));
                        } else {
                            if ((diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM"));
                                pair.getChanges().put("TR_TABLE_AAM", changesList);
                            }
                        }

                        if (diffBm1AamSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AamSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm1AkbSet_Removal != null) {

                    if (diffBm1AkbSet_Removal.getPair() != null
                            && diffBm1AkbSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                && (diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                && diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKB")
                                    .addAll(diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB"));
                        } else {
                            if ((diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB"));
                                pair.getChanges().put("TR_TABLE_AKB", changesList);
                            }
                        }

                        if (diffBm1AkbSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AkbSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm1AkeSet_Removal != null) {

                    if (diffBm1AkeSet_Removal.getPair() != null
                            && diffBm1AkeSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                && (diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                && diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKE")
                                    .addAll(diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE"));
                        } else {
                            if ((diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE"));
                                pair.getChanges().put("TR_TABLE_AKE", changesList);
                            }
                        }

                        if (diffBm1AkeSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AkeSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm1EikSet_Removal != null) {

                    if (diffBm1EikSet_Removal.getPair() != null
                            && diffBm1EikSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                && (diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                && diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                            pair.getChanges().get("TR_TABLE_EIK")
                                    .addAll(diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK"));
                        } else {
                            if ((diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK"));
                                pair.getChanges().put("TR_TABLE_EIK", changesList);
                            }
                        }

                        if (diffBm1EikSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1EikSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm1PivSet_Removal != null) {

                    if (diffBm1PivSet_Removal.getPair() != null
                            && diffBm1PivSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                && (diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                && diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                            pair.getChanges().get("TR_TABLE_PIV")
                                    .addAll(diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV"));
                        } else {
                            if ((diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV"));
                                pair.getChanges().put("TR_TABLE_PIV", changesList);
                            }
                        }

                        if (diffBm1PivSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1PivSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffAllgemeinMusterI_Removal != null) {

                    if (diffAllgemeinMusterI_Removal.getPair() != null
                            && diffAllgemeinMusterI_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1")
                                    .addAll(diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffAllgemeinMusterI_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAllgemeinMusterI_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffAngabenBescheinigung2_Removal != null) {

                    if (diffAngabenBescheinigung2_Removal.getPair() != null
                            && diffAngabenBescheinigung2_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffAngabenBescheinigung2_Removal.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                && diffAngabenBescheinigung2_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1").addAll(
                                    diffAngabenBescheinigung2_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffAngabenBescheinigung2_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung2_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAngabenBescheinigung2_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffAngabenBescheinigung2_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAngabenBescheinigung2_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffDepositoryReceipts_Removal != null) {

                    if (diffDepositoryReceipts_Removal.getPair() != null
                            && diffDepositoryReceipts_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1")
                                    .addAll(diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffDepositoryReceipts_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffDepositoryReceipts_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffAngabenBescheinigung1_Removal != null) {

                    if (diffAngabenBescheinigung1_Removal.getPair() != null
                            && diffAngabenBescheinigung1_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffAngabenBescheinigung1_Removal.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                && diffAngabenBescheinigung1_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1").addAll(
                                    diffAngabenBescheinigung1_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffAngabenBescheinigung1_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung1_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAngabenBescheinigung1_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffAngabenBescheinigung1_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAngabenBescheinigung1_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffSteuerabzug_Removal != null) {

                    if (diffSteuerabzug_Removal.getPair() != null
                            && diffSteuerabzug_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1")
                                    .addAll(diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffSteuerabzug_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffSteuerabzug_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffAngabenBescheinigung_Removal != null) {

                    if (diffAngabenBescheinigung_Removal.getPair() != null
                            && diffAngabenBescheinigung_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1").addAll(
                                    diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffAngabenBescheinigung_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAngabenBescheinigung_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffKapitalertraegeAbzug_Removal != null) {

                    if (diffKapitalertraegeAbzug_Removal.getPair() != null
                            && diffKapitalertraegeAbzug_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1").addAll(
                                    diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffKapitalertraegeAbzug_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffKapitalertraegeAbzug_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffEntschaedigung_Removal != null) {

                    if (diffEntschaedigung_Removal.getPair() != null
                            && diffEntschaedigung_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                && (diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                && diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM1")
                                    .addAll(diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                        } else {
                            if ((diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                pair.getChanges().put("TR_TABLE_BM1", changesList);
                            }
                        }

                        if (diffEntschaedigung_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffEntschaedigung_Removal.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Removed all Bm1 records");
        } else if (Bm1PKPrevious.size() > 0 && Bm1PKAfter.size() > 0) {

            Bm1PKIntersection = new HashSet<>(Bm1PKPrevious);
            Bm1PKIntersection.retainAll(Bm1PKAfter);

            if (Bm1PKIntersection.size() > 0) {
                Bm1PKRemoved = new HashSet<>(Bm1PKPrevious);

                Bm1PKRemoved.removeAll(Bm1PKIntersection);
                Bm1PKAdded = new HashSet<>(Bm1PKAfter);

                Bm1PKAdded.removeAll(Bm1PKIntersection);

                for (TrTableBm1PK Bm1PK : Bm1PKAdded) {

                    TrTableBm1 before = bsb_before.getTrTableBm1Set().stream()
                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().isPresent()
                                    ? bsb_before.getTrTableBm1Set().stream()
                                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().get()
                                    : null;
                    TrTableBm1 after = bsb_after.getTrTableBm1Set().stream()
                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().isPresent()
                                    ? bsb_after.getTrTableBm1Set().stream()
                                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().get()
                                    : null;

                    diffBm1AamSet_Addition = getDiffBm1AamSet(before, after);
                    diffBm1AkbSet_Addition = getDiffBm1AkbSet(before, after);
                    diffBm1AkeSet_Addition = getDiffBm1AkeSet(before, after);
                    diffBm1EikSet_Addition = getDiffBm1EikSet(before, after);
                    diffBm1PivSet_Addition = getDiffBm1PivSet(before, after);
                    diffAllgemeinMusterI_Addition = getDiffAllgemeinMusterI(before, after);
                    diffAngabenBescheinigung2_Addition = getDiffAngabenBescheinigung2(before, after);
                    diffDepositoryReceipts_Addition = getDiffDepositoryReceipts(before, after);
                    diffAngabenBescheinigung1_Addition = getDiffAngabenBescheinigung1(before, after);
                    diffSteuerabzug_Addition = getDiffSteuerabzug(before, after);
                    diffAngabenBescheinigung_Addition = getDiffAngabenBescheinigung(before, after);
                    diffKapitalertraegeAbzug_Addition = getDiffKapitalertraegeAbzug(before, after);
                    diffEntschaedigung_Addition = getDiffEntschaedigung(before, after);

                    if (diffBm1AamSet_Addition != null) {

                        if (diffBm1AamSet_Addition.getPair() != null
                                && diffBm1AamSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM")
                                        .addAll(diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                        && diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm1AamSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AamSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1AkbSet_Addition != null) {

                        if (diffBm1AkbSet_Addition.getPair() != null
                                && diffBm1AkbSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB")
                                        .addAll(diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                        && diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm1AkbSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AkbSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1AkeSet_Addition != null) {

                        if (diffBm1AkeSet_Addition.getPair() != null
                                && diffBm1AkeSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                        && diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm1AkeSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AkeSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1EikSet_Addition != null) {

                        if (diffBm1EikSet_Addition.getPair() != null
                                && diffBm1EikSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK")
                                        .addAll(diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                        && diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm1EikSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1EikSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1PivSet_Addition != null) {

                        if (diffBm1PivSet_Addition.getPair() != null
                                && diffBm1PivSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV")
                                        .addAll(diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                        && diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm1PivSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1PivSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAllgemeinMusterI_Addition != null) {

                        if (diffAllgemeinMusterI_Addition.getPair() != null
                                && diffAllgemeinMusterI_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAllgemeinMusterI_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffAllgemeinMusterI_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAllgemeinMusterI_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAllgemeinMusterI_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung2_Addition != null) {

                        if (diffAngabenBescheinigung2_Addition.getPair() != null
                                && diffAngabenBescheinigung2_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung2_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung2_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAngabenBescheinigung2_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung2_Addition.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung2_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung2_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung2_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung2_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffDepositoryReceipts_Addition != null) {

                        if (diffDepositoryReceipts_Addition.getPair() != null
                                && diffDepositoryReceipts_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffDepositoryReceipts_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffDepositoryReceipts_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffDepositoryReceipts_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung1_Addition != null) {

                        if (diffAngabenBescheinigung1_Addition.getPair() != null
                                && diffAngabenBescheinigung1_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung1_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung1_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAngabenBescheinigung1_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung1_Addition.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung1_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung1_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung1_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung1_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffSteuerabzug_Addition != null) {

                        if (diffSteuerabzug_Addition.getPair() != null
                                && diffSteuerabzug_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1")
                                        .addAll(diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffSteuerabzug_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffSteuerabzug_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffSteuerabzug_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung_Addition != null) {

                        if (diffAngabenBescheinigung_Addition.getPair() != null
                                && diffAngabenBescheinigung_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAngabenBescheinigung_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung_Addition.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffKapitalertraegeAbzug_Addition != null) {

                        if (diffKapitalertraegeAbzug_Addition.getPair() != null
                                && diffKapitalertraegeAbzug_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffKapitalertraegeAbzug_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffKapitalertraegeAbzug_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffKapitalertraegeAbzug_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffKapitalertraegeAbzug_Addition.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffKapitalertraegeAbzug_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffKapitalertraegeAbzug_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffKapitalertraegeAbzug_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffKapitalertraegeAbzug_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffEntschaedigung_Addition != null) {

                        if (diffEntschaedigung_Addition.getPair() != null
                                && diffEntschaedigung_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1")
                                        .addAll(diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffEntschaedigung_Addition.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffEntschaedigung_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffEntschaedigung_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableBm1PK Bm1PK : Bm1PKRemoved) {

                    TrTableBm1 before = bsb_before.getTrTableBm1Set().stream()
                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().isPresent()
                                    ? bsb_before.getTrTableBm1Set().stream()
                                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().get()
                                    : null;
                    TrTableBm1 after = bsb_after.getTrTableBm1Set().stream()
                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().isPresent()
                                    ? bsb_after.getTrTableBm1Set().stream()
                                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().get()
                                    : null;

                    diffBm1AamSet_Removal = getDiffBm1AamSet(before, after);
                    diffBm1AkbSet_Removal = getDiffBm1AkbSet(before, after);
                    diffBm1AkeSet_Removal = getDiffBm1AkeSet(before, after);
                    diffBm1EikSet_Removal = getDiffBm1EikSet(before, after);
                    diffBm1PivSet_Removal = getDiffBm1PivSet(before, after);
                    diffAllgemeinMusterI_Removal = getDiffAllgemeinMusterI(before, after);
                    diffAngabenBescheinigung2_Removal = getDiffAngabenBescheinigung2(before, after);
                    diffDepositoryReceipts_Removal = getDiffDepositoryReceipts(before, after);
                    diffAngabenBescheinigung1_Removal = getDiffAngabenBescheinigung1(before, after);
                    diffSteuerabzug_Removal = getDiffSteuerabzug(before, after);
                    diffAngabenBescheinigung_Removal = getDiffAngabenBescheinigung(before, after);
                    diffKapitalertraegeAbzug_Removal = getDiffKapitalertraegeAbzug(before, after);
                    diffEntschaedigung_Removal = getDiffEntschaedigung(before, after);

                    if (diffBm1AamSet_Removal != null) {

                        if (diffBm1AamSet_Removal.getPair() != null
                                && diffBm1AamSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM")
                                        .addAll(diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                        && diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm1AamSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AamSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1AkbSet_Removal != null) {

                        if (diffBm1AkbSet_Removal.getPair() != null
                                && diffBm1AkbSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB")
                                        .addAll(diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                        && diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm1AkbSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AkbSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1AkeSet_Removal != null) {

                        if (diffBm1AkeSet_Removal.getPair() != null
                                && diffBm1AkeSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                        && diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm1AkeSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AkeSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1EikSet_Removal != null) {

                        if (diffBm1EikSet_Removal.getPair() != null
                                && diffBm1EikSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK")
                                        .addAll(diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                        && diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm1EikSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1EikSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1PivSet_Removal != null) {

                        if (diffBm1PivSet_Removal.getPair() != null
                                && diffBm1PivSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV")
                                        .addAll(diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                        && diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm1PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm1PivSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1PivSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAllgemeinMusterI_Removal != null) {

                        if (diffAllgemeinMusterI_Removal.getPair() != null
                                && diffAllgemeinMusterI_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffAllgemeinMusterI_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAllgemeinMusterI_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAllgemeinMusterI_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung2_Removal != null) {

                        if (diffAngabenBescheinigung2_Removal.getPair() != null
                                && diffAngabenBescheinigung2_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung2_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung2_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAngabenBescheinigung2_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung2_Removal.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung2_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung2_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung2_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung2_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffDepositoryReceipts_Removal != null) {

                        if (diffDepositoryReceipts_Removal.getPair() != null
                                && diffDepositoryReceipts_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffDepositoryReceipts_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffDepositoryReceipts_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffDepositoryReceipts_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung1_Removal != null) {

                        if (diffAngabenBescheinigung1_Removal.getPair() != null
                                && diffAngabenBescheinigung1_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung1_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung1_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAngabenBescheinigung1_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung1_Removal.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung1_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung1_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung1_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung1_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffSteuerabzug_Removal != null) {

                        if (diffSteuerabzug_Removal.getPair() != null
                                && diffSteuerabzug_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1").size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1")
                                        .addAll(diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffSteuerabzug_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffSteuerabzug_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffSteuerabzug_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung_Removal != null) {

                        if (diffAngabenBescheinigung_Removal.getPair() != null
                                && diffAngabenBescheinigung_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung_Removal.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffKapitalertraegeAbzug_Removal != null) {

                        if (diffKapitalertraegeAbzug_Removal.getPair() != null
                                && diffKapitalertraegeAbzug_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffKapitalertraegeAbzug_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffKapitalertraegeAbzug_Removal.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffKapitalertraegeAbzug_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffKapitalertraegeAbzug_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffKapitalertraegeAbzug_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffKapitalertraegeAbzug_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffEntschaedigung_Removal != null) {

                        if (diffEntschaedigung_Removal.getPair() != null
                                && diffEntschaedigung_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1")
                                        .addAll(diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffEntschaedigung_Removal.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffEntschaedigung_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffEntschaedigung_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableBm1PK Bm1PK : Bm1PKIntersection) {

                    TrTableBm1 before = bsb_before.getTrTableBm1Set().stream()
                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().isPresent()
                                    ? bsb_before.getTrTableBm1Set().stream()
                                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().get()
                                    : null;
                    TrTableBm1 after = bsb_after.getTrTableBm1Set().stream()
                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().isPresent()
                                    ? bsb_after.getTrTableBm1Set().stream()
                                            .filter(bm1 -> bm1.getTrTableBm1PK().equals(Bm1PK)).findFirst().get()
                                    : null;

                    diffBm1AamSet_Intersection = getDiffBm1AamSet(before, after);
                    diffBm1AkbSet_Intersection = getDiffBm1AkbSet(before, after);
                    diffBm1AkeSet_Intersection = getDiffBm1AkeSet(before, after);
                    diffBm1EikSet_Intersection = getDiffBm1EikSet(before, after);
                    diffBm1PivSet_Intersection = getDiffBm1PivSet(before, after);
                    diffAllgemeinMusterI_Intersection = getDiffAllgemeinMusterI(before, after);
                    diffAngabenBescheinigung2_Intersection = getDiffAngabenBescheinigung2(before, after);
                    diffDepositoryReceipts_Intersection = getDiffDepositoryReceipts(before, after);
                    diffAngabenBescheinigung1_Intersection = getDiffAngabenBescheinigung1(before, after);
                    diffSteuerabzug_Intersection = getDiffSteuerabzug(before, after);
                    diffAngabenBescheinigung_Intersection = getDiffAngabenBescheinigung(before, after);
                    diffKapitalertraegeAbzug_Intersection = getDiffKapitalertraegeAbzug(before, after);
                    diffEntschaedigung_Intersection = getDiffEntschaedigung(before, after);

                    if (diffBm1AamSet_Intersection != null) {

                        if (diffBm1AamSet_Intersection.getPair() != null
                                && diffBm1AamSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm1AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm1AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM")
                                        .addAll(diffBm1AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm1AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                        && diffBm1AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm1AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm1AamSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AamSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1AkbSet_Intersection != null) {

                        if (diffBm1AkbSet_Intersection.getPair() != null
                                && diffBm1AkbSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm1AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB")
                                        .addAll(diffBm1AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm1AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                        && diffBm1AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm1AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm1AkbSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AkbSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1AkeSet_Intersection != null) {

                        if (diffBm1AkeSet_Intersection.getPair() != null
                                && diffBm1AkeSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm1AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm1AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm1AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                        && diffBm1AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm1AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm1AkeSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AkeSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1EikSet_Intersection != null) {

                        if (diffBm1EikSet_Intersection.getPair() != null
                                && diffBm1EikSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm1EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm1EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK")
                                        .addAll(diffBm1EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm1EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                        && diffBm1EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm1EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm1EikSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1EikSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm1PivSet_Intersection != null) {

                        if (diffBm1PivSet_Intersection.getPair() != null
                                && diffBm1PivSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm1PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm1PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV")
                                        .addAll(diffBm1PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm1PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                        && diffBm1PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm1PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm1PivSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1PivSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAllgemeinMusterI_Intersection != null) {

                        if (diffAllgemeinMusterI_Intersection.getPair() != null
                                && diffAllgemeinMusterI_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAllgemeinMusterI_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAllgemeinMusterI_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffAllgemeinMusterI_Intersection.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAllgemeinMusterI_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAllgemeinMusterI_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAllgemeinMusterI_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAllgemeinMusterI_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAllgemeinMusterI_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung2_Intersection != null) {

                        if (diffAngabenBescheinigung2_Intersection.getPair() != null
                                && diffAngabenBescheinigung2_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung2_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung2_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(diffAngabenBescheinigung2_Intersection
                                        .getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung2_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung2_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_BM1").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung2_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung2_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung2_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffDepositoryReceipts_Intersection != null) {

                        if (diffDepositoryReceipts_Intersection.getPair() != null
                                && diffDepositoryReceipts_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffDepositoryReceipts_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffDepositoryReceipts_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffDepositoryReceipts_Intersection.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffDepositoryReceipts_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffDepositoryReceipts_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_BM1").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffDepositoryReceipts_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffDepositoryReceipts_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffDepositoryReceipts_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung1_Intersection != null) {

                        if (diffAngabenBescheinigung1_Intersection.getPair() != null
                                && diffAngabenBescheinigung1_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung1_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung1_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(diffAngabenBescheinigung1_Intersection
                                        .getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung1_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung1_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_BM1").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung1_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung1_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung1_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffSteuerabzug_Intersection != null) {

                        if (diffSteuerabzug_Intersection.getPair() != null
                                && diffSteuerabzug_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffSteuerabzug_Intersection.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                    && diffSteuerabzug_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffSteuerabzug_Intersection.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffSteuerabzug_Intersection.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffSteuerabzug_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffSteuerabzug_Intersection.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffSteuerabzug_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffSteuerabzug_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAngabenBescheinigung_Intersection != null) {

                        if (diffAngabenBescheinigung_Intersection.getPair() != null
                                && diffAngabenBescheinigung_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffAngabenBescheinigung_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffAngabenBescheinigung_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(diffAngabenBescheinigung_Intersection
                                        .getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffAngabenBescheinigung_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffAngabenBescheinigung_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_BM1").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAngabenBescheinigung_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffAngabenBescheinigung_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAngabenBescheinigung_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffKapitalertraegeAbzug_Intersection != null) {

                        if (diffKapitalertraegeAbzug_Intersection.getPair() != null
                                && diffKapitalertraegeAbzug_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffKapitalertraegeAbzug_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffKapitalertraegeAbzug_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(diffKapitalertraegeAbzug_Intersection
                                        .getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffKapitalertraegeAbzug_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM1") != null)
                                        && diffKapitalertraegeAbzug_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_BM1").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffKapitalertraegeAbzug_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffKapitalertraegeAbzug_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffKapitalertraegeAbzug_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffEntschaedigung_Intersection != null) {

                        if (diffEntschaedigung_Intersection.getPair() != null
                                && diffEntschaedigung_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM1")
                                    && (diffEntschaedigung_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM1") != null)
                                    && diffEntschaedigung_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM1").addAll(
                                        diffEntschaedigung_Intersection.getPair().getChanges().get("TR_TABLE_BM1"));
                            } else {
                                if ((diffEntschaedigung_Intersection.getPair().getChanges().get("TR_TABLE_BM1") != null)
                                        && diffEntschaedigung_Intersection.getPair().getChanges().get("TR_TABLE_BM1")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffEntschaedigung_Intersection.getPair().getChanges().get("TR_TABLE_BM1"));
                                    pair.getChanges().put("TR_TABLE_BM1", changesList);
                                }
                            }

                            if (diffEntschaedigung_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffEntschaedigung_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm1AamSet_Intersection.isChanged()
                            || diffBm1AkbSet_Intersection.isChanged() || diffBm1AkeSet_Intersection.isChanged()
                            || diffBm1EikSet_Intersection.isChanged() || diffBm1PivSet_Intersection.isChanged()
                            || diffAllgemeinMusterI_Intersection.isChanged()
                            || diffAngabenBescheinigung2_Intersection.isChanged()
                            || diffDepositoryReceipts_Intersection.isChanged()
                            || diffAngabenBescheinigung1_Intersection.isChanged()
                            || diffSteuerabzug_Intersection.isChanged()
                            || diffAngabenBescheinigung_Intersection.isChanged()
                            || diffKapitalertraegeAbzug_Intersection.isChanged()
                            || diffEntschaedigung_Intersection.isChanged();
                }
            } else {
                Bm1PKAdded = new HashSet<>(Bm1PKPrevious);
                Bm1PKAdded.addAll(Bm1PKAfter);
                Bm1PKRemoved = new HashSet();
            }
        }

        if (Bm1PKAdded.size() > 0) {
            summaries.add("Added a new Bm1 record");
        }

        if (Bm1PKRemoved.size() > 0) {
            summaries.add("Removed Bm1 record");
        }

        if (changed) {
            summaries.add("Changed Bm1");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3Set(TrTableBsb bsb_before, TrTableBsb bsb_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm3AamSet_Intersection, diffBm3AamSet_Addition, diffBm3AamSet_Removal,
                diffBm3AkbSet_Intersection, diffBm3AkbSet_Addition, diffBm3AkbSet_Removal, diffBm3AkeSet_Intersection,
                diffBm3AkeSet_Addition, diffBm3AkeSet_Removal, diffBm3EikSet_Intersection, diffBm3EikSet_Addition,
                diffBm3EikSet_Removal, diffBm3PivSet_Intersection, diffBm3PivSet_Addition, diffBm3PivSet_Removal,
                diffDepositoryReceipts_Intersection, diffDepositoryReceipts_Addition, diffDepositoryReceipts_Removal,
                diffPara43Details_Intersection, diffPara43Details_Addition, diffPara43Details_Removal,
                diffPara16Abs1Nr1u2_Intersection, diffPara16Abs1Nr1u2_Addition, diffPara16Abs1Nr1u2_Removal,
                diffAllgemeinMusterIII_Intersection, diffAllgemeinMusterIII_Addition, diffAllgemeinMusterIII_Removal,
                diffAuslSpezInvest_Intersection, diffAuslSpezInvest_Addition, diffAuslSpezInvest_Removal,
                diffInvestmentanteile_Intersection, diffInvestmentanteile_Addition, diffInvestmentanteile_Removal,
                diffPara16Abs1Nr3_Intersection, diffPara16Abs1Nr3_Addition, diffPara16Abs1Nr3_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableBm3PK> Bm3PKRemoved, Bm3PKAdded, Bm3PKIntersection;

        Bm3PKRemoved = new HashSet<>();
        Bm3PKAdded = new HashSet<>();

        Set<TrTableBm3PK> Bm3PKPrevious = bsb_before != null
                ? bsb_before.getTrTableBm3Set().stream().map(TrTableBm3::getTrTableBm3PK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableBm3PK> Bm3PKAfter = bsb_after != null
                ? bsb_after.getTrTableBm3Set().stream().map(TrTableBm3::getTrTableBm3PK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bsb_before == null && bsb_after == null) {
            return null;
        } else if (Bm3PKPrevious.size() == 0 && Bm3PKAfter.size() > 0) {
            for (TrTableBm3PK Bm3PK : Bm3PKAfter) {

                TrTableBm3 after = bsb_after.getTrTableBm3Set().stream()
                        .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().isPresent()
                                ? bsb_after.getTrTableBm3Set().stream()
                                        .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().get()
                                : null;

                diffBm3AamSet_Addition = getDiffBm3AamSet(null, after);
                diffBm3AkbSet_Addition = getDiffBm3AkbSet(null, after);
                diffBm3AkeSet_Addition = getDiffBm3AkeSet(null, after);
                diffBm3EikSet_Addition = getDiffBm3EikSet(null, after);
                diffBm3PivSet_Addition = getDiffBm3PivSet(null, after);
                diffDepositoryReceipts_Addition = getDiffDepositoryReceipts(null, after);
                diffPara43Details_Addition = getDiffPara43Details(null, after);
                diffPara16Abs1Nr1u2_Addition = getDiffPara16Abs1Nr1u2(null, after);
                diffAllgemeinMusterIII_Addition = getDiffAllgemeinMusterIII(null, after);
                diffAuslSpezInvest_Addition = getDiffAuslSpezInvest(null, after);
                diffInvestmentanteile_Addition = getDiffInvestmentanteile(null, after);
                diffPara16Abs1Nr3_Addition = getDiffPara16Abs1Nr3(null, after);

                if (diffBm3AamSet_Addition != null) {

                    if (diffBm3AamSet_Addition.getPair() != null
                            && diffBm3AamSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                && (diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                && diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AAM")
                                    .addAll(diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM"));
                        } else {
                            if ((diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM"));
                                pair.getChanges().put("TR_TABLE_AAM", changesList);
                            }
                        }

                        if (diffBm3AamSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AamSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm3AkbSet_Addition != null) {

                    if (diffBm3AkbSet_Addition.getPair() != null
                            && diffBm3AkbSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                && (diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                && diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKB")
                                    .addAll(diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB"));
                        } else {
                            if ((diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB"));
                                pair.getChanges().put("TR_TABLE_AKB", changesList);
                            }
                        }

                        if (diffBm3AkbSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AkbSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm3AkeSet_Addition != null) {

                    if (diffBm3AkeSet_Addition.getPair() != null
                            && diffBm3AkeSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                && (diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                && diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKE")
                                    .addAll(diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE"));
                        } else {
                            if ((diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE"));
                                pair.getChanges().put("TR_TABLE_AKE", changesList);
                            }
                        }

                        if (diffBm3AkeSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AkeSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm3EikSet_Addition != null) {

                    if (diffBm3EikSet_Addition.getPair() != null
                            && diffBm3EikSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                && (diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                && diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                            pair.getChanges().get("TR_TABLE_EIK")
                                    .addAll(diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK"));
                        } else {
                            if ((diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK"));
                                pair.getChanges().put("TR_TABLE_EIK", changesList);
                            }
                        }

                        if (diffBm3EikSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3EikSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm3PivSet_Addition != null) {

                    if (diffBm3PivSet_Addition.getPair() != null
                            && diffBm3PivSet_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                && (diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                && diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                            pair.getChanges().get("TR_TABLE_PIV")
                                    .addAll(diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                        } else {
                            if ((diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                                pair.getChanges().put("TR_TABLE_PIV", changesList);
                            }
                        }

                        if (diffBm3PivSet_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3PivSet_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffDepositoryReceipts_Addition != null) {

                    if (diffDepositoryReceipts_Addition.getPair() != null
                            && diffDepositoryReceipts_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffDepositoryReceipts_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffDepositoryReceipts_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffPara43Details_Addition != null) {

                    if (diffPara43Details_Addition.getPair() != null
                            && diffPara43Details_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffPara43Details_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffPara43Details_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffPara16Abs1Nr1u2_Addition != null) {

                    if (diffPara16Abs1Nr1u2_Addition.getPair() != null
                            && diffPara16Abs1Nr1u2_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffPara16Abs1Nr1u2_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffPara16Abs1Nr1u2_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffAllgemeinMusterIII_Addition != null) {

                    if (diffAllgemeinMusterIII_Addition.getPair() != null
                            && diffAllgemeinMusterIII_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffAllgemeinMusterIII_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAllgemeinMusterIII_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffAuslSpezInvest_Addition != null) {

                    if (diffAuslSpezInvest_Addition.getPair() != null
                            && diffAuslSpezInvest_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffAuslSpezInvest_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAuslSpezInvest_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffInvestmentanteile_Addition != null) {

                    if (diffInvestmentanteile_Addition.getPair() != null
                            && diffInvestmentanteile_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffInvestmentanteile_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffInvestmentanteile_Addition.getPair().getSummaries());
                        }
                    }
                }

                if (diffPara16Abs1Nr3_Addition != null) {

                    if (diffPara16Abs1Nr3_Addition.getPair() != null
                            && diffPara16Abs1Nr3_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffPara16Abs1Nr3_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffPara16Abs1Nr3_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm3 record");
        } else if (Bm3PKPrevious.size() > 0 && Bm3PKAfter.size() == 0) {

            for (TrTableBm3PK Bm3PK : Bm3PKPrevious) {

                TrTableBm3 before = bsb_before.getTrTableBm3Set().stream()
                        .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().isPresent()
                                ? bsb_before.getTrTableBm3Set().stream()
                                        .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().get()
                                : null;

                diffBm3AamSet_Removal = getDiffBm3AamSet(before, null);
                diffBm3AkbSet_Removal = getDiffBm3AkbSet(before, null);
                diffBm3AkeSet_Removal = getDiffBm3AkeSet(before, null);
                diffBm3EikSet_Removal = getDiffBm3EikSet(before, null);
                diffBm3PivSet_Removal = getDiffBm3PivSet(before, null);
                diffDepositoryReceipts_Removal = getDiffDepositoryReceipts(before, null);
                diffPara43Details_Removal = getDiffPara43Details(before, null);
                diffPara16Abs1Nr1u2_Removal = getDiffPara16Abs1Nr1u2(before, null);
                diffAllgemeinMusterIII_Removal = getDiffAllgemeinMusterIII(before, null);
                diffAuslSpezInvest_Removal = getDiffAuslSpezInvest(before, null);
                diffInvestmentanteile_Removal = getDiffInvestmentanteile(before, null);
                diffPara16Abs1Nr3_Removal = getDiffPara16Abs1Nr3(before, null);

                if (diffBm3AamSet_Removal != null) {

                    if (diffBm3AamSet_Removal.getPair() != null
                            && diffBm3AamSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                && (diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                && diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AAM")
                                    .addAll(diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM"));
                        } else {
                            if ((diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM"));
                                pair.getChanges().put("TR_TABLE_AAM", changesList);
                            }
                        }

                        if (diffBm3AamSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AamSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm3AkbSet_Removal != null) {

                    if (diffBm3AkbSet_Removal.getPair() != null
                            && diffBm3AkbSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                && (diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                && diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKB")
                                    .addAll(diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB"));
                        } else {
                            if ((diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB"));
                                pair.getChanges().put("TR_TABLE_AKB", changesList);
                            }
                        }

                        if (diffBm3AkbSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AkbSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm3AkeSet_Removal != null) {

                    if (diffBm3AkeSet_Removal.getPair() != null
                            && diffBm3AkeSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                && (diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                && diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKE")
                                    .addAll(diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE"));
                        } else {
                            if ((diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE"));
                                pair.getChanges().put("TR_TABLE_AKE", changesList);
                            }
                        }

                        if (diffBm3AkeSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AkeSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm3EikSet_Removal != null) {

                    if (diffBm3EikSet_Removal.getPair() != null
                            && diffBm3EikSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                && (diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                && diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                            pair.getChanges().get("TR_TABLE_EIK")
                                    .addAll(diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK"));
                        } else {
                            if ((diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK"));
                                pair.getChanges().put("TR_TABLE_EIK", changesList);
                            }
                        }

                        if (diffBm3EikSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3EikSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffBm3PivSet_Removal != null) {

                    if (diffBm3PivSet_Removal.getPair() != null
                            && diffBm3PivSet_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                && (diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                && diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                            pair.getChanges().get("TR_TABLE_PIV")
                                    .addAll(diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV"));
                        } else {
                            if ((diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV"));
                                pair.getChanges().put("TR_TABLE_PIV", changesList);
                            }
                        }

                        if (diffBm3PivSet_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3PivSet_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffDepositoryReceipts_Removal != null) {

                    if (diffDepositoryReceipts_Removal.getPair() != null
                            && diffDepositoryReceipts_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffDepositoryReceipts_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffDepositoryReceipts_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffPara43Details_Removal != null) {

                    if (diffPara43Details_Removal.getPair() != null
                            && diffPara43Details_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffPara43Details_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffPara43Details_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffPara16Abs1Nr1u2_Removal != null) {

                    if (diffPara16Abs1Nr1u2_Removal.getPair() != null
                            && diffPara16Abs1Nr1u2_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffPara16Abs1Nr1u2_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffPara16Abs1Nr1u2_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffAllgemeinMusterIII_Removal != null) {

                    if (diffAllgemeinMusterIII_Removal.getPair() != null
                            && diffAllgemeinMusterIII_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffAllgemeinMusterIII_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAllgemeinMusterIII_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffAuslSpezInvest_Removal != null) {

                    if (diffAuslSpezInvest_Removal.getPair() != null
                            && diffAuslSpezInvest_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffAuslSpezInvest_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffAuslSpezInvest_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffInvestmentanteile_Removal != null) {

                    if (diffInvestmentanteile_Removal.getPair() != null
                            && diffInvestmentanteile_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(
                                        diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffInvestmentanteile_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffInvestmentanteile_Removal.getPair().getSummaries());
                        }
                    }
                }

                if (diffPara16Abs1Nr3_Removal != null) {

                    if (diffPara16Abs1Nr3_Removal.getPair() != null
                            && diffPara16Abs1Nr3_Removal.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                && (diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                && diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3").size() > 0) {
                            pair.getChanges().get("TR_TABLE_BM3")
                                    .addAll(diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                        } else {
                            if ((diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList
                                        .addAll(diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                pair.getChanges().put("TR_TABLE_BM3", changesList);
                            }
                        }

                        if (diffPara16Abs1Nr3_Removal.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffPara16Abs1Nr3_Removal.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Removed all Bm3 records");
        } else if (Bm3PKPrevious.size() > 0 && Bm3PKAfter.size() > 0) {

            Bm3PKIntersection = new HashSet<>(Bm3PKPrevious);
            Bm3PKIntersection.retainAll(Bm3PKAfter);

            if (Bm3PKIntersection.size() > 0) {
                Bm3PKRemoved = new HashSet<>(Bm3PKPrevious);

                Bm3PKRemoved.removeAll(Bm3PKIntersection);
                Bm3PKAdded = new HashSet<>(Bm3PKAfter);

                Bm3PKAdded.removeAll(Bm3PKIntersection);

                for (TrTableBm3PK Bm3PK : Bm3PKAdded) {

                    TrTableBm3 before = bsb_before.getTrTableBm3Set().stream()
                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().isPresent()
                                    ? bsb_before.getTrTableBm3Set().stream()
                                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().get()
                                    : null;
                    TrTableBm3 after = bsb_after.getTrTableBm3Set().stream()
                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().isPresent()
                                    ? bsb_after.getTrTableBm3Set().stream()
                                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().get()
                                    : null;

                    diffBm3AamSet_Addition = getDiffBm3AamSet(before, after);
                    diffBm3AkbSet_Addition = getDiffBm3AkbSet(before, after);
                    diffBm3AkeSet_Addition = getDiffBm3AkeSet(before, after);
                    diffBm3EikSet_Addition = getDiffBm3EikSet(before, after);
                    diffBm3PivSet_Addition = getDiffBm3PivSet(before, after);
                    diffDepositoryReceipts_Addition = getDiffDepositoryReceipts(before, after);
                    diffPara43Details_Addition = getDiffPara43Details(before, after);
                    diffPara16Abs1Nr1u2_Addition = getDiffPara16Abs1Nr1u2(before, after);
                    diffAllgemeinMusterIII_Addition = getDiffAllgemeinMusterIII(before, after);
                    diffAuslSpezInvest_Addition = getDiffAuslSpezInvest(before, after);
                    diffInvestmentanteile_Addition = getDiffInvestmentanteile(before, after);
                    diffPara16Abs1Nr3_Addition = getDiffPara16Abs1Nr3(before, after);

                    if (diffBm3AamSet_Addition != null) {

                        if (diffBm3AamSet_Addition.getPair() != null
                                && diffBm3AamSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM")
                                        .addAll(diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                        && diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3AamSet_Addition.getPair().getChanges().get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm3AamSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AamSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3AkbSet_Addition != null) {

                        if (diffBm3AkbSet_Addition.getPair() != null
                                && diffBm3AkbSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB")
                                        .addAll(diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                        && diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3AkbSet_Addition.getPair().getChanges().get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm3AkbSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AkbSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3AkeSet_Addition != null) {

                        if (diffBm3AkeSet_Addition.getPair() != null
                                && diffBm3AkeSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                        && diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3AkeSet_Addition.getPair().getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm3AkeSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AkeSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3EikSet_Addition != null) {

                        if (diffBm3EikSet_Addition.getPair() != null
                                && diffBm3EikSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK")
                                        .addAll(diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                        && diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3EikSet_Addition.getPair().getChanges().get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm3EikSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3EikSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3PivSet_Addition != null) {

                        if (diffBm3PivSet_Addition.getPair() != null
                                && diffBm3PivSet_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV")
                                        .addAll(diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                        && diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3PivSet_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm3PivSet_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3PivSet_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffDepositoryReceipts_Addition != null) {

                        if (diffDepositoryReceipts_Addition.getPair() != null
                                && diffDepositoryReceipts_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffDepositoryReceipts_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffDepositoryReceipts_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffDepositoryReceipts_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffDepositoryReceipts_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara43Details_Addition != null) {

                        if (diffPara43Details_Addition.getPair() != null
                                && diffPara43Details_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3")
                                        .addAll(diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffPara43Details_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara43Details_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara43Details_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara16Abs1Nr1u2_Addition != null) {

                        if (diffPara16Abs1Nr1u2_Addition.getPair() != null
                                && diffPara16Abs1Nr1u2_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffPara16Abs1Nr1u2_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara16Abs1Nr1u2_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara16Abs1Nr1u2_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAllgemeinMusterIII_Addition != null) {

                        if (diffAllgemeinMusterIII_Addition.getPair() != null
                                && diffAllgemeinMusterIII_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffAllgemeinMusterIII_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffAllgemeinMusterIII_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffAllgemeinMusterIII_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAllgemeinMusterIII_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAuslSpezInvest_Addition != null) {

                        if (diffAuslSpezInvest_Addition.getPair() != null
                                && diffAuslSpezInvest_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3")
                                        .addAll(diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffAuslSpezInvest_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffAuslSpezInvest_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAuslSpezInvest_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffInvestmentanteile_Addition != null) {

                        if (diffInvestmentanteile_Addition.getPair() != null
                                && diffInvestmentanteile_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffInvestmentanteile_Addition.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffInvestmentanteile_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffInvestmentanteile_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffInvestmentanteile_Addition.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara16Abs1Nr3_Addition != null) {

                        if (diffPara16Abs1Nr3_Addition.getPair() != null
                                && diffPara16Abs1Nr3_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3")
                                        .addAll(diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffPara16Abs1Nr3_Addition.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara16Abs1Nr3_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara16Abs1Nr3_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableBm3PK Bm3PK : Bm3PKRemoved) {

                    TrTableBm3 before = bsb_before.getTrTableBm3Set().stream()
                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().isPresent()
                                    ? bsb_before.getTrTableBm3Set().stream()
                                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().get()
                                    : null;
                    TrTableBm3 after = bsb_after.getTrTableBm3Set().stream()
                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().isPresent()
                                    ? bsb_after.getTrTableBm3Set().stream()
                                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().get()
                                    : null;

                    diffBm3AamSet_Removal = getDiffBm3AamSet(before, after);
                    diffBm3AkbSet_Removal = getDiffBm3AkbSet(before, after);
                    diffBm3AkeSet_Removal = getDiffBm3AkeSet(before, after);
                    diffBm3EikSet_Removal = getDiffBm3EikSet(before, after);
                    diffBm3PivSet_Removal = getDiffBm3PivSet(before, after);
                    diffDepositoryReceipts_Removal = getDiffDepositoryReceipts(before, after);
                    diffPara43Details_Removal = getDiffPara43Details(before, after);
                    diffPara16Abs1Nr1u2_Removal = getDiffPara16Abs1Nr1u2(before, after);
                    diffAllgemeinMusterIII_Removal = getDiffAllgemeinMusterIII(before, after);
                    diffAuslSpezInvest_Removal = getDiffAuslSpezInvest(before, after);
                    diffInvestmentanteile_Removal = getDiffInvestmentanteile(before, after);
                    diffPara16Abs1Nr3_Removal = getDiffPara16Abs1Nr3(before, after);

                    if (diffBm3AamSet_Removal != null) {

                        if (diffBm3AamSet_Removal.getPair() != null
                                && diffBm3AamSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM")
                                        .addAll(diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                        && diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3AamSet_Removal.getPair().getChanges().get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm3AamSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AamSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3AkbSet_Removal != null) {

                        if (diffBm3AkbSet_Removal.getPair() != null
                                && diffBm3AkbSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB")
                                        .addAll(diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                        && diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3AkbSet_Removal.getPair().getChanges().get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm3AkbSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AkbSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3AkeSet_Removal != null) {

                        if (diffBm3AkeSet_Removal.getPair() != null
                                && diffBm3AkeSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                        && diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3AkeSet_Removal.getPair().getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm3AkeSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AkeSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3EikSet_Removal != null) {

                        if (diffBm3EikSet_Removal.getPair() != null
                                && diffBm3EikSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK")
                                        .addAll(diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                        && diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3EikSet_Removal.getPair().getChanges().get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm3EikSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3EikSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3PivSet_Removal != null) {

                        if (diffBm3PivSet_Removal.getPair() != null
                                && diffBm3PivSet_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV").size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV")
                                        .addAll(diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                        && diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList
                                            .addAll(diffBm3PivSet_Removal.getPair().getChanges().get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm3PivSet_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3PivSet_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffDepositoryReceipts_Removal != null) {

                        if (diffDepositoryReceipts_Removal.getPair() != null
                                && diffDepositoryReceipts_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffDepositoryReceipts_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffDepositoryReceipts_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffDepositoryReceipts_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffDepositoryReceipts_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara43Details_Removal != null) {

                        if (diffPara43Details_Removal.getPair() != null
                                && diffPara43Details_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3")
                                        .addAll(diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffPara43Details_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara43Details_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara43Details_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara16Abs1Nr1u2_Removal != null) {

                        if (diffPara16Abs1Nr1u2_Removal.getPair() != null
                                && diffPara16Abs1Nr1u2_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3")
                                        .addAll(diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffPara16Abs1Nr1u2_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara16Abs1Nr1u2_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara16Abs1Nr1u2_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAllgemeinMusterIII_Removal != null) {

                        if (diffAllgemeinMusterIII_Removal.getPair() != null
                                && diffAllgemeinMusterIII_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffAllgemeinMusterIII_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffAllgemeinMusterIII_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffAllgemeinMusterIII_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAllgemeinMusterIII_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAuslSpezInvest_Removal != null) {

                        if (diffAuslSpezInvest_Removal.getPair() != null
                                && diffAuslSpezInvest_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3")
                                        .addAll(diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffAuslSpezInvest_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffAuslSpezInvest_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAuslSpezInvest_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffInvestmentanteile_Removal != null) {

                        if (diffInvestmentanteile_Removal.getPair() != null
                                && diffInvestmentanteile_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffInvestmentanteile_Removal.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffInvestmentanteile_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffInvestmentanteile_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffInvestmentanteile_Removal.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara16Abs1Nr3_Removal != null) {

                        if (diffPara16Abs1Nr3_Removal.getPair() != null
                                && diffPara16Abs1Nr3_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3")
                                        .addAll(diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffPara16Abs1Nr3_Removal.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara16Abs1Nr3_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara16Abs1Nr3_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableBm3PK Bm3PK : Bm3PKIntersection) {

                    TrTableBm3 before = bsb_before.getTrTableBm3Set().stream()
                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().isPresent()
                                    ? bsb_before.getTrTableBm3Set().stream()
                                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().get()
                                    : null;
                    TrTableBm3 after = bsb_after.getTrTableBm3Set().stream()
                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().isPresent()
                                    ? bsb_after.getTrTableBm3Set().stream()
                                            .filter(bm3 -> bm3.getTrTableBm3PK().equals(Bm3PK)).findFirst().get()
                                    : null;

                    diffBm3AamSet_Intersection = getDiffBm3AamSet(before, after);
                    diffBm3AkbSet_Intersection = getDiffBm3AkbSet(before, after);
                    diffBm3AkeSet_Intersection = getDiffBm3AkeSet(before, after);
                    diffBm3EikSet_Intersection = getDiffBm3EikSet(before, after);
                    diffBm3PivSet_Intersection = getDiffBm3PivSet(before, after);
                    diffDepositoryReceipts_Intersection = getDiffDepositoryReceipts(before, after);
                    diffPara43Details_Intersection = getDiffPara43Details(before, after);
                    diffPara16Abs1Nr1u2_Intersection = getDiffPara16Abs1Nr1u2(before, after);
                    diffAllgemeinMusterIII_Intersection = getDiffAllgemeinMusterIII(before, after);
                    diffAuslSpezInvest_Intersection = getDiffAuslSpezInvest(before, after);
                    diffInvestmentanteile_Intersection = getDiffInvestmentanteile(before, after);
                    diffPara16Abs1Nr3_Intersection = getDiffPara16Abs1Nr3(before, after);

                    if (diffBm3AamSet_Intersection != null) {

                        if (diffBm3AamSet_Intersection.getPair() != null
                                && diffBm3AamSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm3AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                    && diffBm3AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM")
                                        .addAll(diffBm3AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm3AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM") != null)
                                        && diffBm3AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm3AamSet_Intersection.getPair().getChanges().get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm3AamSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AamSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3AkbSet_Intersection != null) {

                        if (diffBm3AkbSet_Intersection.getPair() != null
                                && diffBm3AkbSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm3AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB")
                                        .addAll(diffBm3AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm3AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB") != null)
                                        && diffBm3AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm3AkbSet_Intersection.getPair().getChanges().get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm3AkbSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AkbSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3AkeSet_Intersection != null) {

                        if (diffBm3AkeSet_Intersection.getPair() != null
                                && diffBm3AkeSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm3AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm3AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm3AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE") != null)
                                        && diffBm3AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm3AkeSet_Intersection.getPair().getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm3AkeSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AkeSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3EikSet_Intersection != null) {

                        if (diffBm3EikSet_Intersection.getPair() != null
                                && diffBm3EikSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm3EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                    && diffBm3EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK")
                                        .addAll(diffBm3EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm3EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK") != null)
                                        && diffBm3EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm3EikSet_Intersection.getPair().getChanges().get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm3EikSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3EikSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffBm3PivSet_Intersection != null) {

                        if (diffBm3PivSet_Intersection.getPair() != null
                                && diffBm3PivSet_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm3PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                    && diffBm3PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV")
                                        .addAll(diffBm3PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm3PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV") != null)
                                        && diffBm3PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffBm3PivSet_Intersection.getPair().getChanges().get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm3PivSet_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3PivSet_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffDepositoryReceipts_Intersection != null) {

                        if (diffDepositoryReceipts_Intersection.getPair() != null
                                && diffDepositoryReceipts_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffDepositoryReceipts_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffDepositoryReceipts_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffDepositoryReceipts_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffDepositoryReceipts_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM3") != null)
                                        && diffDepositoryReceipts_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_BM3").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffDepositoryReceipts_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffDepositoryReceipts_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffDepositoryReceipts_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara43Details_Intersection != null) {

                        if (diffPara43Details_Intersection.getPair() != null
                                && diffPara43Details_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara43Details_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffPara43Details_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffPara43Details_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara43Details_Intersection.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffPara43Details_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffPara43Details_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara43Details_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara43Details_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara16Abs1Nr1u2_Intersection != null) {

                        if (diffPara16Abs1Nr1u2_Intersection.getPair() != null
                                && diffPara16Abs1Nr1u2_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara16Abs1Nr1u2_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr1u2_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffPara16Abs1Nr1u2_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara16Abs1Nr1u2_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM3") != null)
                                        && diffPara16Abs1Nr1u2_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffPara16Abs1Nr1u2_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara16Abs1Nr1u2_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara16Abs1Nr1u2_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAllgemeinMusterIII_Intersection != null) {

                        if (diffAllgemeinMusterIII_Intersection.getPair() != null
                                && diffAllgemeinMusterIII_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffAllgemeinMusterIII_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffAllgemeinMusterIII_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffAllgemeinMusterIII_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffAllgemeinMusterIII_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM3") != null)
                                        && diffAllgemeinMusterIII_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_BM3").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffAllgemeinMusterIII_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffAllgemeinMusterIII_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAllgemeinMusterIII_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffAuslSpezInvest_Intersection != null) {

                        if (diffAuslSpezInvest_Intersection.getPair() != null
                                && diffAuslSpezInvest_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffAuslSpezInvest_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffAuslSpezInvest_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffAuslSpezInvest_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffAuslSpezInvest_Intersection.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffAuslSpezInvest_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffAuslSpezInvest_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffAuslSpezInvest_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffAuslSpezInvest_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffInvestmentanteile_Intersection != null) {

                        if (diffInvestmentanteile_Intersection.getPair() != null
                                && diffInvestmentanteile_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffInvestmentanteile_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffInvestmentanteile_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffInvestmentanteile_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffInvestmentanteile_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_BM3") != null)
                                        && diffInvestmentanteile_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffInvestmentanteile_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffInvestmentanteile_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffInvestmentanteile_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    if (diffPara16Abs1Nr3_Intersection != null) {

                        if (diffPara16Abs1Nr3_Intersection.getPair() != null
                                && diffPara16Abs1Nr3_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_BM3")
                                    && (diffPara16Abs1Nr3_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_BM3") != null)
                                    && diffPara16Abs1Nr3_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_BM3").addAll(
                                        diffPara16Abs1Nr3_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                            } else {
                                if ((diffPara16Abs1Nr3_Intersection.getPair().getChanges().get("TR_TABLE_BM3") != null)
                                        && diffPara16Abs1Nr3_Intersection.getPair().getChanges().get("TR_TABLE_BM3")
                                                .size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(
                                            diffPara16Abs1Nr3_Intersection.getPair().getChanges().get("TR_TABLE_BM3"));
                                    pair.getChanges().put("TR_TABLE_BM3", changesList);
                                }
                            }

                            if (diffPara16Abs1Nr3_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffPara16Abs1Nr3_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm3AamSet_Intersection.isChanged()
                            || diffBm3AkbSet_Intersection.isChanged() || diffBm3AkeSet_Intersection.isChanged()
                            || diffBm3EikSet_Intersection.isChanged() || diffBm3PivSet_Intersection.isChanged()
                            || diffDepositoryReceipts_Intersection.isChanged()
                            || diffPara43Details_Intersection.isChanged()
                            || diffPara16Abs1Nr1u2_Intersection.isChanged()
                            || diffAllgemeinMusterIII_Intersection.isChanged()
                            || diffAuslSpezInvest_Intersection.isChanged()
                            || diffInvestmentanteile_Intersection.isChanged()
                            || diffPara16Abs1Nr3_Intersection.isChanged();
                }
            } else {
                Bm3PKAdded = new HashSet<>(Bm3PKPrevious);
                Bm3PKAdded.addAll(Bm3PKAfter);
                Bm3PKRemoved = new HashSet();
            }
        }

        if (Bm3PKAdded.size() > 0) {
            summaries.add("Added a new Bm3 record");
        }

        if (Bm3PKRemoved.size() > 0) {
            summaries.add("Removed Bm3 record");
        }

        if (changed) {
            summaries.add("Changed Bm3");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Bm1 Sets
    private BsbPairWithChangedFlag getDiffBm1AamSet(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm1AamAltAnteileBestandschutz_Intersection,
                diffBm1AamAltAnteileBestandschutz_Addition, diffBm1AamAltAnteileBestandschutz_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableAamPK> Bm1AamPKRemoved, Bm1AamPKAdded, Bm1AamPKIntersection;

        Bm1AamPKRemoved = new HashSet<>();
        Bm1AamPKAdded = new HashSet<>();

        Set<TrTableAamPK> Bm1AamPKPrevious = bm1_before != null
                ? bm1_before.getTrTableBm1AamSet().stream().map(TrTableAam::getTrTableAamPK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableAamPK> Bm1AamPKAfter = bm1_after != null
                ? bm1_after.getTrTableBm1AamSet().stream().map(TrTableAam::getTrTableAamPK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (Bm1AamPKPrevious.size() == 0 && Bm1AamPKAfter.size() > 0) {
            for (TrTableAamPK Bm1AamPK : Bm1AamPKAfter) {

                TrTableBm1Aam after = bm1_after.getTrTableBm1AamSet().stream()
                        .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().isPresent()
                                ? bm1_after.getTrTableBm1AamSet().stream()
                                        .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().get()
                                : null;

                diffBm1AamAltAnteileBestandschutz_Addition = getDiffBm1AamAltAnteileBestandschutz(null, after);

                if (diffBm1AamAltAnteileBestandschutz_Addition != null) {

                    if (diffBm1AamAltAnteileBestandschutz_Addition.getPair() != null
                            && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                && (diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges().get("TR_TABLE_AAM")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm1AamAltAnteileBestandschutz_Addition
                                    .getPair().getChanges().get("TR_TABLE_AAM"));
                        } else {
                            if ((diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AAM") != null)
                                    && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM"));
                                pair.getChanges().put("TR_TABLE_AAM", changesList);
                            }
                        }

                        if (diffBm1AamAltAnteileBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AamAltAnteileBestandschutz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm1Aam record");
        } else if (Bm1AamPKPrevious.size() > 0 && Bm1AamPKAfter.size() == 0) {
            for (TrTableAamPK Bm1AamPK : Bm1AamPKPrevious) {

                TrTableBm1Aam before = bm1_before.getTrTableBm1AamSet().stream()
                        .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().isPresent()
                                ? bm1_before.getTrTableBm1AamSet().stream()
                                        .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().get()
                                : null;

                diffBm1AamAltAnteileBestandschutz_Addition = getDiffBm1AamAltAnteileBestandschutz(before, null);

                if (diffBm1AamAltAnteileBestandschutz_Addition != null) {

                    if (diffBm1AamAltAnteileBestandschutz_Addition.getPair() != null
                            && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                && (diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges().get("TR_TABLE_AAM")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm1AamAltAnteileBestandschutz_Addition
                                    .getPair().getChanges().get("TR_TABLE_AAM"));
                        } else {
                            if ((diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AAM") != null)
                                    && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM"));
                                pair.getChanges().put("TR_TABLE_AAM", changesList);
                            }
                        }

                        if (diffBm1AamAltAnteileBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AamAltAnteileBestandschutz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm1Aam records");
        } else if (Bm1AamPKPrevious.size() > 0 && Bm1AamPKAfter.size() > 0) {

            Bm1AamPKIntersection = new HashSet<>(Bm1AamPKPrevious);
            Bm1AamPKIntersection.retainAll(Bm1AamPKAfter);

            if (Bm1AamPKIntersection.size() > 0) {
                Bm1AamPKRemoved = new HashSet<>(Bm1AamPKPrevious);

                Bm1AamPKRemoved.removeAll(Bm1AamPKIntersection);
                Bm1AamPKAdded = new HashSet<>(Bm1AamPKAfter);

                Bm1AamPKAdded.removeAll(Bm1AamPKIntersection);

                for (TrTableAamPK Bm1AamPK : Bm1AamPKAdded) {

                    TrTableBm1Aam before = bm1_before.getTrTableBm1AamSet().stream()
                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AamSet().stream()
                                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Aam after = bm1_after.getTrTableBm1AamSet().stream()
                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AamSet().stream()
                                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AamAltAnteileBestandschutz_Addition = getDiffBm1AamAltAnteileBestandschutz(before, after);

                    if (diffBm1AamAltAnteileBestandschutz_Addition != null) {

                        if (diffBm1AamAltAnteileBestandschutz_Addition.getPair() != null
                                && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM") != null)
                                    && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm1AamAltAnteileBestandschutz_Addition
                                        .getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                        && diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                                .get("TR_TABLE_AAM").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm1AamAltAnteileBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AamAltAnteileBestandschutz_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAamPK Bm1AamPK : Bm1AamPKRemoved) {

                    TrTableBm1Aam before = bm1_before.getTrTableBm1AamSet().stream()
                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AamSet().stream()
                                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Aam after = bm1_after.getTrTableBm1AamSet().stream()
                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AamSet().stream()
                                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AamAltAnteileBestandschutz_Removal = getDiffBm1AamAltAnteileBestandschutz(before, after);

                    if (diffBm1AamAltAnteileBestandschutz_Removal != null) {

                        if (diffBm1AamAltAnteileBestandschutz_Removal.getPair() != null
                                && diffBm1AamAltAnteileBestandschutz_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm1AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AAM") != null)
                                    && diffBm1AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm1AamAltAnteileBestandschutz_Removal
                                        .getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm1AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                        && diffBm1AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                                .get("TR_TABLE_AAM").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm1AamAltAnteileBestandschutz_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AamAltAnteileBestandschutz_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAamPK Bm1AamPK : Bm1AamPKIntersection) {

                    TrTableBm1Aam before = bm1_before.getTrTableBm1AamSet().stream()
                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AamSet().stream()
                                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Aam after = bm1_after.getTrTableBm1AamSet().stream()
                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AamSet().stream()
                                            .filter(bm1Aam -> bm1Aam.getTrTableAamPK().equals(Bm1AamPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AamAltAnteileBestandschutz_Intersection = getDiffBm1AamAltAnteileBestandschutz(before,
                            after);

                    if (diffBm1AamAltAnteileBestandschutz_Intersection != null) {

                        if (diffBm1AamAltAnteileBestandschutz_Intersection.getPair() != null
                                && diffBm1AamAltAnteileBestandschutz_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm1AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AAM") != null)
                                    && diffBm1AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM")
                                        .addAll(diffBm1AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm1AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                        && diffBm1AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AAM").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AamAltAnteileBestandschutz_Intersection.getPair()
                                            .getChanges().get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm1AamAltAnteileBestandschutz_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(
                                        diffBm1AamAltAnteileBestandschutz_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm1AamAltAnteileBestandschutz_Intersection.isChanged();
                }
            } else {
                Bm1AamPKAdded = new HashSet<>(Bm1AamPKPrevious);
                Bm1AamPKAdded.addAll(Bm1AamPKAfter);
                Bm1AamPKRemoved = new HashSet();
            }
        }

        if (Bm1AamPKAdded.size() > 0) {
            summaries.add("Added a new Bm1Aam record");
        }

        if (Bm1AamPKRemoved.size() > 0) {
            summaries.add("Removed Bm1Aam record");
        }

        if (changed) {
            summaries.add("Changed Bm1Aam");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm1AkbSet(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm1AkbAltAntKeinBestandschutz_Intersection,
                diffBm1AkbAltAntKeinBestandschutz_Addition, diffBm1AkbAltAntKeinBestandschutz_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableAkbPK> Bm1AkbPKRemoved, Bm1AkbPKAdded, Bm1AkbPKIntersection;

        Bm1AkbPKRemoved = new HashSet<>();
        Bm1AkbPKAdded = new HashSet<>();

        Set<TrTableAkbPK> Bm1AkbPKPrevious = bm1_before != null
                ? bm1_before.getTrTableBm1AkbSet().stream().map(TrTableAkb::getTrTableAkbPK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableAkbPK> Bm1AkbPKAfter = bm1_after != null
                ? bm1_after.getTrTableBm1AkbSet().stream().map(TrTableAkb::getTrTableAkbPK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (Bm1AkbPKPrevious.size() == 0 && Bm1AkbPKAfter.size() > 0) {
            for (TrTableAkbPK Bm1AkbPK : Bm1AkbPKAfter) {

                TrTableBm1Akb after = bm1_after.getTrTableBm1AkbSet().stream()
                        .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().isPresent()
                                ? bm1_after.getTrTableBm1AkbSet().stream()
                                        .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().get()
                                : null;

                diffBm1AkbAltAntKeinBestandschutz_Addition = getDiffBm1AkbAltAntKeinBestandschutz(null, after);

                if (diffBm1AkbAltAntKeinBestandschutz_Addition != null) {

                    if (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair() != null
                            && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                && (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().get("TR_TABLE_AKB")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm1AkbAltAntKeinBestandschutz_Addition
                                    .getPair().getChanges().get("TR_TABLE_AKB"));
                        } else {
                            if ((diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB"));
                                pair.getChanges().put("TR_TABLE_AKB", changesList);
                            }
                        }

                        if (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm1Akb record");
        } else if (Bm1AkbPKPrevious.size() > 0 && Bm1AkbPKAfter.size() == 0) {
            for (TrTableAkbPK Bm1AkbPK : Bm1AkbPKPrevious) {

                TrTableBm1Akb before = bm1_before.getTrTableBm1AkbSet().stream()
                        .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().isPresent()
                                ? bm1_before.getTrTableBm1AkbSet().stream()
                                        .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().get()
                                : null;

                diffBm1AkbAltAntKeinBestandschutz_Addition = getDiffBm1AkbAltAntKeinBestandschutz(before, null);

                if (diffBm1AkbAltAntKeinBestandschutz_Addition != null) {

                    if (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair() != null
                            && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                && (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().get("TR_TABLE_AKB")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm1AkbAltAntKeinBestandschutz_Addition
                                    .getPair().getChanges().get("TR_TABLE_AKB"));
                        } else {
                            if ((diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB"));
                                pair.getChanges().put("TR_TABLE_AKB", changesList);
                            }
                        }

                        if (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm1Akb records");
        } else if (Bm1AkbPKPrevious.size() > 0 && Bm1AkbPKAfter.size() > 0) {

            Bm1AkbPKIntersection = new HashSet<>(Bm1AkbPKPrevious);
            Bm1AkbPKIntersection.retainAll(Bm1AkbPKAfter);

            if (Bm1AkbPKIntersection.size() > 0) {
                Bm1AkbPKRemoved = new HashSet<>(Bm1AkbPKPrevious);

                Bm1AkbPKRemoved.removeAll(Bm1AkbPKIntersection);
                Bm1AkbPKAdded = new HashSet<>(Bm1AkbPKAfter);

                Bm1AkbPKAdded.removeAll(Bm1AkbPKIntersection);

                for (TrTableAkbPK Bm1AkbPK : Bm1AkbPKAdded) {

                    TrTableBm1Akb before = bm1_before.getTrTableBm1AkbSet().stream()
                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AkbSet().stream()
                                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Akb after = bm1_after.getTrTableBm1AkbSet().stream()
                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AkbSet().stream()
                                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AkbAltAntKeinBestandschutz_Addition = getDiffBm1AkbAltAntKeinBestandschutz(before, after);

                    if (diffBm1AkbAltAntKeinBestandschutz_Addition != null) {

                        if (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair() != null
                                && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm1AkbAltAntKeinBestandschutz_Addition
                                        .getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                        && diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                                .get("TR_TABLE_AKB").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAkbPK Bm1AkbPK : Bm1AkbPKRemoved) {

                    TrTableBm1Akb before = bm1_before.getTrTableBm1AkbSet().stream()
                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AkbSet().stream()
                                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Akb after = bm1_after.getTrTableBm1AkbSet().stream()
                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AkbSet().stream()
                                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AkbAltAntKeinBestandschutz_Removal = getDiffBm1AkbAltAntKeinBestandschutz(before, after);

                    if (diffBm1AkbAltAntKeinBestandschutz_Removal != null) {

                        if (diffBm1AkbAltAntKeinBestandschutz_Removal.getPair() != null
                                && diffBm1AkbAltAntKeinBestandschutz_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm1AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm1AkbAltAntKeinBestandschutz_Removal
                                        .getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm1AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                        && diffBm1AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                                .get("TR_TABLE_AKB").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm1AkbAltAntKeinBestandschutz_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1AkbAltAntKeinBestandschutz_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAkbPK Bm1AkbPK : Bm1AkbPKIntersection) {

                    TrTableBm1Akb before = bm1_before.getTrTableBm1AkbSet().stream()
                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AkbSet().stream()
                                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Akb after = bm1_after.getTrTableBm1AkbSet().stream()
                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AkbSet().stream()
                                            .filter(bm1Akb -> bm1Akb.getTrTableAkbPK().equals(Bm1AkbPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AkbAltAntKeinBestandschutz_Intersection = getDiffBm1AkbAltAntKeinBestandschutz(before,
                            after);

                    if (diffBm1AkbAltAntKeinBestandschutz_Intersection != null) {

                        if (diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair() != null
                                && diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AKB") != null)
                                    && diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB")
                                        .addAll(diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                        && diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AKB").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair()
                                            .getChanges().get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(
                                        diffBm1AkbAltAntKeinBestandschutz_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm1AkbAltAntKeinBestandschutz_Intersection.isChanged();
                }
            } else {
                Bm1AkbPKAdded = new HashSet<>(Bm1AkbPKPrevious);
                Bm1AkbPKAdded.addAll(Bm1AkbPKAfter);
                Bm1AkbPKRemoved = new HashSet();
            }
        }

        if (Bm1AkbPKAdded.size() > 0) {
            summaries.add("Added a new Bm1Akb record");
        }

        if (Bm1AkbPKRemoved.size() > 0) {
            summaries.add("Removed Bm1Akb record");
        }

        if (changed) {
            summaries.add("Changed Bm1Akb");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm1AkeSet(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection,
                diffBm1AkeAltAntKeinBestandschutzErsatz_Addition, diffBm1AkeAltAntKeinBestandschutzErsatz_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableAkePK> Bm1AkePKRemoved, Bm1AkePKAdded, Bm1AkePKIntersection;

        Bm1AkePKRemoved = new HashSet<>();
        Bm1AkePKAdded = new HashSet<>();

        Set<TrTableAkePK> Bm1AkePKPrevious = bm1_before != null
                ? bm1_before.getTrTableBm1AkeSet().stream().map(TrTableAke::getTrTableAkePK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableAkePK> Bm1AkePKAfter = bm1_after != null
                ? bm1_after.getTrTableBm1AkeSet().stream().map(TrTableAke::getTrTableAkePK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (Bm1AkePKPrevious.size() == 0 && Bm1AkePKAfter.size() > 0) {
            for (TrTableAkePK Bm1AkePK : Bm1AkePKAfter) {

                TrTableBm1Ake after = bm1_after.getTrTableBm1AkeSet().stream()
                        .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().isPresent()
                                ? bm1_after.getTrTableBm1AkeSet().stream()
                                        .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().get()
                                : null;

                diffBm1AkeAltAntKeinBestandschutzErsatz_Addition = getDiffBm1AkeAltAntKeinBestandschutzErsatz(null,
                        after);

                if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition != null) {

                    if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair() != null
                            && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                && (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKE")
                                    .addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE"));
                        } else {
                            if ((diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair()
                                        .getChanges().get("TR_TABLE_AKE"));
                                pair.getChanges().put("TR_TABLE_AKE", changesList);
                            }
                        }

                        if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm1Ake record");
        } else if (Bm1AkePKPrevious.size() > 0 && Bm1AkePKAfter.size() == 0) {
            for (TrTableAkePK Bm1AkePK : Bm1AkePKPrevious) {

                TrTableBm1Ake before = bm1_before.getTrTableBm1AkeSet().stream()
                        .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().isPresent()
                                ? bm1_before.getTrTableBm1AkeSet().stream()
                                        .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().get()
                                : null;

                diffBm1AkeAltAntKeinBestandschutzErsatz_Addition = getDiffBm1AkeAltAntKeinBestandschutzErsatz(before,
                        null);

                if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition != null) {

                    if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair() != null
                            && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                && (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKE")
                                    .addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE"));
                        } else {
                            if ((diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair()
                                        .getChanges().get("TR_TABLE_AKE"));
                                pair.getChanges().put("TR_TABLE_AKE", changesList);
                            }
                        }

                        if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm1Ake records");
        } else if (Bm1AkePKPrevious.size() > 0 && Bm1AkePKAfter.size() > 0) {

            Bm1AkePKIntersection = new HashSet<>(Bm1AkePKPrevious);
            Bm1AkePKIntersection.retainAll(Bm1AkePKAfter);

            if (Bm1AkePKIntersection.size() > 0) {
                Bm1AkePKRemoved = new HashSet<>(Bm1AkePKPrevious);

                Bm1AkePKRemoved.removeAll(Bm1AkePKIntersection);
                Bm1AkePKAdded = new HashSet<>(Bm1AkePKAfter);

                Bm1AkePKAdded.removeAll(Bm1AkePKIntersection);

                for (TrTableAkePK Bm1AkePK : Bm1AkePKAdded) {

                    TrTableBm1Ake before = bm1_before.getTrTableBm1AkeSet().stream()
                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AkeSet().stream()
                                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Ake after = bm1_after.getTrTableBm1AkeSet().stream()
                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AkeSet().stream()
                                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AkeAltAntKeinBestandschutzErsatz_Addition = getDiffBm1AkeAltAntKeinBestandschutzErsatz(
                            before, after);

                    if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition != null) {

                        if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair() != null
                                && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                                .get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                        && diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                                .get("TR_TABLE_AKE").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair()
                                            .getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(
                                        diffBm1AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAkePK Bm1AkePK : Bm1AkePKRemoved) {

                    TrTableBm1Ake before = bm1_before.getTrTableBm1AkeSet().stream()
                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AkeSet().stream()
                                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Ake after = bm1_after.getTrTableBm1AkeSet().stream()
                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AkeSet().stream()
                                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AkeAltAntKeinBestandschutzErsatz_Removal = getDiffBm1AkeAltAntKeinBestandschutzErsatz(before,
                            after);

                    if (diffBm1AkeAltAntKeinBestandschutzErsatz_Removal != null) {

                        if (diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair() != null
                                && diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                                .get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                        && diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                                .get("TR_TABLE_AKE").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair()
                                            .getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(
                                        diffBm1AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAkePK Bm1AkePK : Bm1AkePKIntersection) {

                    TrTableBm1Ake before = bm1_before.getTrTableBm1AkeSet().stream()
                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1AkeSet().stream()
                                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Ake after = bm1_after.getTrTableBm1AkeSet().stream()
                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1AkeSet().stream()
                                            .filter(bm1Ake -> bm1Ake.getTrTableAkePK().equals(Bm1AkePK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection = getDiffBm1AkeAltAntKeinBestandschutzErsatz(
                            before, after);

                    if (diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection != null) {

                        if (diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair() != null
                                && diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                        .size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AKE") != null)
                                    && diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair()
                                                .getChanges().get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                        && diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AKE").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair()
                                            .getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getSummaries()
                                    .size() > 0) {
                                summaries.addAll(
                                        diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm1AkeAltAntKeinBestandschutzErsatz_Intersection.isChanged();
                }
            } else {
                Bm1AkePKAdded = new HashSet<>(Bm1AkePKPrevious);
                Bm1AkePKAdded.addAll(Bm1AkePKAfter);
                Bm1AkePKRemoved = new HashSet();
            }
        }

        if (Bm1AkePKAdded.size() > 0) {
            summaries.add("Added a new Bm1Ake record");
        }

        if (Bm1AkePKRemoved.size() > 0) {
            summaries.add("Removed Bm1Ake record");
        }

        if (changed) {
            summaries.add("Changed Bm1Ake");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm1EikSet(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm1EikErstattungAbstandnahme_Intersection, diffBm1EikErstattungAbstandnahme_Addition,
                diffBm1EikErstattungAbstandnahme_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableEikPK> Bm1EikPKRemoved, Bm1EikPKAdded, Bm1EikPKIntersection;

        Bm1EikPKRemoved = new HashSet<>();
        Bm1EikPKAdded = new HashSet<>();

        Set<TrTableEikPK> Bm1EikPKPrevious = bm1_before != null
                ? bm1_before.getTrTableBm1EikSet().stream().map(TrTableEik::getTrTableEikPK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableEikPK> Bm1EikPKAfter = bm1_after != null
                ? bm1_after.getTrTableBm1EikSet().stream().map(TrTableEik::getTrTableEikPK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (Bm1EikPKPrevious.size() == 0 && Bm1EikPKAfter.size() > 0) {
            for (TrTableEikPK Bm1EikPK : Bm1EikPKAfter) {

                TrTableBm1Eik after = bm1_after.getTrTableBm1EikSet().stream()
                        .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().isPresent()
                                ? bm1_after.getTrTableBm1EikSet().stream()
                                        .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().get()
                                : null;

                diffBm1EikErstattungAbstandnahme_Addition = getDiffBm1EikErstattungAbstandnahme(null, after);

                if (diffBm1EikErstattungAbstandnahme_Addition != null) {

                    if (diffBm1EikErstattungAbstandnahme_Addition.getPair() != null
                            && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                && (diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges().get("TR_TABLE_EIK")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm1EikErstattungAbstandnahme_Addition
                                    .getPair().getChanges().get("TR_TABLE_EIK"));
                        } else {
                            if ((diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                    .get("TR_TABLE_EIK") != null)
                                    && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK"));
                                pair.getChanges().put("TR_TABLE_EIK", changesList);
                            }
                        }

                        if (diffBm1EikErstattungAbstandnahme_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1EikErstattungAbstandnahme_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm1Eik record");
        } else if (Bm1EikPKPrevious.size() > 0 && Bm1EikPKAfter.size() == 0) {
            for (TrTableEikPK Bm1EikPK : Bm1EikPKPrevious) {

                TrTableBm1Eik before = bm1_before.getTrTableBm1EikSet().stream()
                        .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().isPresent()
                                ? bm1_before.getTrTableBm1EikSet().stream()
                                        .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().get()
                                : null;

                diffBm1EikErstattungAbstandnahme_Addition = getDiffBm1EikErstattungAbstandnahme(before, null);

                if (diffBm1EikErstattungAbstandnahme_Addition != null) {

                    if (diffBm1EikErstattungAbstandnahme_Addition.getPair() != null
                            && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                && (diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges().get("TR_TABLE_EIK")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm1EikErstattungAbstandnahme_Addition
                                    .getPair().getChanges().get("TR_TABLE_EIK"));
                        } else {
                            if ((diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                    .get("TR_TABLE_EIK") != null)
                                    && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK"));
                                pair.getChanges().put("TR_TABLE_EIK", changesList);
                            }
                        }

                        if (diffBm1EikErstattungAbstandnahme_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1EikErstattungAbstandnahme_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm1Eik records");
        } else if (Bm1EikPKPrevious.size() > 0 && Bm1EikPKAfter.size() > 0) {

            Bm1EikPKIntersection = new HashSet<>(Bm1EikPKPrevious);
            Bm1EikPKIntersection.retainAll(Bm1EikPKAfter);

            if (Bm1EikPKIntersection.size() > 0) {
                Bm1EikPKRemoved = new HashSet<>(Bm1EikPKPrevious);

                Bm1EikPKRemoved.removeAll(Bm1EikPKIntersection);
                Bm1EikPKAdded = new HashSet<>(Bm1EikPKAfter);

                Bm1EikPKAdded.removeAll(Bm1EikPKIntersection);

                for (TrTableEikPK Bm1EikPK : Bm1EikPKAdded) {

                    TrTableBm1Eik before = bm1_before.getTrTableBm1EikSet().stream()
                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1EikSet().stream()
                                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Eik after = bm1_after.getTrTableBm1EikSet().stream()
                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1EikSet().stream()
                                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1EikErstattungAbstandnahme_Addition = getDiffBm1EikErstattungAbstandnahme(before, after);

                    if (diffBm1EikErstattungAbstandnahme_Addition != null) {

                        if (diffBm1EikErstattungAbstandnahme_Addition.getPair() != null
                                && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK") != null)
                                    && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm1EikErstattungAbstandnahme_Addition
                                        .getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                        && diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                                .get("TR_TABLE_EIK").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm1EikErstattungAbstandnahme_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1EikErstattungAbstandnahme_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableEikPK Bm1EikPK : Bm1EikPKRemoved) {

                    TrTableBm1Eik before = bm1_before.getTrTableBm1EikSet().stream()
                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1EikSet().stream()
                                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Eik after = bm1_after.getTrTableBm1EikSet().stream()
                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1EikSet().stream()
                                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1EikErstattungAbstandnahme_Removal = getDiffBm1EikErstattungAbstandnahme(before, after);

                    if (diffBm1EikErstattungAbstandnahme_Removal != null) {

                        if (diffBm1EikErstattungAbstandnahme_Removal.getPair() != null
                                && diffBm1EikErstattungAbstandnahme_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm1EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                            .get("TR_TABLE_EIK") != null)
                                    && diffBm1EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm1EikErstattungAbstandnahme_Removal
                                        .getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm1EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                        && diffBm1EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                                .get("TR_TABLE_EIK").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                            .get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm1EikErstattungAbstandnahme_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1EikErstattungAbstandnahme_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableEikPK Bm1EikPK : Bm1EikPKIntersection) {

                    TrTableBm1Eik before = bm1_before.getTrTableBm1EikSet().stream()
                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1EikSet().stream()
                                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Eik after = bm1_after.getTrTableBm1EikSet().stream()
                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1EikSet().stream()
                                            .filter(bm1Eik -> bm1Eik.getTrTableEikPK().equals(Bm1EikPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1EikErstattungAbstandnahme_Intersection = getDiffBm1EikErstattungAbstandnahme(before, after);

                    if (diffBm1EikErstattungAbstandnahme_Intersection != null) {

                        if (diffBm1EikErstattungAbstandnahme_Intersection.getPair() != null
                                && diffBm1EikErstattungAbstandnahme_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm1EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_EIK") != null)
                                    && diffBm1EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK")
                                        .addAll(diffBm1EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm1EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                        && diffBm1EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_EIK").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1EikErstattungAbstandnahme_Intersection.getPair()
                                            .getChanges().get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm1EikErstattungAbstandnahme_Intersection.getPair().getSummaries().size() > 0) {
                                summaries
                                        .addAll(diffBm1EikErstattungAbstandnahme_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm1EikErstattungAbstandnahme_Intersection.isChanged();
                }
            } else {
                Bm1EikPKAdded = new HashSet<>(Bm1EikPKPrevious);
                Bm1EikPKAdded.addAll(Bm1EikPKAfter);
                Bm1EikPKRemoved = new HashSet();
            }
        }

        if (Bm1EikPKAdded.size() > 0) {
            summaries.add("Added a new Bm1Eik record");
        }

        if (Bm1EikPKRemoved.size() > 0) {
            summaries.add("Removed Bm1Eik record");
        }

        if (changed) {
            summaries.add("Changed Bm1Eik");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm1PivSet(TrTableBm1 bm1_before, TrTableBm1 bm1_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm1PivPersInvestVermoegen_Intersection, diffBm1PivPersInvestVermoegen_Addition,
                diffBm1PivPersInvestVermoegen_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTablePivPK> Bm1PivPKRemoved, Bm1PivPKAdded, Bm1PivPKIntersection;

        Bm1PivPKRemoved = new HashSet<>();
        Bm1PivPKAdded = new HashSet<>();

        Set<TrTablePivPK> Bm1PivPKPrevious = bm1_before != null
                ? bm1_before.getTrTableBm1PivSet().stream().map(TrTablePiv::getTrTablePivPK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTablePivPK> Bm1PivPKAfter = bm1_after != null
                ? bm1_after.getTrTableBm1PivSet().stream().map(TrTablePiv::getTrTablePivPK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm1_before == null && bm1_after == null) {
            return null;
        } else if (Bm1PivPKPrevious.size() == 0 && Bm1PivPKAfter.size() > 0) {
            for (TrTablePivPK Bm1PivPK : Bm1PivPKAfter) {

                TrTableBm1Piv after = bm1_after.getTrTableBm1PivSet().stream()
                        .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().isPresent()
                                ? bm1_after.getTrTableBm1PivSet().stream()
                                        .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().get()
                                : null;

                diffBm1PivPersInvestVermoegen_Addition = getDiffBm1PivPersInvestVermoegen(null, after);

                if (diffBm1PivPersInvestVermoegen_Addition != null) {

                    if (diffBm1PivPersInvestVermoegen_Addition.getPair() != null
                            && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                && (diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_PIV").addAll(
                                    diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                        } else {
                            if ((diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                    .get("TR_TABLE_PIV") != null)
                                    && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV"));
                                pair.getChanges().put("TR_TABLE_PIV", changesList);
                            }
                        }

                        if (diffBm1PivPersInvestVermoegen_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1PivPersInvestVermoegen_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm1Piv record");
        } else if (Bm1PivPKPrevious.size() > 0 && Bm1PivPKAfter.size() == 0) {
            for (TrTablePivPK Bm1PivPK : Bm1PivPKPrevious) {

                TrTableBm1Piv before = bm1_before.getTrTableBm1PivSet().stream()
                        .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().isPresent()
                                ? bm1_before.getTrTableBm1PivSet().stream()
                                        .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().get()
                                : null;

                diffBm1PivPersInvestVermoegen_Addition = getDiffBm1PivPersInvestVermoegen(before, null);

                if (diffBm1PivPersInvestVermoegen_Addition != null) {

                    if (diffBm1PivPersInvestVermoegen_Addition.getPair() != null
                            && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                && (diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_PIV").addAll(
                                    diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                        } else {
                            if ((diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                    .get("TR_TABLE_PIV") != null)
                                    && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV"));
                                pair.getChanges().put("TR_TABLE_PIV", changesList);
                            }
                        }

                        if (diffBm1PivPersInvestVermoegen_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm1PivPersInvestVermoegen_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Removed all Bm1Piv records");
        } else if (Bm1PivPKPrevious.size() > 0 && Bm1PivPKAfter.size() > 0) {

            Bm1PivPKIntersection = new HashSet<>(Bm1PivPKPrevious);
            Bm1PivPKIntersection.retainAll(Bm1PivPKAfter);

            if (Bm1PivPKIntersection.size() > 0) {
                Bm1PivPKRemoved = new HashSet<>(Bm1PivPKPrevious);

                Bm1PivPKRemoved.removeAll(Bm1PivPKIntersection);
                Bm1PivPKAdded = new HashSet<>(Bm1PivPKAfter);

                Bm1PivPKAdded.removeAll(Bm1PivPKIntersection);

                for (TrTablePivPK Bm1PivPK : Bm1PivPKAdded) {

                    TrTableBm1Piv before = bm1_before.getTrTableBm1PivSet().stream()
                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1PivSet().stream()
                                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Piv after = bm1_after.getTrTableBm1PivSet().stream()
                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1PivSet().stream()
                                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1PivPersInvestVermoegen_Addition = getDiffBm1PivPersInvestVermoegen(before, after);

                    if (diffBm1PivPersInvestVermoegen_Addition != null) {

                        if (diffBm1PivPersInvestVermoegen_Addition.getPair() != null
                                && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                            .get("TR_TABLE_PIV") != null)
                                    && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV").addAll(diffBm1PivPersInvestVermoegen_Addition
                                        .getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                        && diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                                .get("TR_TABLE_PIV").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1PivPersInvestVermoegen_Addition.getPair().getChanges()
                                            .get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm1PivPersInvestVermoegen_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1PivPersInvestVermoegen_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTablePivPK Bm1PivPK : Bm1PivPKRemoved) {

                    TrTableBm1Piv before = bm1_before.getTrTableBm1PivSet().stream()
                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1PivSet().stream()
                                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Piv after = bm1_after.getTrTableBm1PivSet().stream()
                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1PivSet().stream()
                                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1PivPersInvestVermoegen_Removal = getDiffBm1PivPersInvestVermoegen(before, after);

                    if (diffBm1PivPersInvestVermoegen_Removal != null) {

                        if (diffBm1PivPersInvestVermoegen_Removal.getPair() != null
                                && diffBm1PivPersInvestVermoegen_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm1PivPersInvestVermoegen_Removal.getPair().getChanges()
                                            .get("TR_TABLE_PIV") != null)
                                    && diffBm1PivPersInvestVermoegen_Removal.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV").addAll(diffBm1PivPersInvestVermoegen_Removal
                                        .getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm1PivPersInvestVermoegen_Removal.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                        && diffBm1PivPersInvestVermoegen_Removal.getPair().getChanges()
                                                .get("TR_TABLE_PIV").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1PivPersInvestVermoegen_Removal.getPair().getChanges()
                                            .get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm1PivPersInvestVermoegen_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1PivPersInvestVermoegen_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTablePivPK Bm1PivPK : Bm1PivPKIntersection) {

                    TrTableBm1Piv before = bm1_before.getTrTableBm1PivSet().stream()
                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().isPresent()
                                    ? bm1_before.getTrTableBm1PivSet().stream()
                                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm1Piv after = bm1_after.getTrTableBm1PivSet().stream()
                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst().isPresent()
                                    ? bm1_after.getTrTableBm1PivSet().stream()
                                            .filter(bm1Piv -> bm1Piv.getTrTablePivPK().equals(Bm1PivPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm1PivPersInvestVermoegen_Intersection = getDiffBm1PivPersInvestVermoegen(before, after);

                    if (diffBm1PivPersInvestVermoegen_Intersection != null) {

                        if (diffBm1PivPersInvestVermoegen_Intersection.getPair() != null
                                && diffBm1PivPersInvestVermoegen_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm1PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_PIV") != null)
                                    && diffBm1PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_PIV").size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV").addAll(diffBm1PivPersInvestVermoegen_Intersection
                                        .getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm1PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                        && diffBm1PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_PIV").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm1PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm1PivPersInvestVermoegen_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm1PivPersInvestVermoegen_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm1PivPersInvestVermoegen_Intersection.isChanged();
                }
            } else {
                Bm1PivPKAdded = new HashSet<>(Bm1PivPKPrevious);
                Bm1PivPKAdded.addAll(Bm1PivPKAfter);
                Bm1PivPKRemoved = new HashSet();
            }
        }

        if (Bm1PivPKAdded.size() > 0) {
            summaries.add("Added a new Bm1Piv record");
        }

        if (Bm1PivPKRemoved.size() > 0) {
            summaries.add("Removed Bm1Piv record");
        }

        if (changed) {
            summaries.add("Changed Bm1Piv");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    // Bm3 Sets
    private BsbPairWithChangedFlag getDiffBm3AamSet(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm3AamAltAnteileBestandschutz_Intersection,
                diffBm3AamAltAnteileBestandschutz_Addition, diffBm3AamAltAnteileBestandschutz_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableAamPK> Bm3AamPKRemoved, Bm3AamPKAdded, Bm3AamPKIntersection;

        Bm3AamPKRemoved = new HashSet<>();
        Bm3AamPKAdded = new HashSet<>();

        Set<TrTableAamPK> Bm3AamPKPrevious = bm3_before != null
                ? bm3_before.getTrTableBm3AamSet().stream().map(TrTableAam::getTrTableAamPK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableAamPK> Bm3AamPKAfter = bm3_after != null
                ? bm3_after.getTrTableBm3AamSet().stream().map(TrTableAam::getTrTableAamPK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (Bm3AamPKPrevious.size() == 0 && Bm3AamPKAfter.size() > 0) {
            for (TrTableAamPK Bm3AamPK : Bm3AamPKAfter) {

                TrTableBm3Aam after = bm3_after.getTrTableBm3AamSet().stream()
                        .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().isPresent()
                                ? bm3_after.getTrTableBm3AamSet().stream()
                                        .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().get()
                                : null;

                diffBm3AamAltAnteileBestandschutz_Addition = getDiffBm3AamAltAnteileBestandschutz(null, after);

                if (diffBm3AamAltAnteileBestandschutz_Addition != null) {

                    if (diffBm3AamAltAnteileBestandschutz_Addition.getPair() != null
                            && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                && (diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges().get("TR_TABLE_AAM")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm3AamAltAnteileBestandschutz_Addition
                                    .getPair().getChanges().get("TR_TABLE_AAM"));
                        } else {
                            if ((diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AAM") != null)
                                    && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM"));
                                pair.getChanges().put("TR_TABLE_AAM", changesList);
                            }
                        }

                        if (diffBm3AamAltAnteileBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AamAltAnteileBestandschutz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm3Aam record");
        } else if (Bm3AamPKPrevious.size() > 0 && Bm3AamPKAfter.size() == 0) {
            for (TrTableAamPK Bm3AamPK : Bm3AamPKPrevious) {

                TrTableBm3Aam before = bm3_before.getTrTableBm3AamSet().stream()
                        .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().isPresent()
                                ? bm3_before.getTrTableBm3AamSet().stream()
                                        .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().get()
                                : null;

                diffBm3AamAltAnteileBestandschutz_Addition = getDiffBm3AamAltAnteileBestandschutz(before, null);

                if (diffBm3AamAltAnteileBestandschutz_Addition != null) {

                    if (diffBm3AamAltAnteileBestandschutz_Addition.getPair() != null
                            && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                && (diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges().get("TR_TABLE_AAM")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm3AamAltAnteileBestandschutz_Addition
                                    .getPair().getChanges().get("TR_TABLE_AAM"));
                        } else {
                            if ((diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AAM") != null)
                                    && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM"));
                                pair.getChanges().put("TR_TABLE_AAM", changesList);
                            }
                        }

                        if (diffBm3AamAltAnteileBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AamAltAnteileBestandschutz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm3Aam records");
        } else if (Bm3AamPKPrevious.size() > 0 && Bm3AamPKAfter.size() > 0) {

            Bm3AamPKIntersection = new HashSet<>(Bm3AamPKPrevious);
            Bm3AamPKIntersection.retainAll(Bm3AamPKAfter);

            if (Bm3AamPKIntersection.size() > 0) {
                Bm3AamPKRemoved = new HashSet<>(Bm3AamPKPrevious);

                Bm3AamPKRemoved.removeAll(Bm3AamPKIntersection);
                Bm3AamPKAdded = new HashSet<>(Bm3AamPKAfter);

                Bm3AamPKAdded.removeAll(Bm3AamPKIntersection);

                for (TrTableAamPK Bm3AamPK : Bm3AamPKAdded) {

                    TrTableBm3Aam before = bm3_before.getTrTableBm3AamSet().stream()
                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AamSet().stream()
                                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Aam after = bm3_after.getTrTableBm3AamSet().stream()
                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AamSet().stream()
                                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AamAltAnteileBestandschutz_Addition = getDiffBm3AamAltAnteileBestandschutz(before, after);

                    if (diffBm3AamAltAnteileBestandschutz_Addition != null) {

                        if (diffBm3AamAltAnteileBestandschutz_Addition.getPair() != null
                                && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM") != null)
                                    && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm3AamAltAnteileBestandschutz_Addition
                                        .getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                        && diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                                .get("TR_TABLE_AAM").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AamAltAnteileBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm3AamAltAnteileBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AamAltAnteileBestandschutz_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAamPK Bm3AamPK : Bm3AamPKRemoved) {

                    TrTableBm3Aam before = bm3_before.getTrTableBm3AamSet().stream()
                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AamSet().stream()
                                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Aam after = bm3_after.getTrTableBm3AamSet().stream()
                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AamSet().stream()
                                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AamAltAnteileBestandschutz_Removal = getDiffBm3AamAltAnteileBestandschutz(before, after);

                    if (diffBm3AamAltAnteileBestandschutz_Removal != null) {

                        if (diffBm3AamAltAnteileBestandschutz_Removal.getPair() != null
                                && diffBm3AamAltAnteileBestandschutz_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm3AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AAM") != null)
                                    && diffBm3AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM").addAll(diffBm3AamAltAnteileBestandschutz_Removal
                                        .getPair().getChanges().get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm3AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                        && diffBm3AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                                .get("TR_TABLE_AAM").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AamAltAnteileBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm3AamAltAnteileBestandschutz_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AamAltAnteileBestandschutz_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAamPK Bm3AamPK : Bm3AamPKIntersection) {

                    TrTableBm3Aam before = bm3_before.getTrTableBm3AamSet().stream()
                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AamSet().stream()
                                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Aam after = bm3_after.getTrTableBm3AamSet().stream()
                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AamSet().stream()
                                            .filter(bm3Aam -> bm3Aam.getTrTableAamPK().equals(Bm3AamPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AamAltAnteileBestandschutz_Intersection = getDiffBm3AamAltAnteileBestandschutz(before,
                            after);

                    if (diffBm3AamAltAnteileBestandschutz_Intersection != null) {

                        if (diffBm3AamAltAnteileBestandschutz_Intersection.getPair() != null
                                && diffBm3AamAltAnteileBestandschutz_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AAM")
                                    && (diffBm3AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AAM") != null)
                                    && diffBm3AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AAM").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AAM")
                                        .addAll(diffBm3AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AAM"));
                            } else {
                                if ((diffBm3AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_AAM") != null)
                                        && diffBm3AamAltAnteileBestandschutz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AAM").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AamAltAnteileBestandschutz_Intersection.getPair()
                                            .getChanges().get("TR_TABLE_AAM"));
                                    pair.getChanges().put("TR_TABLE_AAM", changesList);
                                }
                            }

                            if (diffBm3AamAltAnteileBestandschutz_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(
                                        diffBm3AamAltAnteileBestandschutz_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm3AamAltAnteileBestandschutz_Intersection.isChanged();
                }
            } else {
                Bm3AamPKAdded = new HashSet<>(Bm3AamPKPrevious);
                Bm3AamPKAdded.addAll(Bm3AamPKAfter);
                Bm3AamPKRemoved = new HashSet();
            }
        }

        if (Bm3AamPKAdded.size() > 0) {
            summaries.add("Added a new Bm3Aam record");
        }

        if (Bm3AamPKRemoved.size() > 0) {
            summaries.add("Removed Bm3Aam record");
        }

        if (changed) {
            summaries.add("Changed Bm3Aam");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3AkbSet(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm3AkbAltAntKeinBestandschutz_Intersection,
                diffBm3AkbAltAntKeinBestandschutz_Addition, diffBm3AkbAltAntKeinBestandschutz_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableAkbPK> Bm3AkbPKRemoved, Bm3AkbPKAdded, Bm3AkbPKIntersection;

        Bm3AkbPKRemoved = new HashSet<>();
        Bm3AkbPKAdded = new HashSet<>();

        Set<TrTableAkbPK> Bm3AkbPKPrevious = bm3_before != null
                ? bm3_before.getTrTableBm3AkbSet().stream().map(TrTableAkb::getTrTableAkbPK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableAkbPK> Bm3AkbPKAfter = bm3_after != null
                ? bm3_after.getTrTableBm3AkbSet().stream().map(TrTableAkb::getTrTableAkbPK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (Bm3AkbPKPrevious.size() == 0 && Bm3AkbPKAfter.size() > 0) {
            for (TrTableAkbPK Bm3AkbPK : Bm3AkbPKAfter) {

                TrTableBm3Akb after = bm3_after.getTrTableBm3AkbSet().stream()
                        .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().isPresent()
                                ? bm3_after.getTrTableBm3AkbSet().stream()
                                        .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().get()
                                : null;

                diffBm3AkbAltAntKeinBestandschutz_Addition = getDiffBm3AkbAltAntKeinBestandschutz(null, after);

                if (diffBm3AkbAltAntKeinBestandschutz_Addition != null) {

                    if (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair() != null
                            && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                && (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().get("TR_TABLE_AKB")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm3AkbAltAntKeinBestandschutz_Addition
                                    .getPair().getChanges().get("TR_TABLE_AKB"));
                        } else {
                            if ((diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB"));
                                pair.getChanges().put("TR_TABLE_AKB", changesList);
                            }
                        }

                        if (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm3Akb record");
        } else if (Bm3AkbPKPrevious.size() > 0 && Bm3AkbPKAfter.size() == 0) {
            for (TrTableAkbPK Bm3AkbPK : Bm3AkbPKPrevious) {

                TrTableBm3Akb before = bm3_before.getTrTableBm3AkbSet().stream()
                        .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().isPresent()
                                ? bm3_before.getTrTableBm3AkbSet().stream()
                                        .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().get()
                                : null;

                diffBm3AkbAltAntKeinBestandschutz_Addition = getDiffBm3AkbAltAntKeinBestandschutz(before, null);

                if (diffBm3AkbAltAntKeinBestandschutz_Addition != null) {

                    if (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair() != null
                            && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                && (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().get("TR_TABLE_AKB")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm3AkbAltAntKeinBestandschutz_Addition
                                    .getPair().getChanges().get("TR_TABLE_AKB"));
                        } else {
                            if ((diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB"));
                                pair.getChanges().put("TR_TABLE_AKB", changesList);
                            }
                        }

                        if (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm3Akb records");
        } else if (Bm3AkbPKPrevious.size() > 0 && Bm3AkbPKAfter.size() > 0) {

            Bm3AkbPKIntersection = new HashSet<>(Bm3AkbPKPrevious);
            Bm3AkbPKIntersection.retainAll(Bm3AkbPKAfter);

            if (Bm3AkbPKIntersection.size() > 0) {
                Bm3AkbPKRemoved = new HashSet<>(Bm3AkbPKPrevious);

                Bm3AkbPKRemoved.removeAll(Bm3AkbPKIntersection);
                Bm3AkbPKAdded = new HashSet<>(Bm3AkbPKAfter);

                Bm3AkbPKAdded.removeAll(Bm3AkbPKIntersection);

                for (TrTableAkbPK Bm3AkbPK : Bm3AkbPKAdded) {

                    TrTableBm3Akb before = bm3_before.getTrTableBm3AkbSet().stream()
                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AkbSet().stream()
                                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Akb after = bm3_after.getTrTableBm3AkbSet().stream()
                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AkbSet().stream()
                                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AkbAltAntKeinBestandschutz_Addition = getDiffBm3AkbAltAntKeinBestandschutz(before, after);

                    if (diffBm3AkbAltAntKeinBestandschutz_Addition != null) {

                        if (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair() != null
                                && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm3AkbAltAntKeinBestandschutz_Addition
                                        .getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                        && diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                                .get("TR_TABLE_AKB").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AkbAltAntKeinBestandschutz_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAkbPK Bm3AkbPK : Bm3AkbPKRemoved) {

                    TrTableBm3Akb before = bm3_before.getTrTableBm3AkbSet().stream()
                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AkbSet().stream()
                                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Akb after = bm3_after.getTrTableBm3AkbSet().stream()
                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AkbSet().stream()
                                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AkbAltAntKeinBestandschutz_Removal = getDiffBm3AkbAltAntKeinBestandschutz(before, after);

                    if (diffBm3AkbAltAntKeinBestandschutz_Removal != null) {

                        if (diffBm3AkbAltAntKeinBestandschutz_Removal.getPair() != null
                                && diffBm3AkbAltAntKeinBestandschutz_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm3AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB").addAll(diffBm3AkbAltAntKeinBestandschutz_Removal
                                        .getPair().getChanges().get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm3AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                        && diffBm3AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                                .get("TR_TABLE_AKB").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AkbAltAntKeinBestandschutz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm3AkbAltAntKeinBestandschutz_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3AkbAltAntKeinBestandschutz_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAkbPK Bm3AkbPK : Bm3AkbPKIntersection) {

                    TrTableBm3Akb before = bm3_before.getTrTableBm3AkbSet().stream()
                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AkbSet().stream()
                                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Akb after = bm3_after.getTrTableBm3AkbSet().stream()
                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AkbSet().stream()
                                            .filter(bm3Akb -> bm3Akb.getTrTableAkbPK().equals(Bm3AkbPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AkbAltAntKeinBestandschutz_Intersection = getDiffBm3AkbAltAntKeinBestandschutz(before,
                            after);

                    if (diffBm3AkbAltAntKeinBestandschutz_Intersection != null) {

                        if (diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair() != null
                                && diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKB")
                                    && (diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AKB") != null)
                                    && diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AKB").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKB")
                                        .addAll(diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AKB"));
                            } else {
                                if ((diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_AKB") != null)
                                        && diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AKB").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair()
                                            .getChanges().get("TR_TABLE_AKB"));
                                    pair.getChanges().put("TR_TABLE_AKB", changesList);
                                }
                            }

                            if (diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(
                                        diffBm3AkbAltAntKeinBestandschutz_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm3AkbAltAntKeinBestandschutz_Intersection.isChanged();
                }
            } else {
                Bm3AkbPKAdded = new HashSet<>(Bm3AkbPKPrevious);
                Bm3AkbPKAdded.addAll(Bm3AkbPKAfter);
                Bm3AkbPKRemoved = new HashSet();
            }
        }

        if (Bm3AkbPKAdded.size() > 0) {
            summaries.add("Added a new Bm3Akb record");
        }

        if (Bm3AkbPKRemoved.size() > 0) {
            summaries.add("Removed Bm3Akb record");
        }

        if (changed) {
            summaries.add("Changed Bm3Akb");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3AkeSet(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection,
                diffBm3AkeAltAntKeinBestandschutzErsatz_Addition, diffBm3AkeAltAntKeinBestandschutzErsatz_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableAkePK> Bm3AkePKRemoved, Bm3AkePKAdded, Bm3AkePKIntersection;

        Bm3AkePKRemoved = new HashSet<>();
        Bm3AkePKAdded = new HashSet<>();

        Set<TrTableAkePK> Bm3AkePKPrevious = bm3_before != null
                ? bm3_before.getTrTableBm3AkeSet().stream().map(TrTableAke::getTrTableAkePK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableAkePK> Bm3AkePKAfter = bm3_after != null
                ? bm3_after.getTrTableBm3AkeSet().stream().map(TrTableAke::getTrTableAkePK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (Bm3AkePKPrevious.size() == 0 && Bm3AkePKAfter.size() > 0) {
            for (TrTableAkePK Bm3AkePK : Bm3AkePKAfter) {

                TrTableBm3Ake after = bm3_after.getTrTableBm3AkeSet().stream()
                        .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().isPresent()
                                ? bm3_after.getTrTableBm3AkeSet().stream()
                                        .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().get()
                                : null;

                diffBm3AkeAltAntKeinBestandschutzErsatz_Addition = getDiffBm3AkeAltAntKeinBestandschutzErsatz(null,
                        after);

                if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition != null) {

                    if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair() != null
                            && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                && (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKE")
                                    .addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE"));
                        } else {
                            if ((diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair()
                                        .getChanges().get("TR_TABLE_AKE"));
                                pair.getChanges().put("TR_TABLE_AKE", changesList);
                            }
                        }

                        if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm3Ake record");
        } else if (Bm3AkePKPrevious.size() > 0 && Bm3AkePKAfter.size() == 0) {
            for (TrTableAkePK Bm3AkePK : Bm3AkePKPrevious) {

                TrTableBm3Ake before = bm3_before.getTrTableBm3AkeSet().stream()
                        .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().isPresent()
                                ? bm3_before.getTrTableBm3AkeSet().stream()
                                        .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().get()
                                : null;

                diffBm3AkeAltAntKeinBestandschutzErsatz_Addition = getDiffBm3AkeAltAntKeinBestandschutzErsatz(before,
                        null);

                if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition != null) {

                    if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair() != null
                            && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                && (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE").size() > 0) {
                            pair.getChanges().get("TR_TABLE_AKE")
                                    .addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE"));
                        } else {
                            if ((diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                    .get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair()
                                        .getChanges().get("TR_TABLE_AKE"));
                                pair.getChanges().put("TR_TABLE_AKE", changesList);
                            }
                        }

                        if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm3Ake records");
        } else if (Bm3AkePKPrevious.size() > 0 && Bm3AkePKAfter.size() > 0) {

            Bm3AkePKIntersection = new HashSet<>(Bm3AkePKPrevious);
            Bm3AkePKIntersection.retainAll(Bm3AkePKAfter);

            if (Bm3AkePKIntersection.size() > 0) {
                Bm3AkePKRemoved = new HashSet<>(Bm3AkePKPrevious);

                Bm3AkePKRemoved.removeAll(Bm3AkePKIntersection);
                Bm3AkePKAdded = new HashSet<>(Bm3AkePKAfter);

                Bm3AkePKAdded.removeAll(Bm3AkePKIntersection);

                for (TrTableAkePK Bm3AkePK : Bm3AkePKAdded) {

                    TrTableBm3Ake before = bm3_before.getTrTableBm3AkeSet().stream()
                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AkeSet().stream()
                                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Ake after = bm3_after.getTrTableBm3AkeSet().stream()
                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AkeSet().stream()
                                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AkeAltAntKeinBestandschutzErsatz_Addition = getDiffBm3AkeAltAntKeinBestandschutzErsatz(
                            before, after);

                    if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition != null) {

                        if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair() != null
                                && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                                .get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                        && diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getChanges()
                                                .get("TR_TABLE_AKE").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair()
                                            .getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(
                                        diffBm3AkeAltAntKeinBestandschutzErsatz_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAkePK Bm3AkePK : Bm3AkePKRemoved) {

                    TrTableBm3Ake before = bm3_before.getTrTableBm3AkeSet().stream()
                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AkeSet().stream()
                                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Ake after = bm3_after.getTrTableBm3AkeSet().stream()
                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AkeSet().stream()
                                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AkeAltAntKeinBestandschutzErsatz_Removal = getDiffBm3AkeAltAntKeinBestandschutzErsatz(before,
                            after);

                    if (diffBm3AkeAltAntKeinBestandschutzErsatz_Removal != null) {

                        if (diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair() != null
                                && diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                                .get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                        && diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getChanges()
                                                .get("TR_TABLE_AKE").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair()
                                            .getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(
                                        diffBm3AkeAltAntKeinBestandschutzErsatz_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableAkePK Bm3AkePK : Bm3AkePKIntersection) {

                    TrTableBm3Ake before = bm3_before.getTrTableBm3AkeSet().stream()
                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3AkeSet().stream()
                                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Ake after = bm3_after.getTrTableBm3AkeSet().stream()
                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3AkeSet().stream()
                                            .filter(bm3Ake -> bm3Ake.getTrTableAkePK().equals(Bm3AkePK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection = getDiffBm3AkeAltAntKeinBestandschutzErsatz(
                            before, after);

                    if (diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection != null) {

                        if (diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair() != null
                                && diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                        .size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_AKE")
                                    && (diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AKE") != null)
                                    && diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_AKE").size() > 0) {
                                pair.getChanges().get("TR_TABLE_AKE")
                                        .addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair()
                                                .getChanges().get("TR_TABLE_AKE"));
                            } else {
                                if ((diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_AKE") != null)
                                        && diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_AKE").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair()
                                            .getChanges().get("TR_TABLE_AKE"));
                                    pair.getChanges().put("TR_TABLE_AKE", changesList);
                                }
                            }

                            if (diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getSummaries()
                                    .size() > 0) {
                                summaries.addAll(
                                        diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm3AkeAltAntKeinBestandschutzErsatz_Intersection.isChanged();
                }
            } else {
                Bm3AkePKAdded = new HashSet<>(Bm3AkePKPrevious);
                Bm3AkePKAdded.addAll(Bm3AkePKAfter);
                Bm3AkePKRemoved = new HashSet();
            }
        }

        if (Bm3AkePKAdded.size() > 0) {
            summaries.add("Added a new Bm3Ake record");
        }

        if (Bm3AkePKRemoved.size() > 0) {
            summaries.add("Removed Bm3Ake record");
        }

        if (changed) {
            summaries.add("Changed Bm3Ake");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3EikSet(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm3EikErstattungAbstandnahme_Intersection, diffBm3EikErstattungAbstandnahme_Addition,
                diffBm3EikErstattungAbstandnahme_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTableEikPK> Bm3EikPKRemoved, Bm3EikPKAdded, Bm3EikPKIntersection;

        Bm3EikPKRemoved = new HashSet<>();
        Bm3EikPKAdded = new HashSet<>();

        Set<TrTableEikPK> Bm3EikPKPrevious = bm3_before != null
                ? bm3_before.getTrTableBm3EikSet().stream().map(TrTableEik::getTrTableEikPK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTableEikPK> Bm3EikPKAfter = bm3_after != null
                ? bm3_after.getTrTableBm3EikSet().stream().map(TrTableEik::getTrTableEikPK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (Bm3EikPKPrevious.size() == 0 && Bm3EikPKAfter.size() > 0) {
            for (TrTableEikPK Bm3EikPK : Bm3EikPKAfter) {

                TrTableBm3Eik after = bm3_after.getTrTableBm3EikSet().stream()
                        .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().isPresent()
                                ? bm3_after.getTrTableBm3EikSet().stream()
                                        .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().get()
                                : null;

                diffBm3EikErstattungAbstandnahme_Addition = getDiffBm3EikErstattungAbstandnahme(null, after);

                if (diffBm3EikErstattungAbstandnahme_Addition != null) {

                    if (diffBm3EikErstattungAbstandnahme_Addition.getPair() != null
                            && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                && (diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges().get("TR_TABLE_EIK")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm3EikErstattungAbstandnahme_Addition
                                    .getPair().getChanges().get("TR_TABLE_EIK"));
                        } else {
                            if ((diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                    .get("TR_TABLE_EIK") != null)
                                    && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK"));
                                pair.getChanges().put("TR_TABLE_EIK", changesList);
                            }
                        }

                        if (diffBm3EikErstattungAbstandnahme_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3EikErstattungAbstandnahme_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm3Eik record");
        } else if (Bm3EikPKPrevious.size() > 0 && Bm3EikPKAfter.size() == 0) {
            for (TrTableEikPK Bm3EikPK : Bm3EikPKPrevious) {

                TrTableBm3Eik before = bm3_before.getTrTableBm3EikSet().stream()
                        .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().isPresent()
                                ? bm3_before.getTrTableBm3EikSet().stream()
                                        .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().get()
                                : null;

                diffBm3EikErstattungAbstandnahme_Addition = getDiffBm3EikErstattungAbstandnahme(before, null);

                if (diffBm3EikErstattungAbstandnahme_Addition != null) {

                    if (diffBm3EikErstattungAbstandnahme_Addition.getPair() != null
                            && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                && (diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges().get("TR_TABLE_EIK")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm3EikErstattungAbstandnahme_Addition
                                    .getPair().getChanges().get("TR_TABLE_EIK"));
                        } else {
                            if ((diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                    .get("TR_TABLE_EIK") != null)
                                    && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK"));
                                pair.getChanges().put("TR_TABLE_EIK", changesList);
                            }
                        }

                        if (diffBm3EikErstattungAbstandnahme_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3EikErstattungAbstandnahme_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm3Eik records");
        } else if (Bm3EikPKPrevious.size() > 0 && Bm3EikPKAfter.size() > 0) {

            Bm3EikPKIntersection = new HashSet<>(Bm3EikPKPrevious);
            Bm3EikPKIntersection.retainAll(Bm3EikPKAfter);

            if (Bm3EikPKIntersection.size() > 0) {
                Bm3EikPKRemoved = new HashSet<>(Bm3EikPKPrevious);

                Bm3EikPKRemoved.removeAll(Bm3EikPKIntersection);
                Bm3EikPKAdded = new HashSet<>(Bm3EikPKAfter);

                Bm3EikPKAdded.removeAll(Bm3EikPKIntersection);

                for (TrTableEikPK Bm3EikPK : Bm3EikPKAdded) {

                    TrTableBm3Eik before = bm3_before.getTrTableBm3EikSet().stream()
                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3EikSet().stream()
                                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Eik after = bm3_after.getTrTableBm3EikSet().stream()
                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3EikSet().stream()
                                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3EikErstattungAbstandnahme_Addition = getDiffBm3EikErstattungAbstandnahme(before, after);

                    if (diffBm3EikErstattungAbstandnahme_Addition != null) {

                        if (diffBm3EikErstattungAbstandnahme_Addition.getPair() != null
                                && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK") != null)
                                    && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm3EikErstattungAbstandnahme_Addition
                                        .getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                        && diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                                .get("TR_TABLE_EIK").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3EikErstattungAbstandnahme_Addition.getPair().getChanges()
                                            .get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm3EikErstattungAbstandnahme_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3EikErstattungAbstandnahme_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableEikPK Bm3EikPK : Bm3EikPKRemoved) {

                    TrTableBm3Eik before = bm3_before.getTrTableBm3EikSet().stream()
                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3EikSet().stream()
                                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Eik after = bm3_after.getTrTableBm3EikSet().stream()
                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3EikSet().stream()
                                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3EikErstattungAbstandnahme_Removal = getDiffBm3EikErstattungAbstandnahme(before, after);

                    if (diffBm3EikErstattungAbstandnahme_Removal != null) {

                        if (diffBm3EikErstattungAbstandnahme_Removal.getPair() != null
                                && diffBm3EikErstattungAbstandnahme_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm3EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                            .get("TR_TABLE_EIK") != null)
                                    && diffBm3EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK").addAll(diffBm3EikErstattungAbstandnahme_Removal
                                        .getPair().getChanges().get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm3EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                        && diffBm3EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                                .get("TR_TABLE_EIK").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3EikErstattungAbstandnahme_Removal.getPair().getChanges()
                                            .get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm3EikErstattungAbstandnahme_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3EikErstattungAbstandnahme_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTableEikPK Bm3EikPK : Bm3EikPKIntersection) {

                    TrTableBm3Eik before = bm3_before.getTrTableBm3EikSet().stream()
                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3EikSet().stream()
                                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Eik after = bm3_after.getTrTableBm3EikSet().stream()
                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3EikSet().stream()
                                            .filter(bm3Eik -> bm3Eik.getTrTableEikPK().equals(Bm3EikPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3EikErstattungAbstandnahme_Intersection = getDiffBm3EikErstattungAbstandnahme(before, after);

                    if (diffBm3EikErstattungAbstandnahme_Intersection != null) {

                        if (diffBm3EikErstattungAbstandnahme_Intersection.getPair() != null
                                && diffBm3EikErstattungAbstandnahme_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_EIK")
                                    && (diffBm3EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_EIK") != null)
                                    && diffBm3EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_EIK").size() > 0) {
                                pair.getChanges().get("TR_TABLE_EIK")
                                        .addAll(diffBm3EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_EIK"));
                            } else {
                                if ((diffBm3EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_EIK") != null)
                                        && diffBm3EikErstattungAbstandnahme_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_EIK").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3EikErstattungAbstandnahme_Intersection.getPair()
                                            .getChanges().get("TR_TABLE_EIK"));
                                    pair.getChanges().put("TR_TABLE_EIK", changesList);
                                }
                            }

                            if (diffBm3EikErstattungAbstandnahme_Intersection.getPair().getSummaries().size() > 0) {
                                summaries
                                        .addAll(diffBm3EikErstattungAbstandnahme_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm3EikErstattungAbstandnahme_Intersection.isChanged();
                }
            } else {
                Bm3EikPKAdded = new HashSet<>(Bm3EikPKPrevious);
                Bm3EikPKAdded.addAll(Bm3EikPKAfter);
                Bm3EikPKRemoved = new HashSet();
            }
        }

        if (Bm3EikPKAdded.size() > 0) {
            summaries.add("Added a new Bm3Eik record");
        }

        if (Bm3EikPKRemoved.size() > 0) {
            summaries.add("Removed Bm3Eik record");
        }

        if (changed) {
            summaries.add("Changed Bm3Eik");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private BsbPairWithChangedFlag getDiffBm3PivSet(TrTableBm3 bm3_before, TrTableBm3 bm3_after) {
        BsbPairWithChangedFlag result = new BsbPairWithChangedFlag();
        BsbPairWithChangedFlag diffBm3PivPersInvestVermoegen_Intersection, diffBm3PivPersInvestVermoegen_Addition,
                diffBm3PivPersInvestVermoegen_Removal;
        BsbPair pair = new BsbPair();

        boolean changed = false;

        List<String> summaries = new ArrayList<>();

        List<Map<String, Map<String, Map<String, Object>>>> changesList;

        Set<TrTablePivPK> Bm3PivPKRemoved, Bm3PivPKAdded, Bm3PivPKIntersection;

        Bm3PivPKRemoved = new HashSet<>();
        Bm3PivPKAdded = new HashSet<>();

        Set<TrTablePivPK> Bm3PivPKPrevious = bm3_before != null
                ? bm3_before.getTrTableBm3PivSet().stream().map(TrTablePiv::getTrTablePivPK).collect(Collectors.toSet())
                : new HashSet<>();
        Set<TrTablePivPK> Bm3PivPKAfter = bm3_after != null
                ? bm3_after.getTrTableBm3PivSet().stream().map(TrTablePiv::getTrTablePivPK).collect(Collectors.toSet())
                : new HashSet<>();

        if (bm3_before == null && bm3_after == null) {
            return null;
        } else if (Bm3PivPKPrevious.size() == 0 && Bm3PivPKAfter.size() > 0) {
            for (TrTablePivPK Bm3PivPK : Bm3PivPKAfter) {

                TrTableBm3Piv after = bm3_after.getTrTableBm3PivSet().stream()
                        .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().isPresent()
                                ? bm3_after.getTrTableBm3PivSet().stream()
                                        .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().get()
                                : null;

                diffBm3PivPersInvestVermoegen_Addition = getDiffBm3PivPersInvestVermoegen(null, after);

                if (diffBm3PivPersInvestVermoegen_Addition != null) {

                    if (diffBm3PivPersInvestVermoegen_Addition.getPair() != null
                            && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                && (diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_PIV").addAll(
                                    diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                        } else {
                            if ((diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                    .get("TR_TABLE_PIV") != null)
                                    && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV"));
                                pair.getChanges().put("TR_TABLE_PIV", changesList);
                            }
                        }

                        if (diffBm3PivPersInvestVermoegen_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3PivPersInvestVermoegen_Addition.getPair().getSummaries());
                        }
                    }
                }
            }

            summaries.add("Added a new Bm3Piv record");
        } else if (Bm3PivPKPrevious.size() > 0 && Bm3PivPKAfter.size() == 0) {
            for (TrTablePivPK Bm3PivPK : Bm3PivPKPrevious) {

                TrTableBm3Piv before = bm3_before.getTrTableBm3PivSet().stream()
                        .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().isPresent()
                                ? bm3_before.getTrTableBm3PivSet().stream()
                                        .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().get()
                                : null;

                diffBm3PivPersInvestVermoegen_Addition = getDiffBm3PivPersInvestVermoegen(before, null);

                if (diffBm3PivPersInvestVermoegen_Addition != null) {

                    if (diffBm3PivPersInvestVermoegen_Addition.getPair() != null
                            && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().size() > 0) {

                        if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                && (diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                        .size() > 0) {
                            pair.getChanges().get("TR_TABLE_PIV").addAll(
                                    diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV"));
                        } else {
                            if ((diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                    .get("TR_TABLE_PIV") != null)
                                    && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                changesList = new ArrayList<>();
                                changesList.addAll(diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV"));
                                pair.getChanges().put("TR_TABLE_PIV", changesList);
                            }
                        }

                        if (diffBm3PivPersInvestVermoegen_Addition.getPair().getSummaries().size() > 0) {
                            summaries.addAll(diffBm3PivPersInvestVermoegen_Addition.getPair().getSummaries());
                        }
                    }
                }
            }
            summaries.add("Removed all Bm3Piv records");
        } else if (Bm3PivPKPrevious.size() > 0 && Bm3PivPKAfter.size() > 0) {

            Bm3PivPKIntersection = new HashSet<>(Bm3PivPKPrevious);
            Bm3PivPKIntersection.retainAll(Bm3PivPKAfter);

            if (Bm3PivPKIntersection.size() > 0) {
                Bm3PivPKRemoved = new HashSet<>(Bm3PivPKPrevious);

                Bm3PivPKRemoved.removeAll(Bm3PivPKIntersection);
                Bm3PivPKAdded = new HashSet<>(Bm3PivPKAfter);

                Bm3PivPKAdded.removeAll(Bm3PivPKIntersection);

                for (TrTablePivPK Bm3PivPK : Bm3PivPKAdded) {

                    TrTableBm3Piv before = bm3_before.getTrTableBm3PivSet().stream()
                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3PivSet().stream()
                                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Piv after = bm3_after.getTrTableBm3PivSet().stream()
                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3PivSet().stream()
                                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3PivPersInvestVermoegen_Addition = getDiffBm3PivPersInvestVermoegen(before, after);

                    if (diffBm3PivPersInvestVermoegen_Addition != null) {

                        if (diffBm3PivPersInvestVermoegen_Addition.getPair() != null
                                && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                            .get("TR_TABLE_PIV") != null)
                                    && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV").addAll(diffBm3PivPersInvestVermoegen_Addition
                                        .getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                        && diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                                .get("TR_TABLE_PIV").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3PivPersInvestVermoegen_Addition.getPair().getChanges()
                                            .get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm3PivPersInvestVermoegen_Addition.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3PivPersInvestVermoegen_Addition.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTablePivPK Bm3PivPK : Bm3PivPKRemoved) {

                    TrTableBm3Piv before = bm3_before.getTrTableBm3PivSet().stream()
                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3PivSet().stream()
                                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Piv after = bm3_after.getTrTableBm3PivSet().stream()
                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3PivSet().stream()
                                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3PivPersInvestVermoegen_Removal = getDiffBm3PivPersInvestVermoegen(before, after);

                    if (diffBm3PivPersInvestVermoegen_Removal != null) {

                        if (diffBm3PivPersInvestVermoegen_Removal.getPair() != null
                                && diffBm3PivPersInvestVermoegen_Removal.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm3PivPersInvestVermoegen_Removal.getPair().getChanges()
                                            .get("TR_TABLE_PIV") != null)
                                    && diffBm3PivPersInvestVermoegen_Removal.getPair().getChanges().get("TR_TABLE_PIV")
                                            .size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV").addAll(diffBm3PivPersInvestVermoegen_Removal
                                        .getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm3PivPersInvestVermoegen_Removal.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                        && diffBm3PivPersInvestVermoegen_Removal.getPair().getChanges()
                                                .get("TR_TABLE_PIV").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3PivPersInvestVermoegen_Removal.getPair().getChanges()
                                            .get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm3PivPersInvestVermoegen_Removal.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3PivPersInvestVermoegen_Removal.getPair().getSummaries());
                            }
                        }
                    }
                }

                for (TrTablePivPK Bm3PivPK : Bm3PivPKIntersection) {

                    TrTableBm3Piv before = bm3_before.getTrTableBm3PivSet().stream()
                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().isPresent()
                                    ? bm3_before.getTrTableBm3PivSet().stream()
                                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst()
                                            .get()
                                    : null;
                    TrTableBm3Piv after = bm3_after.getTrTableBm3PivSet().stream()
                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst().isPresent()
                                    ? bm3_after.getTrTableBm3PivSet().stream()
                                            .filter(bm3Piv -> bm3Piv.getTrTablePivPK().equals(Bm3PivPK)).findFirst()
                                            .get()
                                    : null;

                    diffBm3PivPersInvestVermoegen_Intersection = getDiffBm3PivPersInvestVermoegen(before, after);

                    if (diffBm3PivPersInvestVermoegen_Intersection != null) {

                        if (diffBm3PivPersInvestVermoegen_Intersection.getPair() != null
                                && diffBm3PivPersInvestVermoegen_Intersection.getPair().getChanges().size() > 0) {

                            if (pair.getChanges().containsKey("TR_TABLE_PIV")
                                    && (diffBm3PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_PIV") != null)
                                    && diffBm3PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_PIV").size() > 0) {
                                pair.getChanges().get("TR_TABLE_PIV").addAll(diffBm3PivPersInvestVermoegen_Intersection
                                        .getPair().getChanges().get("TR_TABLE_PIV"));
                            } else {
                                if ((diffBm3PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                        .get("TR_TABLE_PIV") != null)
                                        && diffBm3PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                                .get("TR_TABLE_PIV").size() > 0) {
                                    changesList = new ArrayList<>();
                                    changesList.addAll(diffBm3PivPersInvestVermoegen_Intersection.getPair().getChanges()
                                            .get("TR_TABLE_PIV"));
                                    pair.getChanges().put("TR_TABLE_PIV", changesList);
                                }
                            }

                            if (diffBm3PivPersInvestVermoegen_Intersection.getPair().getSummaries().size() > 0) {
                                summaries.addAll(diffBm3PivPersInvestVermoegen_Intersection.getPair().getSummaries());
                            }
                        }
                    }

                    changed = changed || diffBm3PivPersInvestVermoegen_Intersection.isChanged();
                }
            } else {
                Bm3PivPKAdded = new HashSet<>(Bm3PivPKPrevious);
                Bm3PivPKAdded.addAll(Bm3PivPKAfter);
                Bm3PivPKRemoved = new HashSet();
            }
        }

        if (Bm3PivPKAdded.size() > 0) {
            summaries.add("Added a new Bm3Piv record");
        }

        if (Bm3PivPKRemoved.size() > 0) {
            summaries.add("Removed Bm3Piv record");
        }

        if (changed) {
            summaries.add("Changed Bm3Piv");
        }

        pair.setSummaries(summaries);

        result.setChanged(changed);

        result.setPair(pair);

        return result;

    }

    private String rtrim(String original) {
        return original.replaceAll("\\s+$", "");
    }
}